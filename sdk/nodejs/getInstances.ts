// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Get information on instances for use in other resources, with the ability to filter and sort the results. If no filters are specified, all instances will be returned.
 *
 * Note: You can use the `civo.Instance` data source to obtain metadata about a single instance if you already know the id, unique hostname, or unique tag to retrieve.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as civo from "@pulumi/civo";
 *
 * const small-size = civo.getInstances({
 *     region: "NYC1",
 *     filters: [{
 *         key: "size",
 *         values: [g3.small],
 *     }],
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Optional
 *
 * - **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)
 * - **id** (String) The ID of this resource.
 * - **region** (String) If used, all instances will be from the provided region
 * - **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)
 *
 * ### Read-Only
 *
 * - **instances** (List of Object) (see below for nested schema)
 *
 * <a id="nestedblock--filter"></a>
 * ### Nested Schema for `filter`
 *
 * Required:
 *
 * - **key** (String) Filter instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `tags`, `template`.
 * - **values** (List of String) Only retrieves `instances` which keys has value that matches one of the values provided here
 *
 * Optional:
 *
 * - **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
 * - **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
 *
 * <a id="nestedblock--sort"></a>
 * ### Nested Schema for `sort`
 *
 * Required:
 *
 * - **key** (String) Sort instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `template`.
 *
 * Optional:
 *
 * - **direction** (String) The sort direction. This may be either `asc` or `desc`.
 *
 * <a id="nestedatt--instances"></a>
 * ### Nested Schema for `instances`
 *
 * Read-Only:
 *
 * - **cpu_cores** (Number)
 * - **created_at** (String)
 * - **disk_gb** (Number)
 * - **firewall_id** (String)
 * - **hostname** (String)
 * - **id** (String)
 * - **initial_password** (String)
 * - **initial_user** (String)
 * - **network_id** (String)
 * - **notes** (String)
 * - **private_ip** (String)
 * - **pseudo_ip** (String)
 * - **public_ip** (String)
 * - **ram_mb** (Number)
 * - **region** (String)
 * - **reverse_dns** (String)
 * - **script** (String)
 * - **size** (String)
 * - **sshkey_id** (String)
 * - **status** (String)
 * - **tags** (Set of String)
 * - **template** (String)
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("civo:index/getInstances:getInstances", {
        "filters": args.filters,
        "region": args.region,
        "sorts": args.sorts,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    readonly filters?: inputs.GetInstancesFilter[];
    readonly region?: string;
    readonly sorts?: inputs.GetInstancesSort[];
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    readonly filters?: outputs.GetInstancesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instances: outputs.GetInstancesInstance[];
    readonly region?: string;
    readonly sorts?: outputs.GetInstancesSort[];
}
