// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information on an disk image for use in other resources (e.g. creating a instance) with the ability to filter the results.
 */
export function getDiskImage(args?: GetDiskImageArgs, opts?: pulumi.InvokeOptions): Promise<GetDiskImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("civo:index/getDiskImage:getDiskImage", {
        "filters": args.filters,
        "region": args.region,
        "sorts": args.sorts,
    }, opts);
}

/**
 * A collection of arguments for invoking getDiskImage.
 */
export interface GetDiskImageArgs {
    /**
     * One or more key/value pairs on which to filter results
     */
    filters?: inputs.GetDiskImageFilter[];
    /**
     * If is used, all disk image will be from this region. Required if no region is set in provider.
     */
    region?: string;
    /**
     * One or more key/direction pairs on which to sort results
     */
    sorts?: inputs.GetDiskImageSort[];
}

/**
 * A collection of values returned by getDiskImage.
 */
export interface GetDiskImageResult {
    readonly diskimages: outputs.GetDiskImageDiskimage[];
    /**
     * One or more key/value pairs on which to filter results
     */
    readonly filters?: outputs.GetDiskImageFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * If is used, all disk image will be from this region. Required if no region is set in provider.
     */
    readonly region?: string;
    /**
     * One or more key/direction pairs on which to sort results
     */
    readonly sorts?: outputs.GetDiskImageSort[];
}
/**
 * Get information on an disk image for use in other resources (e.g. creating a instance) with the ability to filter the results.
 */
export function getDiskImageOutput(args?: GetDiskImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDiskImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("civo:index/getDiskImage:getDiskImage", {
        "filters": args.filters,
        "region": args.region,
        "sorts": args.sorts,
    }, opts);
}

/**
 * A collection of arguments for invoking getDiskImage.
 */
export interface GetDiskImageOutputArgs {
    /**
     * One or more key/value pairs on which to filter results
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetDiskImageFilterArgs>[]>;
    /**
     * If is used, all disk image will be from this region. Required if no region is set in provider.
     */
    region?: pulumi.Input<string>;
    /**
     * One or more key/direction pairs on which to sort results
     */
    sorts?: pulumi.Input<pulumi.Input<inputs.GetDiskImageSortArgs>[]>;
}
