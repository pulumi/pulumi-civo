// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule {
        return new FirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'civo:index/firewallRule:FirewallRule';

    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }

    /**
     * The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
     * applied, i.e. 0.0.0.0/0)
     */
    public readonly cidrs!: pulumi.Output<string[]>;
    /**
     * Will this rule affect ingress traffic
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
     */
    public readonly endPort!: pulumi.Output<string>;
    public readonly firewallId!: pulumi.Output<string>;
    /**
     * A string that will be the displayed name/reference for this rule (optional)
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The start of the port range to configure for this rule (or the single port if required)
     */
    public readonly startPort!: pulumi.Output<string>;

    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallRuleArgs | FirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as FirewallRuleState | undefined;
            inputs["cidrs"] = state ? state.cidrs : undefined;
            inputs["direction"] = state ? state.direction : undefined;
            inputs["endPort"] = state ? state.endPort : undefined;
            inputs["firewallId"] = state ? state.firewallId : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["startPort"] = state ? state.startPort : undefined;
        } else {
            const args = argsOrState as FirewallRuleArgs | undefined;
            if (!args || args.cidrs === undefined) {
                throw new Error("Missing required property 'cidrs'");
            }
            if (!args || args.direction === undefined) {
                throw new Error("Missing required property 'direction'");
            }
            if (!args || args.endPort === undefined) {
                throw new Error("Missing required property 'endPort'");
            }
            if (!args || args.firewallId === undefined) {
                throw new Error("Missing required property 'firewallId'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            if (!args || args.startPort === undefined) {
                throw new Error("Missing required property 'startPort'");
            }
            inputs["cidrs"] = args ? args.cidrs : undefined;
            inputs["direction"] = args ? args.direction : undefined;
            inputs["endPort"] = args ? args.endPort : undefined;
            inputs["firewallId"] = args ? args.firewallId : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["startPort"] = args ? args.startPort : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(FirewallRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
     * applied, i.e. 0.0.0.0/0)
     */
    readonly cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Will this rule affect ingress traffic
     */
    readonly direction?: pulumi.Input<string>;
    /**
     * The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
     */
    readonly endPort?: pulumi.Input<string>;
    readonly firewallId?: pulumi.Input<string>;
    /**
     * A string that will be the displayed name/reference for this rule (optional)
     */
    readonly label?: pulumi.Input<string>;
    /**
     * The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The start of the port range to configure for this rule (or the single port if required)
     */
    readonly startPort?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
     * applied, i.e. 0.0.0.0/0)
     */
    readonly cidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Will this rule affect ingress traffic
     */
    readonly direction: pulumi.Input<string>;
    /**
     * The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
     */
    readonly endPort: pulumi.Input<string>;
    readonly firewallId: pulumi.Input<string>;
    /**
     * A string that will be the displayed name/reference for this rule (optional)
     */
    readonly label?: pulumi.Input<string>;
    /**
     * The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
     */
    readonly protocol: pulumi.Input<string>;
    /**
     * The start of the port range to configure for this rule (or the single port if required)
     */
    readonly startPort: pulumi.Input<string>;
}
