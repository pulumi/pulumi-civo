// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * using ID
 *
 * ```sh
 * $ pulumi import civo:index/kubernetesCluster:KubernetesCluster my-cluster 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af
 * ```
 */
export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'civo:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    /**
     * (String) The API server endpoint of the cluster
     */
    public /*out*/ readonly apiEndpoint!: pulumi.Output<string>;
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo
     * kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.
     * For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or
     * 'MariaDB:5GB'.
     */
    public readonly applications!: pulumi.Output<string | undefined>;
    /**
     * The type of cluster to create, valid options are `k3s` or `talos` the default is `k3s`
     */
    public readonly clusterType!: pulumi.Output<string>;
    /**
     * The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`
     */
    public readonly cni!: pulumi.Output<string>;
    /**
     * (String) The timestamp when the cluster was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * (String) The DNS name of the cluster
     */
    public /*out*/ readonly dnsEntry!: pulumi.Output<string>;
    /**
     * The existing firewall ID to use for this cluster
     */
    public readonly firewallId!: pulumi.Output<string>;
    /**
     * (List of Object) (see below for nested schema)
     */
    public /*out*/ readonly installedApplications!: pulumi.Output<outputs.KubernetesClusterInstalledApplication[]>;
    /**
     * (String, Sensitive) The kubeconfig of the cluster
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     */
    public readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * (String) The IP address of the master node
     */
    public /*out*/ readonly masterIp!: pulumi.Output<string>;
    /**
     * Name for your cluster, must be unique within your account
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network for the cluster, if not declare we use the default one
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     *
     * @deprecated This field will be deprecated in the next major release, please use the 'pools' field instead
     */
    public readonly numTargetNodes!: pulumi.Output<number>;
    public readonly pools!: pulumi.Output<outputs.KubernetesClusterPools>;
    /**
     * (Boolean) When cluster is ready, this will return `true`
     */
    public /*out*/ readonly ready!: pulumi.Output<boolean>;
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * (String) Status of the cluster
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Space separated list of tags, to be used freely as required
     */
    public readonly tags!: pulumi.Output<string | undefined>;
    /**
     * The size of each node (optional, the default is currently g4s.kube.medium)
     *
     * @deprecated This field will be deprecated in the next major release, please use the 'pools' field instead
     */
    public readonly targetNodesSize!: pulumi.Output<string>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            resourceInputs["apiEndpoint"] = state ? state.apiEndpoint : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["cni"] = state ? state.cni : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dnsEntry"] = state ? state.dnsEntry : undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["installedApplications"] = state ? state.installedApplications : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["masterIp"] = state ? state.masterIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["numTargetNodes"] = state ? state.numTargetNodes : undefined;
            resourceInputs["pools"] = state ? state.pools : undefined;
            resourceInputs["ready"] = state ? state.ready : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetNodesSize"] = state ? state.targetNodesSize : undefined;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if ((!args || args.firewallId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallId'");
            }
            if ((!args || args.pools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pools'");
            }
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["cni"] = args ? args.cni : undefined;
            resourceInputs["firewallId"] = args ? args.firewallId : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["numTargetNodes"] = args ? args.numTargetNodes : undefined;
            resourceInputs["pools"] = args ? args.pools : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetNodesSize"] = args ? args.targetNodesSize : undefined;
            resourceInputs["apiEndpoint"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnsEntry"] = undefined /*out*/;
            resourceInputs["installedApplications"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["masterIp"] = undefined /*out*/;
            resourceInputs["ready"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KubernetesCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    /**
     * (String) The API server endpoint of the cluster
     */
    apiEndpoint?: pulumi.Input<string>;
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo
     * kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.
     * For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or
     * 'MariaDB:5GB'.
     */
    applications?: pulumi.Input<string>;
    /**
     * The type of cluster to create, valid options are `k3s` or `talos` the default is `k3s`
     */
    clusterType?: pulumi.Input<string>;
    /**
     * The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`
     */
    cni?: pulumi.Input<string>;
    /**
     * (String) The timestamp when the cluster was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * (String) The DNS name of the cluster
     */
    dnsEntry?: pulumi.Input<string>;
    /**
     * The existing firewall ID to use for this cluster
     */
    firewallId?: pulumi.Input<string>;
    /**
     * (List of Object) (see below for nested schema)
     */
    installedApplications?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterInstalledApplication>[]>;
    /**
     * (String, Sensitive) The kubeconfig of the cluster
     */
    kubeconfig?: pulumi.Input<string>;
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * (String) The IP address of the master node
     */
    masterIp?: pulumi.Input<string>;
    /**
     * Name for your cluster, must be unique within your account
     */
    name?: pulumi.Input<string>;
    /**
     * The network for the cluster, if not declare we use the default one
     */
    networkId?: pulumi.Input<string>;
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     *
     * @deprecated This field will be deprecated in the next major release, please use the 'pools' field instead
     */
    numTargetNodes?: pulumi.Input<number>;
    pools?: pulumi.Input<inputs.KubernetesClusterPools>;
    /**
     * (Boolean) When cluster is ready, this will return `true`
     */
    ready?: pulumi.Input<boolean>;
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     */
    region?: pulumi.Input<string>;
    /**
     * (String) Status of the cluster
     */
    status?: pulumi.Input<string>;
    /**
     * Space separated list of tags, to be used freely as required
     */
    tags?: pulumi.Input<string>;
    /**
     * The size of each node (optional, the default is currently g4s.kube.medium)
     *
     * @deprecated This field will be deprecated in the next major release, please use the 'pools' field instead
     */
    targetNodesSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo
     * kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.
     * For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or
     * 'MariaDB:5GB'.
     */
    applications?: pulumi.Input<string>;
    /**
     * The type of cluster to create, valid options are `k3s` or `talos` the default is `k3s`
     */
    clusterType?: pulumi.Input<string>;
    /**
     * The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`
     */
    cni?: pulumi.Input<string>;
    /**
     * The existing firewall ID to use for this cluster
     */
    firewallId: pulumi.Input<string>;
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Name for your cluster, must be unique within your account
     */
    name?: pulumi.Input<string>;
    /**
     * The network for the cluster, if not declare we use the default one
     */
    networkId?: pulumi.Input<string>;
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     *
     * @deprecated This field will be deprecated in the next major release, please use the 'pools' field instead
     */
    numTargetNodes?: pulumi.Input<number>;
    pools: pulumi.Input<inputs.KubernetesClusterPools>;
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     */
    region?: pulumi.Input<string>;
    /**
     * Space separated list of tags, to be used freely as required
     */
    tags?: pulumi.Input<string>;
    /**
     * The size of each node (optional, the default is currently g4s.kube.medium)
     *
     * @deprecated This field will be deprecated in the next major release, please use the 'pools' field instead
     */
    targetNodesSize?: pulumi.Input<string>;
}
