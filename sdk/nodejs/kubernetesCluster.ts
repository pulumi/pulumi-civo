// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Civo Kubernetes cluster resource. This can be used to create, delete, and modify clusters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as civo from "@pulumi/civo";
 *
 * const xsmall = civo.getInstancesSize({
 *     filters: [{
 *         key: "type",
 *         values: ["kubernetes"],
 *     }],
 *     sorts: [{
 *         key: "ram",
 *         direction: "asc",
 *     }],
 * });
 * // Create a firewall
 * const my_firewall = new civo.Firewall("my-firewall", {});
 * // Create a firewall rule
 * const kubernetes = new civo.FirewallRule("kubernetes", {
 *     firewallId: my_firewall.id,
 *     protocol: "tcp",
 *     startPort: "6443",
 *     endPort: "6443",
 *     cidrs: ["0.0.0.0/0"],
 *     direction: "ingress",
 *     label: "kubernetes-api-server",
 * });
 * // Create a cluster
 * const my_cluster = new civo.KubernetesCluster("my-cluster", {
 *     applications: "Portainer,Linkerd:Linkerd & Jaeger",
 *     numTargetNodes: 2,
 *     targetNodesSize: xsmall.then(xsmall => xsmall.sizes)[0].then(sizes => sizes.name),
 *     firewallId: my_firewall.id,
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **firewall_id** (String) The existing firewall ID to use for this cluster
 *
 * ### Optional
 *
 * - **applications** (String) Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik. For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or 'MariaDB:5GB'.
 * - **id** (String) The ID of this resource.
 * - **kubernetes_version** (String) The version of k3s to install (optional, the default is currently the latest available)
 * - **name** (String) Name for your cluster, must be unique within your account
 * - **network_id** (String) The network for the cluster, if not declare we use the default one
 * - **num_target_nodes** (Number) The number of instances to create (optional, the default at the time of writing is 3)
 * - **region** (String) The region for the cluster, if not declare we use the region in declared in the provider
 * - **tags** (String) Space separated list of tags, to be used freely as required
 * - **target_nodes_size** (String) The size of each node (optional, the default is currently g3.k3s.medium)
 *
 * ### Read-Only
 *
 * - **api_endpoint** (String) The API server endpoint of the cluster
 * - **created_at** (String) The timestamp when the cluster was created
 * - **dns_entry** (String) The DNS name of the cluster
 * - **installed_applications** (List of Object) (see below for nested schema)
 * - **instances** (List of Object) (see below for nested schema)
 * - **kubeconfig** (String, Sensitive) The kubeconfig of the cluster
 * - **master_ip** (String) The IP address of the master node
 * - **pools** (List of Object) (see below for nested schema)
 * - **ready** (Boolean) When cluster is ready, this will return `true`
 * - **status** (String) Status of the cluster
 *
 * <a id="nestedatt--installed_applications"></a>
 * ### Nested Schema for `installedApplications`
 *
 * Read-Only:
 *
 * - **application** (String)
 * - **category** (String)
 * - **installed** (Boolean)
 * - **version** (String)
 *
 * <a id="nestedatt--instances"></a>
 * ### Nested Schema for `instances`
 *
 * Read-Only:
 *
 * - **cpu_cores** (Number)
 * - **disk_gb** (Number)
 * - **hostname** (String)
 * - **ram_mb** (Number)
 * - **size** (String)
 * - **status** (String)
 * - **tags** (Set of String)
 *
 * <a id="nestedatt--pools"></a>
 * ### Nested Schema for `pools`
 *
 * Read-Only:
 *
 * - **count** (Number)
 * - **id** (String)
 * - **instance_names** (Set of String)
 * - **instances** (List of Object) (see below for nested schema)
 * - **size** (String)
 *
 * <a id="nestedobjatt--pools--instances"></a>
 * ### Nested Schema for `pools.instances`
 *
 * Read-Only:
 *
 * - **cpu_cores** (Number)
 * - **disk_gb** (Number)
 * - **hostname** (String)
 * - **ram_mb** (Number)
 * - **size** (String)
 * - **status** (String)
 * - **tags** (Set of String)
 *
 * ## Import
 *
 * Import is supported using the following syntax# using ID
 *
 * ```sh
 *  $ pulumi import civo:index/kubernetesCluster:KubernetesCluster my-cluster 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af
 * ```
 */
export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'civo:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    /**
     * The API server endpoint of the cluster
     */
    public /*out*/ readonly apiEndpoint!: pulumi.Output<string>;
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo
     * kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.
     * For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or
     * 'MariaDB:5GB'.
     */
    public readonly applications!: pulumi.Output<string | undefined>;
    /**
     * The timestamp when the cluster was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The DNS name of the cluster
     */
    public /*out*/ readonly dnsEntry!: pulumi.Output<string>;
    /**
     * The existing firewall ID to use for this cluster
     */
    public readonly firewallId!: pulumi.Output<string>;
    public /*out*/ readonly installedApplications!: pulumi.Output<outputs.KubernetesClusterInstalledApplication[]>;
    public /*out*/ readonly instances!: pulumi.Output<outputs.KubernetesClusterInstance[]>;
    /**
     * The kubeconfig of the cluster
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     */
    public readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * The IP address of the master node
     */
    public /*out*/ readonly masterIp!: pulumi.Output<string>;
    /**
     * Name for your cluster, must be unique within your account
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network for the cluster, if not declare we use the default one
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     */
    public readonly numTargetNodes!: pulumi.Output<number>;
    public /*out*/ readonly pools!: pulumi.Output<outputs.KubernetesClusterPool[]>;
    /**
     * When cluster is ready, this will return `true`
     */
    public /*out*/ readonly ready!: pulumi.Output<boolean>;
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Status of the cluster
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Space separated list of tags, to be used freely as required
     */
    public readonly tags!: pulumi.Output<string | undefined>;
    /**
     * The size of each node (optional, the default is currently g3.k3s.medium)
     */
    public readonly targetNodesSize!: pulumi.Output<string>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            inputs["apiEndpoint"] = state ? state.apiEndpoint : undefined;
            inputs["applications"] = state ? state.applications : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["dnsEntry"] = state ? state.dnsEntry : undefined;
            inputs["firewallId"] = state ? state.firewallId : undefined;
            inputs["installedApplications"] = state ? state.installedApplications : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            inputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            inputs["masterIp"] = state ? state.masterIp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["numTargetNodes"] = state ? state.numTargetNodes : undefined;
            inputs["pools"] = state ? state.pools : undefined;
            inputs["ready"] = state ? state.ready : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["targetNodesSize"] = state ? state.targetNodesSize : undefined;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if ((!args || args.firewallId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallId'");
            }
            inputs["applications"] = args ? args.applications : undefined;
            inputs["firewallId"] = args ? args.firewallId : undefined;
            inputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["numTargetNodes"] = args ? args.numTargetNodes : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetNodesSize"] = args ? args.targetNodesSize : undefined;
            inputs["apiEndpoint"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["dnsEntry"] = undefined /*out*/;
            inputs["installedApplications"] = undefined /*out*/;
            inputs["instances"] = undefined /*out*/;
            inputs["kubeconfig"] = undefined /*out*/;
            inputs["masterIp"] = undefined /*out*/;
            inputs["pools"] = undefined /*out*/;
            inputs["ready"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(KubernetesCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    /**
     * The API server endpoint of the cluster
     */
    readonly apiEndpoint?: pulumi.Input<string>;
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo
     * kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.
     * For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or
     * 'MariaDB:5GB'.
     */
    readonly applications?: pulumi.Input<string>;
    /**
     * The timestamp when the cluster was created
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * The DNS name of the cluster
     */
    readonly dnsEntry?: pulumi.Input<string>;
    /**
     * The existing firewall ID to use for this cluster
     */
    readonly firewallId?: pulumi.Input<string>;
    readonly installedApplications?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterInstalledApplication>[]>;
    readonly instances?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterInstance>[]>;
    /**
     * The kubeconfig of the cluster
     */
    readonly kubeconfig?: pulumi.Input<string>;
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     */
    readonly kubernetesVersion?: pulumi.Input<string>;
    /**
     * The IP address of the master node
     */
    readonly masterIp?: pulumi.Input<string>;
    /**
     * Name for your cluster, must be unique within your account
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The network for the cluster, if not declare we use the default one
     */
    readonly networkId?: pulumi.Input<string>;
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     */
    readonly numTargetNodes?: pulumi.Input<number>;
    readonly pools?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterPool>[]>;
    /**
     * When cluster is ready, this will return `true`
     */
    readonly ready?: pulumi.Input<boolean>;
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Status of the cluster
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Space separated list of tags, to be used freely as required
     */
    readonly tags?: pulumi.Input<string>;
    /**
     * The size of each node (optional, the default is currently g3.k3s.medium)
     */
    readonly targetNodesSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo
     * kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.
     * For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd & Jaeger' or
     * 'MariaDB:5GB'.
     */
    readonly applications?: pulumi.Input<string>;
    /**
     * The existing firewall ID to use for this cluster
     */
    readonly firewallId: pulumi.Input<string>;
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     */
    readonly kubernetesVersion?: pulumi.Input<string>;
    /**
     * Name for your cluster, must be unique within your account
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The network for the cluster, if not declare we use the default one
     */
    readonly networkId?: pulumi.Input<string>;
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     */
    readonly numTargetNodes?: pulumi.Input<number>;
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Space separated list of tags, to be used freely as required
     */
    readonly tags?: pulumi.Input<string>;
    /**
     * The size of each node (optional, the default is currently g3.k3s.medium)
     */
    readonly targetNodesSize?: pulumi.Input<string>;
}
