// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./dnsDomainName";
export * from "./dnsDomainRecord";
export * from "./firewall";
export * from "./firewallRule";
export * from "./getDnsDomainName";
export * from "./getDnsDomainRecord";
export * from "./getInstance";
export * from "./getInstances";
export * from "./getInstancesSize";
export * from "./getKubernetesCluster";
export * from "./getKubernetesVersion";
export * from "./getLoadBalancer";
export * from "./getNetwork";
export * from "./getRegion";
export * from "./getSnapshot";
export * from "./getSshKey";
export * from "./getTemplate";
export * from "./getVolume";
export * from "./instance";
export * from "./kubernetesCluster";
export * from "./kubernetesNodePool";
export * from "./loadBalancer";
export * from "./network";
export * from "./provider";
export * from "./snapshot";
export * from "./sshKey";
export * from "./template";
export * from "./volume";
export * from "./volumeAttachment";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { DnsDomainName } from "./dnsDomainName";
import { DnsDomainRecord } from "./dnsDomainRecord";
import { Firewall } from "./firewall";
import { FirewallRule } from "./firewallRule";
import { Instance } from "./instance";
import { KubernetesCluster } from "./kubernetesCluster";
import { KubernetesNodePool } from "./kubernetesNodePool";
import { LoadBalancer } from "./loadBalancer";
import { Network } from "./network";
import { Snapshot } from "./snapshot";
import { SshKey } from "./sshKey";
import { Template } from "./template";
import { Volume } from "./volume";
import { VolumeAttachment } from "./volumeAttachment";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "civo:index/dnsDomainName:DnsDomainName":
                return new DnsDomainName(name, <any>undefined, { urn })
            case "civo:index/dnsDomainRecord:DnsDomainRecord":
                return new DnsDomainRecord(name, <any>undefined, { urn })
            case "civo:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "civo:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "civo:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "civo:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "civo:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "civo:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "civo:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "civo:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "civo:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "civo:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "civo:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "civo:index/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("civo", "index/dnsDomainName", _module)
pulumi.runtime.registerResourceModule("civo", "index/dnsDomainRecord", _module)
pulumi.runtime.registerResourceModule("civo", "index/firewall", _module)
pulumi.runtime.registerResourceModule("civo", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("civo", "index/instance", _module)
pulumi.runtime.registerResourceModule("civo", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("civo", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("civo", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("civo", "index/network", _module)
pulumi.runtime.registerResourceModule("civo", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("civo", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("civo", "index/template", _module)
pulumi.runtime.registerResourceModule("civo", "index/volume", _module)
pulumi.runtime.registerResourceModule("civo", "index/volumeAttachment", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("civo", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:civo") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
