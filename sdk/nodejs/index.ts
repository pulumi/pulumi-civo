// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DnsDomainNameArgs, DnsDomainNameState } from "./dnsDomainName";
export type DnsDomainName = import("./dnsDomainName").DnsDomainName;
export const DnsDomainName: typeof import("./dnsDomainName").DnsDomainName = null as any;
utilities.lazyLoad(exports, ["DnsDomainName"], () => require("./dnsDomainName"));

export { DnsDomainRecordArgs, DnsDomainRecordState } from "./dnsDomainRecord";
export type DnsDomainRecord = import("./dnsDomainRecord").DnsDomainRecord;
export const DnsDomainRecord: typeof import("./dnsDomainRecord").DnsDomainRecord = null as any;
utilities.lazyLoad(exports, ["DnsDomainRecord"], () => require("./dnsDomainRecord"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseVersionArgs, GetDatabaseVersionResult, GetDatabaseVersionOutputArgs } from "./getDatabaseVersion";
export const getDatabaseVersion: typeof import("./getDatabaseVersion").getDatabaseVersion = null as any;
export const getDatabaseVersionOutput: typeof import("./getDatabaseVersion").getDatabaseVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVersion","getDatabaseVersionOutput"], () => require("./getDatabaseVersion"));

export { GetDiskImageArgs, GetDiskImageResult, GetDiskImageOutputArgs } from "./getDiskImage";
export const getDiskImage: typeof import("./getDiskImage").getDiskImage = null as any;
export const getDiskImageOutput: typeof import("./getDiskImage").getDiskImageOutput = null as any;
utilities.lazyLoad(exports, ["getDiskImage","getDiskImageOutput"], () => require("./getDiskImage"));

export { GetDnsDomainNameArgs, GetDnsDomainNameResult, GetDnsDomainNameOutputArgs } from "./getDnsDomainName";
export const getDnsDomainName: typeof import("./getDnsDomainName").getDnsDomainName = null as any;
export const getDnsDomainNameOutput: typeof import("./getDnsDomainName").getDnsDomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomainName","getDnsDomainNameOutput"], () => require("./getDnsDomainName"));

export { GetDnsDomainRecordArgs, GetDnsDomainRecordResult, GetDnsDomainRecordOutputArgs } from "./getDnsDomainRecord";
export const getDnsDomainRecord: typeof import("./getDnsDomainRecord").getDnsDomainRecord = null as any;
export const getDnsDomainRecordOutput: typeof import("./getDnsDomainRecord").getDnsDomainRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomainRecord","getDnsDomainRecordOutput"], () => require("./getDnsDomainRecord"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetKubernetesVersionArgs, GetKubernetesVersionResult, GetKubernetesVersionOutputArgs } from "./getKubernetesVersion";
export const getKubernetesVersion: typeof import("./getKubernetesVersion").getKubernetesVersion = null as any;
export const getKubernetesVersionOutput: typeof import("./getKubernetesVersion").getKubernetesVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVersion","getKubernetesVersionOutput"], () => require("./getKubernetesVersion"));

export { GetLoadBalancerArgs, GetLoadBalancerResult, GetLoadBalancerOutputArgs } from "./getLoadBalancer";
export const getLoadBalancer: typeof import("./getLoadBalancer").getLoadBalancer = null as any;
export const getLoadBalancerOutput: typeof import("./getLoadBalancer").getLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancer","getLoadBalancerOutput"], () => require("./getLoadBalancer"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetObjectStoreArgs, GetObjectStoreResult, GetObjectStoreOutputArgs } from "./getObjectStore";
export const getObjectStore: typeof import("./getObjectStore").getObjectStore = null as any;
export const getObjectStoreOutput: typeof import("./getObjectStore").getObjectStoreOutput = null as any;
utilities.lazyLoad(exports, ["getObjectStore","getObjectStoreOutput"], () => require("./getObjectStore"));

export { GetObjectStoreCredentialArgs, GetObjectStoreCredentialResult, GetObjectStoreCredentialOutputArgs } from "./getObjectStoreCredential";
export const getObjectStoreCredential: typeof import("./getObjectStoreCredential").getObjectStoreCredential = null as any;
export const getObjectStoreCredentialOutput: typeof import("./getObjectStoreCredential").getObjectStoreCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getObjectStoreCredential","getObjectStoreCredentialOutput"], () => require("./getObjectStoreCredential"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetReservedIpArgs, GetReservedIpResult, GetReservedIpOutputArgs } from "./getReservedIp";
export const getReservedIp: typeof import("./getReservedIp").getReservedIp = null as any;
export const getReservedIpOutput: typeof import("./getReservedIp").getReservedIpOutput = null as any;
utilities.lazyLoad(exports, ["getReservedIp","getReservedIpOutput"], () => require("./getReservedIp"));

export { GetSizeArgs, GetSizeResult, GetSizeOutputArgs } from "./getSize";
export const getSize: typeof import("./getSize").getSize = null as any;
export const getSizeOutput: typeof import("./getSize").getSizeOutput = null as any;
utilities.lazyLoad(exports, ["getSize","getSizeOutput"], () => require("./getSize"));

export { GetSshKeyArgs, GetSshKeyResult, GetSshKeyOutputArgs } from "./getSshKey";
export const getSshKey: typeof import("./getSshKey").getSshKey = null as any;
export const getSshKeyOutput: typeof import("./getSshKey").getSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshKey","getSshKeyOutput"], () => require("./getSshKey"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceReservedIpAssignmentArgs, InstanceReservedIpAssignmentState } from "./instanceReservedIpAssignment";
export type InstanceReservedIpAssignment = import("./instanceReservedIpAssignment").InstanceReservedIpAssignment;
export const InstanceReservedIpAssignment: typeof import("./instanceReservedIpAssignment").InstanceReservedIpAssignment = null as any;
utilities.lazyLoad(exports, ["InstanceReservedIpAssignment"], () => require("./instanceReservedIpAssignment"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesNodePoolArgs, KubernetesNodePoolState } from "./kubernetesNodePool";
export type KubernetesNodePool = import("./kubernetesNodePool").KubernetesNodePool;
export const KubernetesNodePool: typeof import("./kubernetesNodePool").KubernetesNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesNodePool"], () => require("./kubernetesNodePool"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ObjectStoreArgs, ObjectStoreState } from "./objectStore";
export type ObjectStore = import("./objectStore").ObjectStore;
export const ObjectStore: typeof import("./objectStore").ObjectStore = null as any;
utilities.lazyLoad(exports, ["ObjectStore"], () => require("./objectStore"));

export { ObjectStoreCredentialArgs, ObjectStoreCredentialState } from "./objectStoreCredential";
export type ObjectStoreCredential = import("./objectStoreCredential").ObjectStoreCredential;
export const ObjectStoreCredential: typeof import("./objectStoreCredential").ObjectStoreCredential = null as any;
utilities.lazyLoad(exports, ["ObjectStoreCredential"], () => require("./objectStoreCredential"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReservedIpArgs, ReservedIpState } from "./reservedIp";
export type ReservedIp = import("./reservedIp").ReservedIp;
export const ReservedIp: typeof import("./reservedIp").ReservedIp = null as any;
utilities.lazyLoad(exports, ["ReservedIp"], () => require("./reservedIp"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeAttachmentArgs, VolumeAttachmentState } from "./volumeAttachment";
export type VolumeAttachment = import("./volumeAttachment").VolumeAttachment;
export const VolumeAttachment: typeof import("./volumeAttachment").VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "civo:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "civo:index/dnsDomainName:DnsDomainName":
                return new DnsDomainName(name, <any>undefined, { urn })
            case "civo:index/dnsDomainRecord:DnsDomainRecord":
                return new DnsDomainRecord(name, <any>undefined, { urn })
            case "civo:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "civo:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "civo:index/instanceReservedIpAssignment:InstanceReservedIpAssignment":
                return new InstanceReservedIpAssignment(name, <any>undefined, { urn })
            case "civo:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "civo:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "civo:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "civo:index/objectStore:ObjectStore":
                return new ObjectStore(name, <any>undefined, { urn })
            case "civo:index/objectStoreCredential:ObjectStoreCredential":
                return new ObjectStoreCredential(name, <any>undefined, { urn })
            case "civo:index/reservedIp:ReservedIp":
                return new ReservedIp(name, <any>undefined, { urn })
            case "civo:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "civo:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "civo:index/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("civo", "index/database", _module)
pulumi.runtime.registerResourceModule("civo", "index/dnsDomainName", _module)
pulumi.runtime.registerResourceModule("civo", "index/dnsDomainRecord", _module)
pulumi.runtime.registerResourceModule("civo", "index/firewall", _module)
pulumi.runtime.registerResourceModule("civo", "index/instance", _module)
pulumi.runtime.registerResourceModule("civo", "index/instanceReservedIpAssignment", _module)
pulumi.runtime.registerResourceModule("civo", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("civo", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("civo", "index/network", _module)
pulumi.runtime.registerResourceModule("civo", "index/objectStore", _module)
pulumi.runtime.registerResourceModule("civo", "index/objectStoreCredential", _module)
pulumi.runtime.registerResourceModule("civo", "index/reservedIp", _module)
pulumi.runtime.registerResourceModule("civo", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("civo", "index/volume", _module)
pulumi.runtime.registerResourceModule("civo", "index/volumeAttachment", _module)
pulumi.runtime.registerResourcePackage("civo", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:civo") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
