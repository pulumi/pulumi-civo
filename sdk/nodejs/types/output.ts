// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface GetDiskImageDiskimage {
    /**
     * The ID of this resource.
     */
    id: string;
    label: string;
    name: string;
    version: string;
}

export interface GetDiskImageFilter {
    /**
     * Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
     */
    all?: boolean;
    /**
     * Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
     */
    key: string;
    /**
     * One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
     */
    matchBy?: string;
    /**
     * Only retrieves `diskimages` which keys has value that matches one of the values provided here
     */
    values: string[];
}

export interface GetDiskImageSort {
    /**
     * The sort direction. This may be either `asc` or `desc`.
     */
    direction?: string;
    /**
     * Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
     */
    key: string;
}

export interface GetInstancesFilter {
    /**
     * Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
     */
    all?: boolean;
    /**
     * Filter instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `tags`, `template`.
     */
    key: string;
    /**
     * One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
     */
    matchBy?: string;
    /**
     * Only retrieves `instances` which keys has value that matches one of the values provided here
     */
    values: string[];
}

export interface GetInstancesInstance {
    cpuCores: number;
    createdAt: string;
    diskGb: number;
    firewallId: string;
    hostname: string;
    /**
     * The ID of this resource.
     */
    id: string;
    initialPassword: string;
    initialUser: string;
    networkId: string;
    notes: string;
    privateIp: string;
    pseudoIp: string;
    publicIp: string;
    ramMb: number;
    /**
     * If used, all instances will be from the provided region
     */
    region: string;
    reverseDns: string;
    script: string;
    size: string;
    sshkeyId: string;
    status: string;
    tags: string[];
    template: string;
}

export interface GetInstancesSizeFilter {
    /**
     * Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
     */
    all?: boolean;
    /**
     * Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `name`, `ram`, `selectable`, `type`.
     */
    key: string;
    /**
     * One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
     */
    matchBy?: string;
    /**
     * Only retrieves `sizes` which keys has value that matches one of the values provided here
     */
    values: string[];
}

export interface GetInstancesSizeSize {
    cpu: number;
    description: string;
    disk: number;
    name: string;
    ram: number;
    selectable: boolean;
    type: string;
}

export interface GetInstancesSizeSort {
    /**
     * The sort direction. This may be either `asc` or `desc`.
     */
    direction?: string;
    /**
     * Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `name`, `ram`, `selectable`, `type`.
     */
    key: string;
}

export interface GetInstancesSort {
    /**
     * The sort direction. This may be either `asc` or `desc`.
     */
    direction?: string;
    /**
     * Sort instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `template`.
     */
    key: string;
}

export interface GetKubernetesClusterInstalledApplication {
    application: string;
    category: string;
    installed: boolean;
    version: string;
}

export interface GetKubernetesClusterInstance {
    cpuCores: number;
    diskGb: number;
    hostname: string;
    ramMb: number;
    size: string;
    /**
     * The status of Kubernetes cluster
     */
    status: string;
    /**
     * A list of tags
     */
    tags: string[];
}

export interface GetKubernetesClusterPool {
    count: number;
    /**
     * The ID of this resource.
     */
    id: string;
    instanceNames: string[];
    instances: outputs.GetKubernetesClusterPoolInstance[];
    size: string;
}

export interface GetKubernetesClusterPoolInstance {
    cpuCores: number;
    diskGb: number;
    hostname: string;
    ramMb: number;
    size: string;
    /**
     * The status of Kubernetes cluster
     */
    status: string;
    /**
     * A list of tags
     */
    tags: string[];
}

export interface GetKubernetesVersionFilter {
    /**
     * Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
     */
    all?: boolean;
    /**
     * Filter versions by this key. This may be one of `default`, `label`, `type`, `version`.
     */
    key: string;
    /**
     * One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
     */
    matchBy?: string;
    /**
     * Only retrieves `versions` which keys has value that matches one of the values provided here
     */
    values: string[];
}

export interface GetKubernetesVersionSort {
    /**
     * The sort direction. This may be either `asc` or `desc`.
     */
    direction?: string;
    /**
     * Sort versions by this key. This may be one of `default`, `label`, `type`, `version`.
     */
    key: string;
}

export interface GetKubernetesVersionVersion {
    default: boolean;
    label: string;
    type: string;
    version: string;
}

export interface GetRegionFilter {
    /**
     * Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
     */
    all?: boolean;
    /**
     * Filter regions by this key. This may be one of `code`, `country`, `default`, `name`.
     */
    key: string;
    /**
     * One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
     */
    matchBy?: string;
    /**
     * Only retrieves `regions` which keys has value that matches one of the values provided here
     */
    values: string[];
}

export interface GetRegionRegion {
    code: string;
    country: string;
    default: boolean;
    name: string;
}

export interface GetRegionSort {
    /**
     * The sort direction. This may be either `asc` or `desc`.
     */
    direction?: string;
    /**
     * Sort regions by this key. This may be one of `code`, `country`, `default`, `name`.
     */
    key: string;
}

export interface GetTemplateFilter {
    /**
     * Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
     */
    all?: boolean;
    /**
     * Filter templates by this key. This may be one of `id`, `label`, `name`, `version`.
     */
    key: string;
    /**
     * One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
     */
    matchBy?: string;
    /**
     * Only retrieves `templates` which keys has value that matches one of the values provided here
     */
    values: string[];
}

export interface GetTemplateSort {
    /**
     * The sort direction. This may be either `asc` or `desc`.
     */
    direction?: string;
    /**
     * Sort templates by this key. This may be one of `id`, `label`, `name`, `version`.
     */
    key: string;
}

export interface GetTemplateTemplate {
    /**
     * The ID of this resource.
     */
    id: string;
    label: string;
    name: string;
    version: string;
}

export interface KubernetesClusterInstalledApplication {
    application: string;
    category: string;
    installed: boolean;
    version: string;
}

export interface KubernetesClusterInstance {
    cpuCores: number;
    diskGb: number;
    hostname: string;
    ramMb: number;
    size: string;
    /**
     * Status of the cluster
     */
    status: string;
    /**
     * Space separated list of tags, to be used freely as required
     */
    tags: string[];
}

export interface KubernetesClusterPool {
    count: number;
    /**
     * The ID of this resource.
     */
    id: string;
    instanceNames: string[];
    instances: outputs.KubernetesClusterPoolInstance[];
    size: string;
}

export interface KubernetesClusterPoolInstance {
    cpuCores: number;
    diskGb: number;
    hostname: string;
    ramMb: number;
    size: string;
    /**
     * Status of the cluster
     */
    status: string;
    /**
     * Space separated list of tags, to be used freely as required
     */
    tags: string[];
}
