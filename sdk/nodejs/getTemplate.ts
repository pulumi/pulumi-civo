// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `civo.getTemplate` data source is deprecated. Moving forward, please use `civo.getDiskImage` data source.
 *
 * Get information on an template for use in other resources (e.g. creating a instance) with the ability to filter the results.
 */
export function getTemplate(args?: GetTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetTemplateResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("civo:index/getTemplate:getTemplate", {
        "filters": args.filters,
        "region": args.region,
        "sorts": args.sorts,
    }, opts);
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateArgs {
    /**
     * One or more key/value pairs on which to filter results
     */
    filters?: inputs.GetTemplateFilter[];
    region?: string;
    /**
     * One or more key/direction pairs on which to sort results
     */
    sorts?: inputs.GetTemplateSort[];
}

/**
 * A collection of values returned by getTemplate.
 */
export interface GetTemplateResult {
    /**
     * One or more key/value pairs on which to filter results
     */
    readonly filters?: outputs.GetTemplateFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly region?: string;
    /**
     * One or more key/direction pairs on which to sort results
     */
    readonly sorts?: outputs.GetTemplateSort[];
    readonly templates: outputs.GetTemplateTemplate[];
}

export function getTemplateOutput(args?: GetTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTemplateResult> {
    return pulumi.output(args).apply(a => getTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateOutputArgs {
    /**
     * One or more key/value pairs on which to filter results
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetTemplateFilterArgs>[]>;
    region?: pulumi.Input<string>;
    /**
     * One or more key/direction pairs on which to sort results
     */
    sorts?: pulumi.Input<pulumi.Input<inputs.GetTemplateSortArgs>[]>;
}
