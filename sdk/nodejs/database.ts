// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * using ID
 *
 * ```sh
 * $ pulumi import civo:index/database:Database mydb 29fcd1c4-fb61-44c7-b49c-dc7b98e9927e
 * ```
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'civo:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The DNS endpoint of the database
     */
    public /*out*/ readonly dnsEndpoint!: pulumi.Output<string>;
    /**
     * The endpoint of the database
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The engine of the database
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)
     */
    public readonly firewallId!: pulumi.Output<string>;
    /**
     * Name of the database
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the associated network
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Count of nodes
     */
    public readonly nodes!: pulumi.Output<number>;
    /**
     * The password of the database
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * The port of the database
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The private IP assigned to the database
     */
    public /*out*/ readonly privateIpv4!: pulumi.Output<string>;
    /**
     * The region where the database will be created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Size of the database
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The status of the database
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The username of the database
     */
    public /*out*/ readonly username!: pulumi.Output<string>;
    /**
     * The version of the database
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["dnsEndpoint"] = state ? state.dnsEndpoint : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateIpv4"] = state ? state.privateIpv4 : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.nodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["firewallId"] = args ? args.firewallId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["dnsEndpoint"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["privateIpv4"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * The DNS endpoint of the database
     */
    dnsEndpoint?: pulumi.Input<string>;
    /**
     * The endpoint of the database
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The engine of the database
     */
    engine?: pulumi.Input<string>;
    /**
     * The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)
     */
    firewallId?: pulumi.Input<string>;
    /**
     * Name of the database
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the associated network
     */
    networkId?: pulumi.Input<string>;
    /**
     * Count of nodes
     */
    nodes?: pulumi.Input<number>;
    /**
     * The password of the database
     */
    password?: pulumi.Input<string>;
    /**
     * The port of the database
     */
    port?: pulumi.Input<number>;
    /**
     * The private IP assigned to the database
     */
    privateIpv4?: pulumi.Input<string>;
    /**
     * The region where the database will be created.
     */
    region?: pulumi.Input<string>;
    /**
     * Size of the database
     */
    size?: pulumi.Input<string>;
    /**
     * The status of the database
     */
    status?: pulumi.Input<string>;
    /**
     * The username of the database
     */
    username?: pulumi.Input<string>;
    /**
     * The version of the database
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The engine of the database
     */
    engine: pulumi.Input<string>;
    /**
     * The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)
     */
    firewallId?: pulumi.Input<string>;
    /**
     * Name of the database
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the associated network
     */
    networkId?: pulumi.Input<string>;
    /**
     * Count of nodes
     */
    nodes: pulumi.Input<number>;
    /**
     * The region where the database will be created.
     */
    region?: pulumi.Input<string>;
    /**
     * Size of the database
     */
    size: pulumi.Input<string>;
    /**
     * The version of the database
     */
    version: pulumi.Input<string>;
}
