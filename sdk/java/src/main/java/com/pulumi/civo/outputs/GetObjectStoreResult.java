// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetObjectStoreResult {
    /**
     * @return The access key ID from the Object Store credential. If this is not set, a new credential will be created.
     * 
     */
    private String accessKeyId;
    /**
     * @return The endpoint of the Object Store
     * 
     */
    private String bucketUrl;
    /**
     * @return The ID of the Object Store
     * 
     */
    private @Nullable String id;
    /**
     * @return The maximum size of the Object Store
     * 
     */
    private Integer maxSizeGb;
    /**
     * @return The name of the Object Store
     * 
     */
    private @Nullable String name;
    /**
     * @return The region of an existing Object Store
     * 
     */
    private @Nullable String region;
    /**
     * @return The status of the Object Store
     * 
     */
    private String status;

    private GetObjectStoreResult() {}
    /**
     * @return The access key ID from the Object Store credential. If this is not set, a new credential will be created.
     * 
     */
    public String accessKeyId() {
        return this.accessKeyId;
    }
    /**
     * @return The endpoint of the Object Store
     * 
     */
    public String bucketUrl() {
        return this.bucketUrl;
    }
    /**
     * @return The ID of the Object Store
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The maximum size of the Object Store
     * 
     */
    public Integer maxSizeGb() {
        return this.maxSizeGb;
    }
    /**
     * @return The name of the Object Store
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The region of an existing Object Store
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The status of the Object Store
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetObjectStoreResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKeyId;
        private String bucketUrl;
        private @Nullable String id;
        private Integer maxSizeGb;
        private @Nullable String name;
        private @Nullable String region;
        private String status;
        public Builder() {}
        public Builder(GetObjectStoreResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.bucketUrl = defaults.bucketUrl;
    	      this.id = defaults.id;
    	      this.maxSizeGb = defaults.maxSizeGb;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder accessKeyId(String accessKeyId) {
            if (accessKeyId == null) {
              throw new MissingRequiredPropertyException("GetObjectStoreResult", "accessKeyId");
            }
            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder bucketUrl(String bucketUrl) {
            if (bucketUrl == null) {
              throw new MissingRequiredPropertyException("GetObjectStoreResult", "bucketUrl");
            }
            this.bucketUrl = bucketUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeGb(Integer maxSizeGb) {
            if (maxSizeGb == null) {
              throw new MissingRequiredPropertyException("GetObjectStoreResult", "maxSizeGb");
            }
            this.maxSizeGb = maxSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetObjectStoreResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetObjectStoreResult build() {
            final var _resultValue = new GetObjectStoreResult();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.bucketUrl = bucketUrl;
            _resultValue.id = id;
            _resultValue.maxSizeGb = maxSizeGb;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
