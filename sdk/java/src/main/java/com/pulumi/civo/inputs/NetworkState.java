// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkState Empty = new NetworkState();

    /**
     * The CIDR block for the network
     * 
     */
    @Import(name="cidrV4")
    private @Nullable Output<String> cidrV4;

    /**
     * @return The CIDR block for the network
     * 
     */
    public Optional<Output<String>> cidrV4() {
        return Optional.ofNullable(this.cidrV4);
    }

    /**
     * If the network is default, this will be `true`
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return If the network is default, this will be `true`
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * Name for the network
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Name for the network
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The name of the network
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the network
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of nameservers for the network
     * 
     */
    @Import(name="nameserversV4s")
    private @Nullable Output<List<String>> nameserversV4s;

    /**
     * @return List of nameservers for the network
     * 
     */
    public Optional<Output<List<String>>> nameserversV4s() {
        return Optional.ofNullable(this.nameserversV4s);
    }

    /**
     * The region of the network
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the network
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private NetworkState() {}

    private NetworkState(NetworkState $) {
        this.cidrV4 = $.cidrV4;
        this.default_ = $.default_;
        this.label = $.label;
        this.name = $.name;
        this.nameserversV4s = $.nameserversV4s;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkState $;

        public Builder() {
            $ = new NetworkState();
        }

        public Builder(NetworkState defaults) {
            $ = new NetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrV4 The CIDR block for the network
         * 
         * @return builder
         * 
         */
        public Builder cidrV4(@Nullable Output<String> cidrV4) {
            $.cidrV4 = cidrV4;
            return this;
        }

        /**
         * @param cidrV4 The CIDR block for the network
         * 
         * @return builder
         * 
         */
        public Builder cidrV4(String cidrV4) {
            return cidrV4(Output.of(cidrV4));
        }

        /**
         * @param default_ If the network is default, this will be `true`
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ If the network is default, this will be `true`
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param label Name for the network
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Name for the network
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param name The name of the network
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameserversV4s List of nameservers for the network
         * 
         * @return builder
         * 
         */
        public Builder nameserversV4s(@Nullable Output<List<String>> nameserversV4s) {
            $.nameserversV4s = nameserversV4s;
            return this;
        }

        /**
         * @param nameserversV4s List of nameservers for the network
         * 
         * @return builder
         * 
         */
        public Builder nameserversV4s(List<String> nameserversV4s) {
            return nameserversV4s(Output.of(nameserversV4s));
        }

        /**
         * @param nameserversV4s List of nameservers for the network
         * 
         * @return builder
         * 
         */
        public Builder nameserversV4s(String... nameserversV4s) {
            return nameserversV4s(List.of(nameserversV4s));
        }

        /**
         * @param region The region of the network
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the network
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public NetworkState build() {
            return $;
        }
    }

}
