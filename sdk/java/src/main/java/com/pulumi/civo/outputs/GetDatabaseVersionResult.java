// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo.outputs;

import com.pulumi.civo.outputs.GetDatabaseVersionFilter;
import com.pulumi.civo.outputs.GetDatabaseVersionSort;
import com.pulumi.civo.outputs.GetDatabaseVersionVersion;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseVersionResult {
    /**
     * @return One or more key/value pairs on which to filter results
     * 
     */
    private @Nullable List<GetDatabaseVersionFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return One or more key/direction pairs on which to sort results
     * 
     */
    private @Nullable List<GetDatabaseVersionSort> sorts;
    private List<GetDatabaseVersionVersion> versions;

    private GetDatabaseVersionResult() {}
    /**
     * @return One or more key/value pairs on which to filter results
     * 
     */
    public List<GetDatabaseVersionFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return One or more key/direction pairs on which to sort results
     * 
     */
    public List<GetDatabaseVersionSort> sorts() {
        return this.sorts == null ? List.of() : this.sorts;
    }
    public List<GetDatabaseVersionVersion> versions() {
        return this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseVersionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetDatabaseVersionFilter> filters;
        private String id;
        private @Nullable List<GetDatabaseVersionSort> sorts;
        private List<GetDatabaseVersionVersion> versions;
        public Builder() {}
        public Builder(GetDatabaseVersionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.sorts = defaults.sorts;
    	      this.versions = defaults.versions;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetDatabaseVersionFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDatabaseVersionFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder sorts(@Nullable List<GetDatabaseVersionSort> sorts) {
            this.sorts = sorts;
            return this;
        }
        public Builder sorts(GetDatabaseVersionSort... sorts) {
            return sorts(List.of(sorts));
        }
        @CustomType.Setter
        public Builder versions(List<GetDatabaseVersionVersion> versions) {
            this.versions = Objects.requireNonNull(versions);
            return this;
        }
        public Builder versions(GetDatabaseVersionVersion... versions) {
            return versions(List.of(versions));
        }
        public GetDatabaseVersionResult build() {
            final var o = new GetDatabaseVersionResult();
            o.filters = filters;
            o.id = id;
            o.sorts = sorts;
            o.versions = versions;
            return o;
        }
    }
}
