// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesNodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesNodePoolState Empty = new KubernetesNodePoolState();

    /**
     * The ID of your cluster
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of your cluster
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Instance names in the nodepool
     * 
     */
    @Import(name="instanceNames")
    private @Nullable Output<List<String>> instanceNames;

    /**
     * @return Instance names in the nodepool
     * 
     */
    public Optional<Output<List<String>>> instanceNames() {
        return Optional.ofNullable(this.instanceNames);
    }

    /**
     * Node pool label, if you don&#39;t provide one, we will generate one for you
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Node pool label, if you don&#39;t provide one, we will generate one for you
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * the number of instances to create (optional, the default at the time of writing is 3)
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return the number of instances to create (optional, the default at the time of writing is 3)
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * the number of instances to create (optional, the default at the time of writing is 3)
     * 
     * @deprecated
     * This field is deprecated, please use `node_count` instead
     * 
     */
    @Deprecated /* This field is deprecated, please use `node_count` instead */
    @Import(name="numTargetNodes")
    private @Nullable Output<Integer> numTargetNodes;

    /**
     * @return the number of instances to create (optional, the default at the time of writing is 3)
     * 
     * @deprecated
     * This field is deprecated, please use `node_count` instead
     * 
     */
    @Deprecated /* This field is deprecated, please use `node_count` instead */
    public Optional<Output<Integer>> numTargetNodes() {
        return Optional.ofNullable(this.numTargetNodes);
    }

    /**
     * Node pool belongs to the public ip node pool
     * 
     */
    @Import(name="publicIpNodePool")
    private @Nullable Output<Boolean> publicIpNodePool;

    /**
     * @return Node pool belongs to the public ip node pool
     * 
     */
    public Optional<Output<Boolean>> publicIpNodePool() {
        return Optional.ofNullable(this.publicIpNodePool);
    }

    /**
     * The region of the node pool, has to match that of the cluster
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the node pool, has to match that of the cluster
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * the size of each node (optional, the default is currently g4s.kube.medium)
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return the size of each node (optional, the default is currently g4s.kube.medium)
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * the size of each node (optional, the default is currently g4s.kube.medium)
     * 
     * @deprecated
     * This field is deprecated, please use `size` instead
     * 
     */
    @Deprecated /* This field is deprecated, please use `size` instead */
    @Import(name="targetNodesSize")
    private @Nullable Output<String> targetNodesSize;

    /**
     * @return the size of each node (optional, the default is currently g4s.kube.medium)
     * 
     * @deprecated
     * This field is deprecated, please use `size` instead
     * 
     */
    @Deprecated /* This field is deprecated, please use `size` instead */
    public Optional<Output<String>> targetNodesSize() {
        return Optional.ofNullable(this.targetNodesSize);
    }

    private KubernetesNodePoolState() {}

    private KubernetesNodePoolState(KubernetesNodePoolState $) {
        this.clusterId = $.clusterId;
        this.instanceNames = $.instanceNames;
        this.label = $.label;
        this.nodeCount = $.nodeCount;
        this.numTargetNodes = $.numTargetNodes;
        this.publicIpNodePool = $.publicIpNodePool;
        this.region = $.region;
        this.size = $.size;
        this.targetNodesSize = $.targetNodesSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesNodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesNodePoolState $;

        public Builder() {
            $ = new KubernetesNodePoolState();
        }

        public Builder(KubernetesNodePoolState defaults) {
            $ = new KubernetesNodePoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of your cluster
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of your cluster
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param instanceNames Instance names in the nodepool
         * 
         * @return builder
         * 
         */
        public Builder instanceNames(@Nullable Output<List<String>> instanceNames) {
            $.instanceNames = instanceNames;
            return this;
        }

        /**
         * @param instanceNames Instance names in the nodepool
         * 
         * @return builder
         * 
         */
        public Builder instanceNames(List<String> instanceNames) {
            return instanceNames(Output.of(instanceNames));
        }

        /**
         * @param instanceNames Instance names in the nodepool
         * 
         * @return builder
         * 
         */
        public Builder instanceNames(String... instanceNames) {
            return instanceNames(List.of(instanceNames));
        }

        /**
         * @param label Node pool label, if you don&#39;t provide one, we will generate one for you
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Node pool label, if you don&#39;t provide one, we will generate one for you
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param nodeCount the number of instances to create (optional, the default at the time of writing is 3)
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount the number of instances to create (optional, the default at the time of writing is 3)
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param numTargetNodes the number of instances to create (optional, the default at the time of writing is 3)
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, please use `node_count` instead
         * 
         */
        @Deprecated /* This field is deprecated, please use `node_count` instead */
        public Builder numTargetNodes(@Nullable Output<Integer> numTargetNodes) {
            $.numTargetNodes = numTargetNodes;
            return this;
        }

        /**
         * @param numTargetNodes the number of instances to create (optional, the default at the time of writing is 3)
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, please use `node_count` instead
         * 
         */
        @Deprecated /* This field is deprecated, please use `node_count` instead */
        public Builder numTargetNodes(Integer numTargetNodes) {
            return numTargetNodes(Output.of(numTargetNodes));
        }

        /**
         * @param publicIpNodePool Node pool belongs to the public ip node pool
         * 
         * @return builder
         * 
         */
        public Builder publicIpNodePool(@Nullable Output<Boolean> publicIpNodePool) {
            $.publicIpNodePool = publicIpNodePool;
            return this;
        }

        /**
         * @param publicIpNodePool Node pool belongs to the public ip node pool
         * 
         * @return builder
         * 
         */
        public Builder publicIpNodePool(Boolean publicIpNodePool) {
            return publicIpNodePool(Output.of(publicIpNodePool));
        }

        /**
         * @param region The region of the node pool, has to match that of the cluster
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the node pool, has to match that of the cluster
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param size the size of each node (optional, the default is currently g4s.kube.medium)
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size the size of each node (optional, the default is currently g4s.kube.medium)
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param targetNodesSize the size of each node (optional, the default is currently g4s.kube.medium)
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, please use `size` instead
         * 
         */
        @Deprecated /* This field is deprecated, please use `size` instead */
        public Builder targetNodesSize(@Nullable Output<String> targetNodesSize) {
            $.targetNodesSize = targetNodesSize;
            return this;
        }

        /**
         * @param targetNodesSize the size of each node (optional, the default is currently g4s.kube.medium)
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, please use `size` instead
         * 
         */
        @Deprecated /* This field is deprecated, please use `size` instead */
        public Builder targetNodesSize(String targetNodesSize) {
            return targetNodesSize(Output.of(targetNodesSize));
        }

        public KubernetesNodePoolState build() {
            return $;
        }
    }

}
