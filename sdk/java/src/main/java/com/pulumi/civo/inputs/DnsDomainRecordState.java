// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsDomainRecordState extends com.pulumi.resources.ResourceArgs {

    public static final DnsDomainRecordState Empty = new DnsDomainRecordState();

    /**
     * The account ID of this resource
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account ID of this resource
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Timestamp when this resource was created
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp when this resource was created
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * ID from domain name
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    /**
     * @return ID from domain name
     * 
     */
    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an
     * amex/root domain)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an
     * amex/root domain)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Useful for MX records only, the priority mail should be attempted it (defaults to 10)
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Useful for MX records only, the priority mail should be attempted it (defaults to 10)
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified
     * is 600)
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified
     * is 600)
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The choice of RR type from a, cname, mx or txt
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The choice of RR type from a, cname, mx or txt
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Timestamp when this resource was updated
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Timestamp when this resource was updated
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private DnsDomainRecordState() {}

    private DnsDomainRecordState(DnsDomainRecordState $) {
        this.accountId = $.accountId;
        this.createdAt = $.createdAt;
        this.domainId = $.domainId;
        this.name = $.name;
        this.priority = $.priority;
        this.ttl = $.ttl;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsDomainRecordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsDomainRecordState $;

        public Builder() {
            $ = new DnsDomainRecordState();
        }

        public Builder(DnsDomainRecordState defaults) {
            $ = new DnsDomainRecordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account ID of this resource
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID of this resource
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createdAt Timestamp when this resource was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp when this resource was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param domainId ID from domain name
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId ID from domain name
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param name The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an
         * amex/root domain)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an
         * amex/root domain)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Useful for MX records only, the priority mail should be attempted it (defaults to 10)
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Useful for MX records only, the priority mail should be attempted it (defaults to 10)
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param ttl How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified
         * is 600)
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified
         * is 600)
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type The choice of RR type from a, cname, mx or txt
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The choice of RR type from a, cname, mx or txt
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedAt Timestamp when this resource was updated
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Timestamp when this resource was updated
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param value The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DnsDomainRecordState build() {
            return $;
        }
    }

}
