// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectStoreState extends com.pulumi.resources.ResourceArgs {

    public static final ObjectStoreState Empty = new ObjectStoreState();

    /**
     * The access key ID from the Object Store credential. If this is not set, a new credential will be created.
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return The access key ID from the Object Store credential. If this is not set, a new credential will be created.
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * The endpoint of the Object Store. It is generated by the provider.
     * 
     */
    @Import(name="bucketUrl")
    private @Nullable Output<String> bucketUrl;

    /**
     * @return The endpoint of the Object Store. It is generated by the provider.
     * 
     */
    public Optional<Output<String>> bucketUrl() {
        return Optional.ofNullable(this.bucketUrl);
    }

    /**
     * The maximum size of the Object Store. Default is 500GB.
     * 
     */
    @Import(name="maxSizeGb")
    private @Nullable Output<Integer> maxSizeGb;

    /**
     * @return The maximum size of the Object Store. Default is 500GB.
     * 
     */
    public Optional<Output<Integer>> maxSizeGb() {
        return Optional.ofNullable(this.maxSizeGb);
    }

    /**
     * The name of the Object Store. Must be unique.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Object Store. Must be unique.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The status of the Object Store.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Object Store.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ObjectStoreState() {}

    private ObjectStoreState(ObjectStoreState $) {
        this.accessKeyId = $.accessKeyId;
        this.bucketUrl = $.bucketUrl;
        this.maxSizeGb = $.maxSizeGb;
        this.name = $.name;
        this.region = $.region;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectStoreState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectStoreState $;

        public Builder() {
            $ = new ObjectStoreState();
        }

        public Builder(ObjectStoreState defaults) {
            $ = new ObjectStoreState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId The access key ID from the Object Store credential. If this is not set, a new credential will be created.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId The access key ID from the Object Store credential. If this is not set, a new credential will be created.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param bucketUrl The endpoint of the Object Store. It is generated by the provider.
         * 
         * @return builder
         * 
         */
        public Builder bucketUrl(@Nullable Output<String> bucketUrl) {
            $.bucketUrl = bucketUrl;
            return this;
        }

        /**
         * @param bucketUrl The endpoint of the Object Store. It is generated by the provider.
         * 
         * @return builder
         * 
         */
        public Builder bucketUrl(String bucketUrl) {
            return bucketUrl(Output.of(bucketUrl));
        }

        /**
         * @param maxSizeGb The maximum size of the Object Store. Default is 500GB.
         * 
         * @return builder
         * 
         */
        public Builder maxSizeGb(@Nullable Output<Integer> maxSizeGb) {
            $.maxSizeGb = maxSizeGb;
            return this;
        }

        /**
         * @param maxSizeGb The maximum size of the Object Store. Default is 500GB.
         * 
         * @return builder
         * 
         */
        public Builder maxSizeGb(Integer maxSizeGb) {
            return maxSizeGb(Output.of(maxSizeGb));
        }

        /**
         * @param name The name of the Object Store. Must be unique.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Object Store. Must be unique.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param status The status of the Object Store.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Object Store.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ObjectStoreState build() {
            return $;
        }
    }

}
