// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.civo;

import com.pulumi.civo.KubernetesClusterArgs;
import com.pulumi.civo.Utilities;
import com.pulumi.civo.inputs.KubernetesClusterState;
import com.pulumi.civo.outputs.KubernetesClusterInstalledApplication;
import com.pulumi.civo.outputs.KubernetesClusterPools;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Civo Kubernetes cluster resource. This can be used to create, delete, and modify clusters.
 * 
 * ## Import
 * 
 * # using ID
 * 
 * ```sh
 *  $ pulumi import civo:index/kubernetesCluster:KubernetesCluster my-cluster 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af
 * ```
 * 
 */
@ResourceType(type="civo:index/kubernetesCluster:KubernetesCluster")
public class KubernetesCluster extends com.pulumi.resources.CustomResource {
    /**
     * The API server endpoint of the cluster
     * 
     */
    @Export(name="apiEndpoint", type=String.class, parameters={})
    private Output<String> apiEndpoint;

    /**
     * @return The API server endpoint of the cluster
     * 
     */
    public Output<String> apiEndpoint() {
        return this.apiEndpoint;
    }
    /**
     * Comma separated list of applications to install. Spaces within application names are fine, but shouldn&#39;t be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: &#39;civo
     * kubernetes applications ls&#39;. If you want to remove a default installed application, prefix it with a &#39;-&#39;, e.g. -Traefik.
     * For application that supports plans, you can use &#39;app_name:app_plan&#39; format e.g. &#39;Linkerd:Linkerd &amp; Jaeger&#39; or
     * &#39;MariaDB:5GB&#39;.
     * 
     */
    @Export(name="applications", type=String.class, parameters={})
    private Output</* @Nullable */ String> applications;

    /**
     * @return Comma separated list of applications to install. Spaces within application names are fine, but shouldn&#39;t be either side
     * of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: &#39;civo
     * kubernetes applications ls&#39;. If you want to remove a default installed application, prefix it with a &#39;-&#39;, e.g. -Traefik.
     * For application that supports plans, you can use &#39;app_name:app_plan&#39; format e.g. &#39;Linkerd:Linkerd &amp; Jaeger&#39; or
     * &#39;MariaDB:5GB&#39;.
     * 
     */
    public Output<Optional<String>> applications() {
        return Codegen.optional(this.applications);
    }
    /**
     * The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`
     * 
     */
    @Export(name="cni", type=String.class, parameters={})
    private Output<String> cni;

    /**
     * @return The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`
     * 
     */
    public Output<String> cni() {
        return this.cni;
    }
    /**
     * The timestamp when the cluster was created
     * 
     */
    @Export(name="createdAt", type=String.class, parameters={})
    private Output<String> createdAt;

    /**
     * @return The timestamp when the cluster was created
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * The DNS name of the cluster
     * 
     */
    @Export(name="dnsEntry", type=String.class, parameters={})
    private Output<String> dnsEntry;

    /**
     * @return The DNS name of the cluster
     * 
     */
    public Output<String> dnsEntry() {
        return this.dnsEntry;
    }
    /**
     * The existing firewall ID to use for this cluster
     * 
     */
    @Export(name="firewallId", type=String.class, parameters={})
    private Output<String> firewallId;

    /**
     * @return The existing firewall ID to use for this cluster
     * 
     */
    public Output<String> firewallId() {
        return this.firewallId;
    }
    @Export(name="installedApplications", type=List.class, parameters={KubernetesClusterInstalledApplication.class})
    private Output<List<KubernetesClusterInstalledApplication>> installedApplications;

    public Output<List<KubernetesClusterInstalledApplication>> installedApplications() {
        return this.installedApplications;
    }
    /**
     * The kubeconfig of the cluster
     * 
     */
    @Export(name="kubeconfig", type=String.class, parameters={})
    private Output<String> kubeconfig;

    /**
     * @return The kubeconfig of the cluster
     * 
     */
    public Output<String> kubeconfig() {
        return this.kubeconfig;
    }
    /**
     * The version of k3s to install (optional, the default is currently the latest available)
     * 
     */
    @Export(name="kubernetesVersion", type=String.class, parameters={})
    private Output<String> kubernetesVersion;

    /**
     * @return The version of k3s to install (optional, the default is currently the latest available)
     * 
     */
    public Output<String> kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * The IP address of the master node
     * 
     */
    @Export(name="masterIp", type=String.class, parameters={})
    private Output<String> masterIp;

    /**
     * @return The IP address of the master node
     * 
     */
    public Output<String> masterIp() {
        return this.masterIp;
    }
    /**
     * Name for your cluster, must be unique within your account
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name for your cluster, must be unique within your account
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The network for the cluster, if not declare we use the default one
     * 
     */
    @Export(name="networkId", type=String.class, parameters={})
    private Output<String> networkId;

    /**
     * @return The network for the cluster, if not declare we use the default one
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * The number of instances to create (optional, the default at the time of writing is 3)
     * 
     * @deprecated
     * This field will be deprecated in the next major release, please use the &#39;pools&#39; field instead
     * 
     */
    @Deprecated /* This field will be deprecated in the next major release, please use the 'pools' field instead */
    @Export(name="numTargetNodes", type=Integer.class, parameters={})
    private Output<Integer> numTargetNodes;

    /**
     * @return The number of instances to create (optional, the default at the time of writing is 3)
     * 
     */
    public Output<Integer> numTargetNodes() {
        return this.numTargetNodes;
    }
    @Export(name="pools", type=KubernetesClusterPools.class, parameters={})
    private Output<KubernetesClusterPools> pools;

    public Output<KubernetesClusterPools> pools() {
        return this.pools;
    }
    /**
     * When cluster is ready, this will return `true`
     * 
     */
    @Export(name="ready", type=Boolean.class, parameters={})
    private Output<Boolean> ready;

    /**
     * @return When cluster is ready, this will return `true`
     * 
     */
    public Output<Boolean> ready() {
        return this.ready;
    }
    /**
     * The region for the cluster, if not declare we use the region in declared in the provider
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region for the cluster, if not declare we use the region in declared in the provider
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Status of the cluster
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return Status of the cluster
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Space separated list of tags, to be used freely as required
     * 
     */
    @Export(name="tags", type=String.class, parameters={})
    private Output</* @Nullable */ String> tags;

    /**
     * @return Space separated list of tags, to be used freely as required
     * 
     */
    public Output<Optional<String>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The size of each node (optional, the default is currently g4s.kube.medium)
     * 
     * @deprecated
     * This field will be deprecated in the next major release, please use the &#39;pools&#39; field instead
     * 
     */
    @Deprecated /* This field will be deprecated in the next major release, please use the 'pools' field instead */
    @Export(name="targetNodesSize", type=String.class, parameters={})
    private Output<String> targetNodesSize;

    /**
     * @return The size of each node (optional, the default is currently g4s.kube.medium)
     * 
     */
    public Output<String> targetNodesSize() {
        return this.targetNodesSize;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KubernetesCluster(String name) {
        this(name, KubernetesClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KubernetesCluster(String name, KubernetesClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KubernetesCluster(String name, KubernetesClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("civo:index/kubernetesCluster:KubernetesCluster", name, args == null ? KubernetesClusterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private KubernetesCluster(String name, Output<String> id, @Nullable KubernetesClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("civo:index/kubernetesCluster:KubernetesCluster", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KubernetesCluster get(String name, Output<String> id, @Nullable KubernetesClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KubernetesCluster(name, id, state, options);
    }
}
