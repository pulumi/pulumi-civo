// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Civo firewall resource. This can be used to create, modify, and delete firewalls.
//
// ## Example Usage
//
// * View firewalls after creation on the [CLI](https://www.civo.com/docs/overview/civo-cli):
// * View firewalls after creation on the [Dashboard](https://dashboard.civo.com/firewalls)
// * View firewall rules on [CLI](https://www.civo.com/docs/overview/civo-cli):
//
// ### Custom ingress and egress rules firewall
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := civo.NewNetwork(ctx, "example", &civo.NetworkArgs{
//				Label: pulumi.String("example-network"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFirewall, err := civo.NewFirewall(ctx, "example", &civo.FirewallArgs{
//				Name:               pulumi.String("example-firewall"),
//				NetworkId:          example.ID(),
//				CreateDefaultRules: pulumi.Bool(false),
//				IngressRules: civo.FirewallIngressRuleArray{
//					&civo.FirewallIngressRuleArgs{
//						Label:     pulumi.String("http"),
//						Protocol:  pulumi.String("tcp"),
//						PortRange: pulumi.String("80"),
//						Cidrs: pulumi.StringArray{
//							pulumi.String("0.0.0.0"),
//						},
//						Action: pulumi.String("allow"),
//					},
//					&civo.FirewallIngressRuleArgs{
//						Label:     pulumi.String("https"),
//						Protocol:  pulumi.String("tcp"),
//						PortRange: pulumi.String("443"),
//						Cidrs: pulumi.StringArray{
//							pulumi.String("0.0.0.0"),
//						},
//						Action: pulumi.String("allow"),
//					},
//					&civo.FirewallIngressRuleArgs{
//						Label:     pulumi.String("ssh"),
//						Protocol:  pulumi.String("tcp"),
//						PortRange: pulumi.String("22"),
//						Cidrs: pulumi.StringArray{
//							pulumi.String("192.168.1.1/32"),
//							pulumi.String("192.168.10.4/32"),
//							pulumi.String("192.168.10.10/32"),
//						},
//						Action: pulumi.String("allow"),
//					},
//				},
//				EgressRules: civo.FirewallEgressRuleArray{
//					&civo.FirewallEgressRuleArgs{
//						Label:     pulumi.String("all"),
//						Protocol:  pulumi.String("tcp"),
//						PortRange: pulumi.String("1-65535"),
//						Cidrs: pulumi.StringArray{
//							pulumi.String("0.0.0.0/0"),
//						},
//						Action: pulumi.String("allow"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			debian, err := civo.GetDiskImage(ctx, &civo.GetDiskImageArgs{
//				Filters: []civo.GetDiskImageFilter{
//					{
//						Key: "name",
//						Values: []string{
//							"debian-10",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create a new instance
//			_, err = civo.NewInstance(ctx, "example", &civo.InstanceArgs{
//				Hostname:   pulumi.String("example"),
//				Notes:      pulumi.String("This is an example instance"),
//				FirewallId: exampleFirewall.ID(),
//				NetworkId:  example.ID(),
//				Size:       pulumi.String("g3.xsmall"),
//				DiskImage:  pulumi.String(debian.Diskimages[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Simple firewall
//
// This the minimum amount of code to create a firewall with default rules:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ...
//			_, err := civo.NewFirewall(ctx, "example", &civo.FirewallArgs{
//				Name:      pulumi.String("example-firewall"),
//				NetworkId: pulumi.Any(exampleCivoNetwork.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using ID
//
// ```sh
// $ pulumi import civo:index/firewall:Firewall www b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
// ```
type Firewall struct {
	pulumi.CustomResourceState

	// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you
	// set to false you need to define at least one ingress or egress rule
	CreateDefaultRules pulumi.BoolPtrOutput `pulumi:"createDefaultRules"`
	// The egress rules, this is a list of rules that will be applied to the firewall
	EgressRules FirewallEgressRuleArrayOutput `pulumi:"egressRules"`
	// The ingress rules, this is a list of rules that will be applied to the firewall
	IngressRules FirewallIngressRuleArrayOutput `pulumi:"ingressRules"`
	// The firewall name
	Name pulumi.StringOutput `pulumi:"name"`
	// The firewall network, if is not defined we use the default network
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The firewall region, if is not defined we use the global defined in the provider
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOption) (*Firewall, error) {
	if args == nil {
		args = &FirewallArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Firewall
	err := ctx.RegisterResource("civo:index/firewall:Firewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallState, opts ...pulumi.ResourceOption) (*Firewall, error) {
	var resource Firewall
	err := ctx.ReadResource("civo:index/firewall:Firewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firewall resources.
type firewallState struct {
	// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you
	// set to false you need to define at least one ingress or egress rule
	CreateDefaultRules *bool `pulumi:"createDefaultRules"`
	// The egress rules, this is a list of rules that will be applied to the firewall
	EgressRules []FirewallEgressRule `pulumi:"egressRules"`
	// The ingress rules, this is a list of rules that will be applied to the firewall
	IngressRules []FirewallIngressRule `pulumi:"ingressRules"`
	// The firewall name
	Name *string `pulumi:"name"`
	// The firewall network, if is not defined we use the default network
	NetworkId *string `pulumi:"networkId"`
	// The firewall region, if is not defined we use the global defined in the provider
	Region *string `pulumi:"region"`
}

type FirewallState struct {
	// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you
	// set to false you need to define at least one ingress or egress rule
	CreateDefaultRules pulumi.BoolPtrInput
	// The egress rules, this is a list of rules that will be applied to the firewall
	EgressRules FirewallEgressRuleArrayInput
	// The ingress rules, this is a list of rules that will be applied to the firewall
	IngressRules FirewallIngressRuleArrayInput
	// The firewall name
	Name pulumi.StringPtrInput
	// The firewall network, if is not defined we use the default network
	NetworkId pulumi.StringPtrInput
	// The firewall region, if is not defined we use the global defined in the provider
	Region pulumi.StringPtrInput
}

func (FirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallState)(nil)).Elem()
}

type firewallArgs struct {
	// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you
	// set to false you need to define at least one ingress or egress rule
	CreateDefaultRules *bool `pulumi:"createDefaultRules"`
	// The egress rules, this is a list of rules that will be applied to the firewall
	EgressRules []FirewallEgressRule `pulumi:"egressRules"`
	// The ingress rules, this is a list of rules that will be applied to the firewall
	IngressRules []FirewallIngressRule `pulumi:"ingressRules"`
	// The firewall name
	Name *string `pulumi:"name"`
	// The firewall network, if is not defined we use the default network
	NetworkId *string `pulumi:"networkId"`
	// The firewall region, if is not defined we use the global defined in the provider
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you
	// set to false you need to define at least one ingress or egress rule
	CreateDefaultRules pulumi.BoolPtrInput
	// The egress rules, this is a list of rules that will be applied to the firewall
	EgressRules FirewallEgressRuleArrayInput
	// The ingress rules, this is a list of rules that will be applied to the firewall
	IngressRules FirewallIngressRuleArrayInput
	// The firewall name
	Name pulumi.StringPtrInput
	// The firewall network, if is not defined we use the default network
	NetworkId pulumi.StringPtrInput
	// The firewall region, if is not defined we use the global defined in the provider
	Region pulumi.StringPtrInput
}

func (FirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallArgs)(nil)).Elem()
}

type FirewallInput interface {
	pulumi.Input

	ToFirewallOutput() FirewallOutput
	ToFirewallOutputWithContext(ctx context.Context) FirewallOutput
}

func (*Firewall) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (i *Firewall) ToFirewallOutput() FirewallOutput {
	return i.ToFirewallOutputWithContext(context.Background())
}

func (i *Firewall) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutput)
}

// FirewallArrayInput is an input type that accepts FirewallArray and FirewallArrayOutput values.
// You can construct a concrete instance of `FirewallArrayInput` via:
//
//	FirewallArray{ FirewallArgs{...} }
type FirewallArrayInput interface {
	pulumi.Input

	ToFirewallArrayOutput() FirewallArrayOutput
	ToFirewallArrayOutputWithContext(context.Context) FirewallArrayOutput
}

type FirewallArray []FirewallInput

func (FirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (i FirewallArray) ToFirewallArrayOutput() FirewallArrayOutput {
	return i.ToFirewallArrayOutputWithContext(context.Background())
}

func (i FirewallArray) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallArrayOutput)
}

// FirewallMapInput is an input type that accepts FirewallMap and FirewallMapOutput values.
// You can construct a concrete instance of `FirewallMapInput` via:
//
//	FirewallMap{ "key": FirewallArgs{...} }
type FirewallMapInput interface {
	pulumi.Input

	ToFirewallMapOutput() FirewallMapOutput
	ToFirewallMapOutputWithContext(context.Context) FirewallMapOutput
}

type FirewallMap map[string]FirewallInput

func (FirewallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (i FirewallMap) ToFirewallMapOutput() FirewallMapOutput {
	return i.ToFirewallMapOutputWithContext(context.Background())
}

func (i FirewallMap) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMapOutput)
}

type FirewallOutput struct{ *pulumi.OutputState }

func (FirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (o FirewallOutput) ToFirewallOutput() FirewallOutput {
	return o
}

func (o FirewallOutput) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return o
}

// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you
// set to false you need to define at least one ingress or egress rule
func (o FirewallOutput) CreateDefaultRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.BoolPtrOutput { return v.CreateDefaultRules }).(pulumi.BoolPtrOutput)
}

// The egress rules, this is a list of rules that will be applied to the firewall
func (o FirewallOutput) EgressRules() FirewallEgressRuleArrayOutput {
	return o.ApplyT(func(v *Firewall) FirewallEgressRuleArrayOutput { return v.EgressRules }).(FirewallEgressRuleArrayOutput)
}

// The ingress rules, this is a list of rules that will be applied to the firewall
func (o FirewallOutput) IngressRules() FirewallIngressRuleArrayOutput {
	return o.ApplyT(func(v *Firewall) FirewallIngressRuleArrayOutput { return v.IngressRules }).(FirewallIngressRuleArrayOutput)
}

// The firewall name
func (o FirewallOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The firewall network, if is not defined we use the default network
func (o FirewallOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The firewall region, if is not defined we use the global defined in the provider
func (o FirewallOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type FirewallArrayOutput struct{ *pulumi.OutputState }

func (FirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (o FirewallArrayOutput) ToFirewallArrayOutput() FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) Index(i pulumi.IntInput) FirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].([]*Firewall)[vs[1].(int)]
	}).(FirewallOutput)
}

type FirewallMapOutput struct{ *pulumi.OutputState }

func (FirewallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (o FirewallMapOutput) ToFirewallMapOutput() FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) MapIndex(k pulumi.StringInput) FirewallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].(map[string]*Firewall)[vs[1].(string)]
	}).(FirewallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInput)(nil)).Elem(), &Firewall{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallArrayInput)(nil)).Elem(), FirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMapInput)(nil)).Elem(), FirewallMap{})
	pulumi.RegisterOutputType(FirewallOutput{})
	pulumi.RegisterOutputType(FirewallArrayOutput{})
	pulumi.RegisterOutputType(FirewallMapOutput{})
}
