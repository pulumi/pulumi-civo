// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Civo Instance resource. This can be used to create,
// modify, and delete Instances.
//
// ## Import
//
// Instances can be imported using the instance `id`, e.g.
//
// ```sh
//  $ pulumi import civo:index/instance:Instance myintance 18bd98ad-1b6e-4f87-b48f-e690b4fd7413
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Total cpu of the inatance.
	CpuCores pulumi.IntOutput `pulumi:"cpuCores"`
	// The date of creation of the instance
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The size of the disk.
	DiskGb pulumi.IntOutput `pulumi:"diskGb"`
	// The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all).
	FirewallId pulumi.StringPtrOutput `pulumi:"firewallId"`
	// The Instance hostname.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Instance initial password
	InitialPassword pulumi.StringOutput `pulumi:"initialPassword"`
	// The name of the initial user created on the server (optional; this will default to the template's defaultUsername and fallback to civo).
	InitialUser pulumi.StringPtrOutput `pulumi:"initialUser"`
	// This must be the ID of the network from the network listing (optional; default network used when not specified).
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Add some notes to the instance.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The private ip.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Is the ip that is used to route the public ip from the internet to the instance using NAT
	PseudoIp pulumi.StringOutput `pulumi:"pseudoIp"`
	// The public ip.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// This should be either false, true or `move_ip_from:intances_id`.
	PublicIpRequired pulumi.StringPtrOutput `pulumi:"publicIpRequired"`
	// Total ram of the instance.
	RamMb pulumi.IntOutput `pulumi:"ramMb"`
	// The region for the instance, if not declare we use the region in declared in the provider.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified).
	ReverseDns pulumi.StringPtrOutput `pulumi:"reverseDns"`
	// the contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization
	Script pulumi.StringPtrOutput `pulumi:"script"`
	// The name of the size, from the current list, e.g. g2.small (required).
	Size       pulumi.StringPtrOutput `pulumi:"size"`
	SourceId   pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType pulumi.StringOutput    `pulumi:"sourceType"`
	// The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initialPassword field).
	SshkeyId pulumi.StringPtrOutput `pulumi:"sshkeyId"`
	// The status of the instance
	Status pulumi.StringOutput `pulumi:"status"`
	// An optional list of tags, represented as a key, value pair.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The ID for the template to use to build the instance.
	Template pulumi.StringPtrOutput `pulumi:"template"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	var resource Instance
	err := ctx.RegisterResource("civo:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("civo:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Total cpu of the inatance.
	CpuCores *int `pulumi:"cpuCores"`
	// The date of creation of the instance
	CreatedAt *string `pulumi:"createdAt"`
	// The size of the disk.
	DiskGb *int `pulumi:"diskGb"`
	// The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all).
	FirewallId *string `pulumi:"firewallId"`
	// The Instance hostname.
	Hostname *string `pulumi:"hostname"`
	// Instance initial password
	InitialPassword *string `pulumi:"initialPassword"`
	// The name of the initial user created on the server (optional; this will default to the template's defaultUsername and fallback to civo).
	InitialUser *string `pulumi:"initialUser"`
	// This must be the ID of the network from the network listing (optional; default network used when not specified).
	NetworkId *string `pulumi:"networkId"`
	// Add some notes to the instance.
	Notes *string `pulumi:"notes"`
	// The private ip.
	PrivateIp *string `pulumi:"privateIp"`
	// Is the ip that is used to route the public ip from the internet to the instance using NAT
	PseudoIp *string `pulumi:"pseudoIp"`
	// The public ip.
	PublicIp *string `pulumi:"publicIp"`
	// This should be either false, true or `move_ip_from:intances_id`.
	PublicIpRequired *string `pulumi:"publicIpRequired"`
	// Total ram of the instance.
	RamMb *int `pulumi:"ramMb"`
	// The region for the instance, if not declare we use the region in declared in the provider.
	Region *string `pulumi:"region"`
	// A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified).
	ReverseDns *string `pulumi:"reverseDns"`
	// the contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization
	Script *string `pulumi:"script"`
	// The name of the size, from the current list, e.g. g2.small (required).
	Size       *string `pulumi:"size"`
	SourceId   *string `pulumi:"sourceId"`
	SourceType *string `pulumi:"sourceType"`
	// The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initialPassword field).
	SshkeyId *string `pulumi:"sshkeyId"`
	// The status of the instance
	Status *string `pulumi:"status"`
	// An optional list of tags, represented as a key, value pair.
	Tags []string `pulumi:"tags"`
	// The ID for the template to use to build the instance.
	Template *string `pulumi:"template"`
}

type InstanceState struct {
	// Total cpu of the inatance.
	CpuCores pulumi.IntPtrInput
	// The date of creation of the instance
	CreatedAt pulumi.StringPtrInput
	// The size of the disk.
	DiskGb pulumi.IntPtrInput
	// The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all).
	FirewallId pulumi.StringPtrInput
	// The Instance hostname.
	Hostname pulumi.StringPtrInput
	// Instance initial password
	InitialPassword pulumi.StringPtrInput
	// The name of the initial user created on the server (optional; this will default to the template's defaultUsername and fallback to civo).
	InitialUser pulumi.StringPtrInput
	// This must be the ID of the network from the network listing (optional; default network used when not specified).
	NetworkId pulumi.StringPtrInput
	// Add some notes to the instance.
	Notes pulumi.StringPtrInput
	// The private ip.
	PrivateIp pulumi.StringPtrInput
	// Is the ip that is used to route the public ip from the internet to the instance using NAT
	PseudoIp pulumi.StringPtrInput
	// The public ip.
	PublicIp pulumi.StringPtrInput
	// This should be either false, true or `move_ip_from:intances_id`.
	PublicIpRequired pulumi.StringPtrInput
	// Total ram of the instance.
	RamMb pulumi.IntPtrInput
	// The region for the instance, if not declare we use the region in declared in the provider.
	Region pulumi.StringPtrInput
	// A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified).
	ReverseDns pulumi.StringPtrInput
	// the contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization
	Script pulumi.StringPtrInput
	// The name of the size, from the current list, e.g. g2.small (required).
	Size       pulumi.StringPtrInput
	SourceId   pulumi.StringPtrInput
	SourceType pulumi.StringPtrInput
	// The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initialPassword field).
	SshkeyId pulumi.StringPtrInput
	// The status of the instance
	Status pulumi.StringPtrInput
	// An optional list of tags, represented as a key, value pair.
	Tags pulumi.StringArrayInput
	// The ID for the template to use to build the instance.
	Template pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all).
	FirewallId *string `pulumi:"firewallId"`
	// The Instance hostname.
	Hostname string `pulumi:"hostname"`
	// The name of the initial user created on the server (optional; this will default to the template's defaultUsername and fallback to civo).
	InitialUser *string `pulumi:"initialUser"`
	// This must be the ID of the network from the network listing (optional; default network used when not specified).
	NetworkId *string `pulumi:"networkId"`
	// Add some notes to the instance.
	Notes *string `pulumi:"notes"`
	// This should be either false, true or `move_ip_from:intances_id`.
	PublicIpRequired *string `pulumi:"publicIpRequired"`
	// The region for the instance, if not declare we use the region in declared in the provider.
	Region *string `pulumi:"region"`
	// A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified).
	ReverseDns *string `pulumi:"reverseDns"`
	// the contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization
	Script *string `pulumi:"script"`
	// The name of the size, from the current list, e.g. g2.small (required).
	Size *string `pulumi:"size"`
	// The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initialPassword field).
	SshkeyId *string `pulumi:"sshkeyId"`
	// An optional list of tags, represented as a key, value pair.
	Tags []string `pulumi:"tags"`
	// The ID for the template to use to build the instance.
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all).
	FirewallId pulumi.StringPtrInput
	// The Instance hostname.
	Hostname pulumi.StringInput
	// The name of the initial user created on the server (optional; this will default to the template's defaultUsername and fallback to civo).
	InitialUser pulumi.StringPtrInput
	// This must be the ID of the network from the network listing (optional; default network used when not specified).
	NetworkId pulumi.StringPtrInput
	// Add some notes to the instance.
	Notes pulumi.StringPtrInput
	// This should be either false, true or `move_ip_from:intances_id`.
	PublicIpRequired pulumi.StringPtrInput
	// The region for the instance, if not declare we use the region in declared in the provider.
	Region pulumi.StringPtrInput
	// A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified).
	ReverseDns pulumi.StringPtrInput
	// the contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization
	Script pulumi.StringPtrInput
	// The name of the size, from the current list, e.g. g2.small (required).
	Size pulumi.StringPtrInput
	// The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initialPassword field).
	SshkeyId pulumi.StringPtrInput
	// An optional list of tags, represented as a key, value pair.
	Tags pulumi.StringArrayInput
	// The ID for the template to use to build the instance.
	Template pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((*Instance)(nil))
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

func (i *Instance) ToInstancePtrOutput() InstancePtrOutput {
	return i.ToInstancePtrOutputWithContext(context.Background())
}

func (i *Instance) ToInstancePtrOutputWithContext(ctx context.Context) InstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePtrOutput)
}

type InstancePtrInput interface {
	pulumi.Input

	ToInstancePtrOutput() InstancePtrOutput
	ToInstancePtrOutputWithContext(ctx context.Context) InstancePtrOutput
}

type instancePtrType InstanceArgs

func (*instancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil))
}

func (i *instancePtrType) ToInstancePtrOutput() InstancePtrOutput {
	return i.ToInstancePtrOutputWithContext(context.Background())
}

func (i *instancePtrType) ToInstancePtrOutputWithContext(ctx context.Context) InstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePtrOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//          InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Instance)(nil))
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//          InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Instance)(nil))
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct {
	*pulumi.OutputState
}

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Instance)(nil))
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstancePtrOutput() InstancePtrOutput {
	return o.ToInstancePtrOutputWithContext(context.Background())
}

func (o InstanceOutput) ToInstancePtrOutputWithContext(ctx context.Context) InstancePtrOutput {
	return o.ApplyT(func(v Instance) *Instance {
		return &v
	}).(InstancePtrOutput)
}

type InstancePtrOutput struct {
	*pulumi.OutputState
}

func (InstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil))
}

func (o InstancePtrOutput) ToInstancePtrOutput() InstancePtrOutput {
	return o
}

func (o InstancePtrOutput) ToInstancePtrOutputWithContext(ctx context.Context) InstancePtrOutput {
	return o
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Instance)(nil))
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Instance {
		return vs[0].([]Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Instance)(nil))
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Instance {
		return vs[0].(map[string]Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstancePtrOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
