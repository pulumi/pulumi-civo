// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information on a volume for use in other resources. This data source provides all of the volumes properties as configured on your Civo account.
//
// An error will be raised if the provided volume name does not exist in your Civo account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myvolume, err := civo.LookupVolume(ctx, &civo.LookupVolumeArgs{
//				Name: pulumi.StringRef("test-volume-name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("volumeOutput", myvolume)
//			return nil
//		})
//	}
//
// ```
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("civo:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// The name of the volume
	Name *string `pulumi:"name"`
	// The region where volume is running
	Region *string `pulumi:"region"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// The date of the creation of the volume
	CreatedAt string `pulumi:"createdAt"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// The mount point of the volume
	MountPoint string `pulumi:"mountPoint"`
	// The name of the volume
	Name *string `pulumi:"name"`
	// The region where volume is running
	Region *string `pulumi:"region"`
	// The size of the volume (in GB)
	SizeGb int `pulumi:"sizeGb"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeResultOutput, error) {
			args := v.(LookupVolumeArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupVolumeResult
			secret, err := ctx.InvokePackageRaw("civo:index/getVolume:getVolume", args, &rv, "", opts...)
			if err != nil {
				return LookupVolumeResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupVolumeResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupVolumeResultOutput), nil
			}
			return output, nil
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// The ID of this resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the volume
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region where volume is running
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// The date of the creation of the volume
func (o LookupVolumeResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupVolumeResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The mount point of the volume
func (o LookupVolumeResultOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The name of the volume
func (o LookupVolumeResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The region where volume is running
func (o LookupVolumeResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The size of the volume (in GB)
func (o LookupVolumeResultOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.SizeGb }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
