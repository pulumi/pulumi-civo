// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SshKey struct {
	pulumi.CustomResourceState

	// a string containing the SSH finger print.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// a string that will be the reference for the SSH key.
	Name pulumi.StringOutput `pulumi:"name"`
	// a string containing the SSH public key.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
}

// NewSshKey registers a new resource with the given unique name, arguments, and options.
func NewSshKey(ctx *pulumi.Context,
	name string, args *SshKeyArgs, opts ...pulumi.ResourceOption) (*SshKey, error) {
	if args == nil || args.PublicKey == nil {
		return nil, errors.New("missing required argument 'PublicKey'")
	}
	if args == nil {
		args = &SshKeyArgs{}
	}
	var resource SshKey
	err := ctx.RegisterResource("civo:index/sshKey:SshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshKey gets an existing SshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshKeyState, opts ...pulumi.ResourceOption) (*SshKey, error) {
	var resource SshKey
	err := ctx.ReadResource("civo:index/sshKey:SshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshKey resources.
type sshKeyState struct {
	// a string containing the SSH finger print.
	Fingerprint *string `pulumi:"fingerprint"`
	// a string that will be the reference for the SSH key.
	Name *string `pulumi:"name"`
	// a string containing the SSH public key.
	PublicKey *string `pulumi:"publicKey"`
}

type SshKeyState struct {
	// a string containing the SSH finger print.
	Fingerprint pulumi.StringPtrInput
	// a string that will be the reference for the SSH key.
	Name pulumi.StringPtrInput
	// a string containing the SSH public key.
	PublicKey pulumi.StringPtrInput
}

func (SshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyState)(nil)).Elem()
}

type sshKeyArgs struct {
	// a string that will be the reference for the SSH key.
	Name *string `pulumi:"name"`
	// a string containing the SSH public key.
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a SshKey resource.
type SshKeyArgs struct {
	// a string that will be the reference for the SSH key.
	Name pulumi.StringPtrInput
	// a string containing the SSH public key.
	PublicKey pulumi.StringInput
}

func (SshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyArgs)(nil)).Elem()
}
