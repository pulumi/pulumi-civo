// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import civo:index/kubernetesNodePool:KubernetesNodePool my-pool 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af:502c1130-cb9b-4a88-b6d2-307bd96d946a
// ```
type KubernetesNodePool struct {
	pulumi.CustomResourceState

	// The ID of your cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Instance names in the nodepool
	InstanceNames pulumi.StringArrayOutput `pulumi:"instanceNames"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  pulumi.StringOutput    `pulumi:"label"`
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// the number of instances to create (optional, the default at the time of writing is 3)
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool pulumi.BoolOutput `pulumi:"publicIpNodePool"`
	// The region of the node pool, has to match that of the cluster
	Region pulumi.StringOutput `pulumi:"region"`
	// the size of each node (optional, the default is currently g4s.kube.medium)
	Size   pulumi.StringOutput                `pulumi:"size"`
	Taints KubernetesNodePoolTaintArrayOutput `pulumi:"taints"`
}

// NewKubernetesNodePool registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodePool(ctx *pulumi.Context,
	name string, args *KubernetesNodePoolArgs, opts ...pulumi.ResourceOption) (*KubernetesNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesNodePool
	err := ctx.RegisterResource("civo:index/kubernetesNodePool:KubernetesNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesNodePool gets an existing KubernetesNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesNodePoolState, opts ...pulumi.ResourceOption) (*KubernetesNodePool, error) {
	var resource KubernetesNodePool
	err := ctx.ReadResource("civo:index/kubernetesNodePool:KubernetesNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesNodePool resources.
type kubernetesNodePoolState struct {
	// The ID of your cluster
	ClusterId *string `pulumi:"clusterId"`
	// Instance names in the nodepool
	InstanceNames []string `pulumi:"instanceNames"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  *string           `pulumi:"label"`
	Labels map[string]string `pulumi:"labels"`
	// the number of instances to create (optional, the default at the time of writing is 3)
	NodeCount *int `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool *bool `pulumi:"publicIpNodePool"`
	// The region of the node pool, has to match that of the cluster
	Region *string `pulumi:"region"`
	// the size of each node (optional, the default is currently g4s.kube.medium)
	Size   *string                   `pulumi:"size"`
	Taints []KubernetesNodePoolTaint `pulumi:"taints"`
}

type KubernetesNodePoolState struct {
	// The ID of your cluster
	ClusterId pulumi.StringPtrInput
	// Instance names in the nodepool
	InstanceNames pulumi.StringArrayInput
	// Node pool label, if you don't provide one, we will generate one for you
	Label  pulumi.StringPtrInput
	Labels pulumi.StringMapInput
	// the number of instances to create (optional, the default at the time of writing is 3)
	NodeCount pulumi.IntPtrInput
	// Node pool belongs to the public ip node pool
	PublicIpNodePool pulumi.BoolPtrInput
	// The region of the node pool, has to match that of the cluster
	Region pulumi.StringPtrInput
	// the size of each node (optional, the default is currently g4s.kube.medium)
	Size   pulumi.StringPtrInput
	Taints KubernetesNodePoolTaintArrayInput
}

func (KubernetesNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolState)(nil)).Elem()
}

type kubernetesNodePoolArgs struct {
	// The ID of your cluster
	ClusterId string `pulumi:"clusterId"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  *string           `pulumi:"label"`
	Labels map[string]string `pulumi:"labels"`
	// the number of instances to create (optional, the default at the time of writing is 3)
	NodeCount *int `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool *bool `pulumi:"publicIpNodePool"`
	// The region of the node pool, has to match that of the cluster
	Region string `pulumi:"region"`
	// the size of each node (optional, the default is currently g4s.kube.medium)
	Size   *string                   `pulumi:"size"`
	Taints []KubernetesNodePoolTaint `pulumi:"taints"`
}

// The set of arguments for constructing a KubernetesNodePool resource.
type KubernetesNodePoolArgs struct {
	// The ID of your cluster
	ClusterId pulumi.StringInput
	// Node pool label, if you don't provide one, we will generate one for you
	Label  pulumi.StringPtrInput
	Labels pulumi.StringMapInput
	// the number of instances to create (optional, the default at the time of writing is 3)
	NodeCount pulumi.IntPtrInput
	// Node pool belongs to the public ip node pool
	PublicIpNodePool pulumi.BoolPtrInput
	// The region of the node pool, has to match that of the cluster
	Region pulumi.StringInput
	// the size of each node (optional, the default is currently g4s.kube.medium)
	Size   pulumi.StringPtrInput
	Taints KubernetesNodePoolTaintArrayInput
}

func (KubernetesNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolArgs)(nil)).Elem()
}

type KubernetesNodePoolInput interface {
	pulumi.Input

	ToKubernetesNodePoolOutput() KubernetesNodePoolOutput
	ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput
}

func (*KubernetesNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePool)(nil)).Elem()
}

func (i *KubernetesNodePool) ToKubernetesNodePoolOutput() KubernetesNodePoolOutput {
	return i.ToKubernetesNodePoolOutputWithContext(context.Background())
}

func (i *KubernetesNodePool) ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolOutput)
}

// KubernetesNodePoolArrayInput is an input type that accepts KubernetesNodePoolArray and KubernetesNodePoolArrayOutput values.
// You can construct a concrete instance of `KubernetesNodePoolArrayInput` via:
//
//	KubernetesNodePoolArray{ KubernetesNodePoolArgs{...} }
type KubernetesNodePoolArrayInput interface {
	pulumi.Input

	ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput
	ToKubernetesNodePoolArrayOutputWithContext(context.Context) KubernetesNodePoolArrayOutput
}

type KubernetesNodePoolArray []KubernetesNodePoolInput

func (KubernetesNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodePool)(nil)).Elem()
}

func (i KubernetesNodePoolArray) ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput {
	return i.ToKubernetesNodePoolArrayOutputWithContext(context.Background())
}

func (i KubernetesNodePoolArray) ToKubernetesNodePoolArrayOutputWithContext(ctx context.Context) KubernetesNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolArrayOutput)
}

// KubernetesNodePoolMapInput is an input type that accepts KubernetesNodePoolMap and KubernetesNodePoolMapOutput values.
// You can construct a concrete instance of `KubernetesNodePoolMapInput` via:
//
//	KubernetesNodePoolMap{ "key": KubernetesNodePoolArgs{...} }
type KubernetesNodePoolMapInput interface {
	pulumi.Input

	ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput
	ToKubernetesNodePoolMapOutputWithContext(context.Context) KubernetesNodePoolMapOutput
}

type KubernetesNodePoolMap map[string]KubernetesNodePoolInput

func (KubernetesNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodePool)(nil)).Elem()
}

func (i KubernetesNodePoolMap) ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput {
	return i.ToKubernetesNodePoolMapOutputWithContext(context.Background())
}

func (i KubernetesNodePoolMap) ToKubernetesNodePoolMapOutputWithContext(ctx context.Context) KubernetesNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolMapOutput)
}

type KubernetesNodePoolOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolOutput) ToKubernetesNodePoolOutput() KubernetesNodePoolOutput {
	return o
}

func (o KubernetesNodePoolOutput) ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput {
	return o
}

// The ID of your cluster
func (o KubernetesNodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Instance names in the nodepool
func (o KubernetesNodePoolOutput) InstanceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringArrayOutput { return v.InstanceNames }).(pulumi.StringArrayOutput)
}

// Node pool label, if you don't provide one, we will generate one for you
func (o KubernetesNodePoolOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

func (o KubernetesNodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// the number of instances to create (optional, the default at the time of writing is 3)
func (o KubernetesNodePoolOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// Node pool belongs to the public ip node pool
func (o KubernetesNodePoolOutput) PublicIpNodePool() pulumi.BoolOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolOutput { return v.PublicIpNodePool }).(pulumi.BoolOutput)
}

// The region of the node pool, has to match that of the cluster
func (o KubernetesNodePoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// the size of each node (optional, the default is currently g4s.kube.medium)
func (o KubernetesNodePoolOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

func (o KubernetesNodePoolOutput) Taints() KubernetesNodePoolTaintArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePool) KubernetesNodePoolTaintArrayOutput { return v.Taints }).(KubernetesNodePoolTaintArrayOutput)
}

type KubernetesNodePoolArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolArrayOutput) ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput {
	return o
}

func (o KubernetesNodePoolArrayOutput) ToKubernetesNodePoolArrayOutputWithContext(ctx context.Context) KubernetesNodePoolArrayOutput {
	return o
}

func (o KubernetesNodePoolArrayOutput) Index(i pulumi.IntInput) KubernetesNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesNodePool {
		return vs[0].([]*KubernetesNodePool)[vs[1].(int)]
	}).(KubernetesNodePoolOutput)
}

type KubernetesNodePoolMapOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolMapOutput) ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput {
	return o
}

func (o KubernetesNodePoolMapOutput) ToKubernetesNodePoolMapOutputWithContext(ctx context.Context) KubernetesNodePoolMapOutput {
	return o
}

func (o KubernetesNodePoolMapOutput) MapIndex(k pulumi.StringInput) KubernetesNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesNodePool {
		return vs[0].(map[string]*KubernetesNodePool)[vs[1].(string)]
	}).(KubernetesNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolInput)(nil)).Elem(), &KubernetesNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolArrayInput)(nil)).Elem(), KubernetesNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolMapInput)(nil)).Elem(), KubernetesNodePoolMap{})
	pulumi.RegisterOutputType(KubernetesNodePoolOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolArrayOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolMapOutput{})
}
