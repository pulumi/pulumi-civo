// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information on a domain. This data source provides the name and the id.
//
// An error will be raised if the provided domain name is not in your Civo account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			domain, err := civo.LookupDnsDomainName(ctx, &civo.LookupDnsDomainNameArgs{
//				Name: pulumi.StringRef("domain.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("domainOutput", domain.Name)
//			ctx.Export("domainIdOutput", domain.Id)
//			return nil
//		})
//	}
//
// ```
func LookupDnsDomainName(ctx *pulumi.Context, args *LookupDnsDomainNameArgs, opts ...pulumi.InvokeOption) (*LookupDnsDomainNameResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsDomainNameResult
	err := ctx.Invoke("civo:index/getDnsDomainName:getDnsDomainName", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsDomainName.
type LookupDnsDomainNameArgs struct {
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// The name of the domain
	Name *string `pulumi:"name"`
}

// A collection of values returned by getDnsDomainName.
type LookupDnsDomainNameResult struct {
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// The name of the domain
	Name *string `pulumi:"name"`
}

func LookupDnsDomainNameOutput(ctx *pulumi.Context, args LookupDnsDomainNameOutputArgs, opts ...pulumi.InvokeOption) LookupDnsDomainNameResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsDomainNameResultOutput, error) {
			args := v.(LookupDnsDomainNameArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDnsDomainNameResult
			secret, err := ctx.InvokePackageRaw("civo:index/getDnsDomainName:getDnsDomainName", args, &rv, "", opts...)
			if err != nil {
				return LookupDnsDomainNameResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDnsDomainNameResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDnsDomainNameResultOutput), nil
			}
			return output, nil
		}).(LookupDnsDomainNameResultOutput)
}

// A collection of arguments for invoking getDnsDomainName.
type LookupDnsDomainNameOutputArgs struct {
	// The ID of this resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the domain
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupDnsDomainNameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsDomainNameArgs)(nil)).Elem()
}

// A collection of values returned by getDnsDomainName.
type LookupDnsDomainNameResultOutput struct{ *pulumi.OutputState }

func (LookupDnsDomainNameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsDomainNameResult)(nil)).Elem()
}

func (o LookupDnsDomainNameResultOutput) ToLookupDnsDomainNameResultOutput() LookupDnsDomainNameResultOutput {
	return o
}

func (o LookupDnsDomainNameResultOutput) ToLookupDnsDomainNameResultOutputWithContext(ctx context.Context) LookupDnsDomainNameResultOutput {
	return o
}

// The ID of this resource.
func (o LookupDnsDomainNameResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsDomainNameResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the domain
func (o LookupDnsDomainNameResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsDomainNameResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsDomainNameResultOutput{})
}
