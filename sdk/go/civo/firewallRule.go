// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type FirewallRule struct {
	pulumi.CustomResourceState

	// The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
	// applied, i.e. 0.0.0.0/0)
	Cidrs pulumi.StringArrayOutput `pulumi:"cidrs"`
	// Will this rule affect ingress traffic
	Direction pulumi.StringOutput `pulumi:"direction"`
	// The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
	EndPort    pulumi.StringOutput `pulumi:"endPort"`
	FirewallId pulumi.StringOutput `pulumi:"firewallId"`
	// A string that will be the displayed name/reference for this rule (optional)
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The start of the port range to configure for this rule (or the single port if required)
	StartPort pulumi.StringOutput `pulumi:"startPort"`
}

// NewFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewFirewallRule(ctx *pulumi.Context,
	name string, args *FirewallRuleArgs, opts ...pulumi.ResourceOption) (*FirewallRule, error) {
	if args == nil || args.Cidrs == nil {
		return nil, errors.New("missing required argument 'Cidrs'")
	}
	if args == nil || args.Direction == nil {
		return nil, errors.New("missing required argument 'Direction'")
	}
	if args == nil || args.EndPort == nil {
		return nil, errors.New("missing required argument 'EndPort'")
	}
	if args == nil || args.FirewallId == nil {
		return nil, errors.New("missing required argument 'FirewallId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.StartPort == nil {
		return nil, errors.New("missing required argument 'StartPort'")
	}
	if args == nil {
		args = &FirewallRuleArgs{}
	}
	var resource FirewallRule
	err := ctx.RegisterResource("civo:index/firewallRule:FirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallRule gets an existing FirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallRuleState, opts ...pulumi.ResourceOption) (*FirewallRule, error) {
	var resource FirewallRule
	err := ctx.ReadResource("civo:index/firewallRule:FirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallRule resources.
type firewallRuleState struct {
	// The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
	// applied, i.e. 0.0.0.0/0)
	Cidrs []string `pulumi:"cidrs"`
	// Will this rule affect ingress traffic
	Direction *string `pulumi:"direction"`
	// The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
	EndPort    *string `pulumi:"endPort"`
	FirewallId *string `pulumi:"firewallId"`
	// A string that will be the displayed name/reference for this rule (optional)
	Label *string `pulumi:"label"`
	// The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
	Protocol *string `pulumi:"protocol"`
	// The start of the port range to configure for this rule (or the single port if required)
	StartPort *string `pulumi:"startPort"`
}

type FirewallRuleState struct {
	// The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
	// applied, i.e. 0.0.0.0/0)
	Cidrs pulumi.StringArrayInput
	// Will this rule affect ingress traffic
	Direction pulumi.StringPtrInput
	// The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
	EndPort    pulumi.StringPtrInput
	FirewallId pulumi.StringPtrInput
	// A string that will be the displayed name/reference for this rule (optional)
	Label pulumi.StringPtrInput
	// The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
	Protocol pulumi.StringPtrInput
	// The start of the port range to configure for this rule (or the single port if required)
	StartPort pulumi.StringPtrInput
}

func (FirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRuleState)(nil)).Elem()
}

type firewallRuleArgs struct {
	// The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
	// applied, i.e. 0.0.0.0/0)
	Cidrs []string `pulumi:"cidrs"`
	// Will this rule affect ingress traffic
	Direction string `pulumi:"direction"`
	// The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
	EndPort    string `pulumi:"endPort"`
	FirewallId string `pulumi:"firewallId"`
	// A string that will be the displayed name/reference for this rule (optional)
	Label *string `pulumi:"label"`
	// The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
	Protocol string `pulumi:"protocol"`
	// The start of the port range to configure for this rule (or the single port if required)
	StartPort string `pulumi:"startPort"`
}

// The set of arguments for constructing a FirewallRule resource.
type FirewallRuleArgs struct {
	// The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally
	// applied, i.e. 0.0.0.0/0)
	Cidrs pulumi.StringArrayInput
	// Will this rule affect ingress traffic
	Direction pulumi.StringInput
	// The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
	EndPort    pulumi.StringInput
	FirewallId pulumi.StringInput
	// A string that will be the displayed name/reference for this rule (optional)
	Label pulumi.StringPtrInput
	// The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
	Protocol pulumi.StringInput
	// The start of the port range to configure for this rule (or the single port if required)
	StartPort pulumi.StringInput
}

func (FirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRuleArgs)(nil)).Elem()
}
