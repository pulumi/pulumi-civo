// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Civo dns domain name resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-civo/sdk/go/civo"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := civo.NewDnsDomainName(ctx, "main", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Domains can be imported using the `domain name`, e.g.
//
// ```sh
//  $ pulumi import civo:index/dnsDomainName:DnsDomainName main mydomain.com
// ```
type DnsDomainName struct {
	pulumi.CustomResourceState

	// The id account of the domain
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The name of the domain
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDnsDomainName registers a new resource with the given unique name, arguments, and options.
func NewDnsDomainName(ctx *pulumi.Context,
	name string, args *DnsDomainNameArgs, opts ...pulumi.ResourceOption) (*DnsDomainName, error) {
	if args == nil {
		args = &DnsDomainNameArgs{}
	}

	var resource DnsDomainName
	err := ctx.RegisterResource("civo:index/dnsDomainName:DnsDomainName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsDomainName gets an existing DnsDomainName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsDomainName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsDomainNameState, opts ...pulumi.ResourceOption) (*DnsDomainName, error) {
	var resource DnsDomainName
	err := ctx.ReadResource("civo:index/dnsDomainName:DnsDomainName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsDomainName resources.
type dnsDomainNameState struct {
	// The id account of the domain
	AccountId *string `pulumi:"accountId"`
	// The name of the domain
	Name *string `pulumi:"name"`
}

type DnsDomainNameState struct {
	// The id account of the domain
	AccountId pulumi.StringPtrInput
	// The name of the domain
	Name pulumi.StringPtrInput
}

func (DnsDomainNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsDomainNameState)(nil)).Elem()
}

type dnsDomainNameArgs struct {
	// The name of the domain
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DnsDomainName resource.
type DnsDomainNameArgs struct {
	// The name of the domain
	Name pulumi.StringPtrInput
}

func (DnsDomainNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsDomainNameArgs)(nil)).Elem()
}

type DnsDomainNameInput interface {
	pulumi.Input

	ToDnsDomainNameOutput() DnsDomainNameOutput
	ToDnsDomainNameOutputWithContext(ctx context.Context) DnsDomainNameOutput
}

func (*DnsDomainName) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsDomainName)(nil))
}

func (i *DnsDomainName) ToDnsDomainNameOutput() DnsDomainNameOutput {
	return i.ToDnsDomainNameOutputWithContext(context.Background())
}

func (i *DnsDomainName) ToDnsDomainNameOutputWithContext(ctx context.Context) DnsDomainNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainNameOutput)
}

func (i *DnsDomainName) ToDnsDomainNamePtrOutput() DnsDomainNamePtrOutput {
	return i.ToDnsDomainNamePtrOutputWithContext(context.Background())
}

func (i *DnsDomainName) ToDnsDomainNamePtrOutputWithContext(ctx context.Context) DnsDomainNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainNamePtrOutput)
}

type DnsDomainNamePtrInput interface {
	pulumi.Input

	ToDnsDomainNamePtrOutput() DnsDomainNamePtrOutput
	ToDnsDomainNamePtrOutputWithContext(ctx context.Context) DnsDomainNamePtrOutput
}

type dnsDomainNamePtrType DnsDomainNameArgs

func (*dnsDomainNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsDomainName)(nil))
}

func (i *dnsDomainNamePtrType) ToDnsDomainNamePtrOutput() DnsDomainNamePtrOutput {
	return i.ToDnsDomainNamePtrOutputWithContext(context.Background())
}

func (i *dnsDomainNamePtrType) ToDnsDomainNamePtrOutputWithContext(ctx context.Context) DnsDomainNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainNamePtrOutput)
}

// DnsDomainNameArrayInput is an input type that accepts DnsDomainNameArray and DnsDomainNameArrayOutput values.
// You can construct a concrete instance of `DnsDomainNameArrayInput` via:
//
//          DnsDomainNameArray{ DnsDomainNameArgs{...} }
type DnsDomainNameArrayInput interface {
	pulumi.Input

	ToDnsDomainNameArrayOutput() DnsDomainNameArrayOutput
	ToDnsDomainNameArrayOutputWithContext(context.Context) DnsDomainNameArrayOutput
}

type DnsDomainNameArray []DnsDomainNameInput

func (DnsDomainNameArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DnsDomainName)(nil))
}

func (i DnsDomainNameArray) ToDnsDomainNameArrayOutput() DnsDomainNameArrayOutput {
	return i.ToDnsDomainNameArrayOutputWithContext(context.Background())
}

func (i DnsDomainNameArray) ToDnsDomainNameArrayOutputWithContext(ctx context.Context) DnsDomainNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainNameArrayOutput)
}

// DnsDomainNameMapInput is an input type that accepts DnsDomainNameMap and DnsDomainNameMapOutput values.
// You can construct a concrete instance of `DnsDomainNameMapInput` via:
//
//          DnsDomainNameMap{ "key": DnsDomainNameArgs{...} }
type DnsDomainNameMapInput interface {
	pulumi.Input

	ToDnsDomainNameMapOutput() DnsDomainNameMapOutput
	ToDnsDomainNameMapOutputWithContext(context.Context) DnsDomainNameMapOutput
}

type DnsDomainNameMap map[string]DnsDomainNameInput

func (DnsDomainNameMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DnsDomainName)(nil))
}

func (i DnsDomainNameMap) ToDnsDomainNameMapOutput() DnsDomainNameMapOutput {
	return i.ToDnsDomainNameMapOutputWithContext(context.Background())
}

func (i DnsDomainNameMap) ToDnsDomainNameMapOutputWithContext(ctx context.Context) DnsDomainNameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainNameMapOutput)
}

type DnsDomainNameOutput struct {
	*pulumi.OutputState
}

func (DnsDomainNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsDomainName)(nil))
}

func (o DnsDomainNameOutput) ToDnsDomainNameOutput() DnsDomainNameOutput {
	return o
}

func (o DnsDomainNameOutput) ToDnsDomainNameOutputWithContext(ctx context.Context) DnsDomainNameOutput {
	return o
}

func (o DnsDomainNameOutput) ToDnsDomainNamePtrOutput() DnsDomainNamePtrOutput {
	return o.ToDnsDomainNamePtrOutputWithContext(context.Background())
}

func (o DnsDomainNameOutput) ToDnsDomainNamePtrOutputWithContext(ctx context.Context) DnsDomainNamePtrOutput {
	return o.ApplyT(func(v DnsDomainName) *DnsDomainName {
		return &v
	}).(DnsDomainNamePtrOutput)
}

type DnsDomainNamePtrOutput struct {
	*pulumi.OutputState
}

func (DnsDomainNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsDomainName)(nil))
}

func (o DnsDomainNamePtrOutput) ToDnsDomainNamePtrOutput() DnsDomainNamePtrOutput {
	return o
}

func (o DnsDomainNamePtrOutput) ToDnsDomainNamePtrOutputWithContext(ctx context.Context) DnsDomainNamePtrOutput {
	return o
}

type DnsDomainNameArrayOutput struct{ *pulumi.OutputState }

func (DnsDomainNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsDomainName)(nil))
}

func (o DnsDomainNameArrayOutput) ToDnsDomainNameArrayOutput() DnsDomainNameArrayOutput {
	return o
}

func (o DnsDomainNameArrayOutput) ToDnsDomainNameArrayOutputWithContext(ctx context.Context) DnsDomainNameArrayOutput {
	return o
}

func (o DnsDomainNameArrayOutput) Index(i pulumi.IntInput) DnsDomainNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsDomainName {
		return vs[0].([]DnsDomainName)[vs[1].(int)]
	}).(DnsDomainNameOutput)
}

type DnsDomainNameMapOutput struct{ *pulumi.OutputState }

func (DnsDomainNameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsDomainName)(nil))
}

func (o DnsDomainNameMapOutput) ToDnsDomainNameMapOutput() DnsDomainNameMapOutput {
	return o
}

func (o DnsDomainNameMapOutput) ToDnsDomainNameMapOutputWithContext(ctx context.Context) DnsDomainNameMapOutput {
	return o
}

func (o DnsDomainNameMapOutput) MapIndex(k pulumi.StringInput) DnsDomainNameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsDomainName {
		return vs[0].(map[string]DnsDomainName)[vs[1].(string)]
	}).(DnsDomainNameOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsDomainNameOutput{})
	pulumi.RegisterOutputType(DnsDomainNamePtrOutput{})
	pulumi.RegisterOutputType(DnsDomainNameArrayOutput{})
	pulumi.RegisterOutputType(DnsDomainNameMapOutput{})
}
