// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Civo network resource. This can be used to create, modify, and delete networks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := civo.NewNetwork(ctx, "custom_net", &civo.NetworkArgs{
//				Label: pulumi.String("test_network"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// using ID
//
// ```sh
// $ pulumi import civo:index/network:Network custom_net b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
// ```
type Network struct {
	pulumi.CustomResourceState

	// The CIDR block for the network
	CidrV4 pulumi.StringPtrOutput `pulumi:"cidrV4"`
	// If the network is default, this will be `true`
	Default pulumi.BoolOutput `pulumi:"default"`
	// Name for the network
	Label pulumi.StringOutput `pulumi:"label"`
	// The name of the network
	Name pulumi.StringOutput `pulumi:"name"`
	// List of nameservers for the network
	NameserversV4s pulumi.StringArrayOutput `pulumi:"nameserversV4s"`
	// The region of the network
	Region pulumi.StringOutput `pulumi:"region"`
	// End of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4End pulumi.StringPtrOutput `pulumi:"vlanAllocationPoolV4End"`
	// Start of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4Start pulumi.StringPtrOutput `pulumi:"vlanAllocationPoolV4Start"`
	// CIDR for VLAN IPv4
	VlanCidrV4 pulumi.StringPtrOutput `pulumi:"vlanCidrV4"`
	// Gateway IP for VLAN IPv4
	VlanGatewayIpV4 pulumi.StringPtrOutput `pulumi:"vlanGatewayIpV4"`
	// VLAN ID for the network
	VlanId pulumi.IntPtrOutput `pulumi:"vlanId"`
	// Physical interface for VLAN
	VlanPhysicalInterface pulumi.StringPtrOutput `pulumi:"vlanPhysicalInterface"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("civo:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("civo:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// The CIDR block for the network
	CidrV4 *string `pulumi:"cidrV4"`
	// If the network is default, this will be `true`
	Default *bool `pulumi:"default"`
	// Name for the network
	Label *string `pulumi:"label"`
	// The name of the network
	Name *string `pulumi:"name"`
	// List of nameservers for the network
	NameserversV4s []string `pulumi:"nameserversV4s"`
	// The region of the network
	Region *string `pulumi:"region"`
	// End of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4End *string `pulumi:"vlanAllocationPoolV4End"`
	// Start of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4Start *string `pulumi:"vlanAllocationPoolV4Start"`
	// CIDR for VLAN IPv4
	VlanCidrV4 *string `pulumi:"vlanCidrV4"`
	// Gateway IP for VLAN IPv4
	VlanGatewayIpV4 *string `pulumi:"vlanGatewayIpV4"`
	// VLAN ID for the network
	VlanId *int `pulumi:"vlanId"`
	// Physical interface for VLAN
	VlanPhysicalInterface *string `pulumi:"vlanPhysicalInterface"`
}

type NetworkState struct {
	// The CIDR block for the network
	CidrV4 pulumi.StringPtrInput
	// If the network is default, this will be `true`
	Default pulumi.BoolPtrInput
	// Name for the network
	Label pulumi.StringPtrInput
	// The name of the network
	Name pulumi.StringPtrInput
	// List of nameservers for the network
	NameserversV4s pulumi.StringArrayInput
	// The region of the network
	Region pulumi.StringPtrInput
	// End of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4End pulumi.StringPtrInput
	// Start of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4Start pulumi.StringPtrInput
	// CIDR for VLAN IPv4
	VlanCidrV4 pulumi.StringPtrInput
	// Gateway IP for VLAN IPv4
	VlanGatewayIpV4 pulumi.StringPtrInput
	// VLAN ID for the network
	VlanId pulumi.IntPtrInput
	// Physical interface for VLAN
	VlanPhysicalInterface pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// The CIDR block for the network
	CidrV4 *string `pulumi:"cidrV4"`
	// Name for the network
	Label string `pulumi:"label"`
	// List of nameservers for the network
	NameserversV4s []string `pulumi:"nameserversV4s"`
	// The region of the network
	Region *string `pulumi:"region"`
	// End of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4End *string `pulumi:"vlanAllocationPoolV4End"`
	// Start of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4Start *string `pulumi:"vlanAllocationPoolV4Start"`
	// CIDR for VLAN IPv4
	VlanCidrV4 *string `pulumi:"vlanCidrV4"`
	// Gateway IP for VLAN IPv4
	VlanGatewayIpV4 *string `pulumi:"vlanGatewayIpV4"`
	// VLAN ID for the network
	VlanId *int `pulumi:"vlanId"`
	// Physical interface for VLAN
	VlanPhysicalInterface *string `pulumi:"vlanPhysicalInterface"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// The CIDR block for the network
	CidrV4 pulumi.StringPtrInput
	// Name for the network
	Label pulumi.StringInput
	// List of nameservers for the network
	NameserversV4s pulumi.StringArrayInput
	// The region of the network
	Region pulumi.StringPtrInput
	// End of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4End pulumi.StringPtrInput
	// Start of the IPv4 allocation pool for VLAN
	VlanAllocationPoolV4Start pulumi.StringPtrInput
	// CIDR for VLAN IPv4
	VlanCidrV4 pulumi.StringPtrInput
	// Gateway IP for VLAN IPv4
	VlanGatewayIpV4 pulumi.StringPtrInput
	// VLAN ID for the network
	VlanId pulumi.IntPtrInput
	// Physical interface for VLAN
	VlanPhysicalInterface pulumi.StringPtrInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// The CIDR block for the network
func (o NetworkOutput) CidrV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.CidrV4 }).(pulumi.StringPtrOutput)
}

// If the network is default, this will be `true`
func (o NetworkOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

// Name for the network
func (o NetworkOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The name of the network
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of nameservers for the network
func (o NetworkOutput) NameserversV4s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.NameserversV4s }).(pulumi.StringArrayOutput)
}

// The region of the network
func (o NetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// End of the IPv4 allocation pool for VLAN
func (o NetworkOutput) VlanAllocationPoolV4End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.VlanAllocationPoolV4End }).(pulumi.StringPtrOutput)
}

// Start of the IPv4 allocation pool for VLAN
func (o NetworkOutput) VlanAllocationPoolV4Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.VlanAllocationPoolV4Start }).(pulumi.StringPtrOutput)
}

// CIDR for VLAN IPv4
func (o NetworkOutput) VlanCidrV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.VlanCidrV4 }).(pulumi.StringPtrOutput)
}

// Gateway IP for VLAN IPv4
func (o NetworkOutput) VlanGatewayIpV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.VlanGatewayIpV4 }).(pulumi.StringPtrOutput)
}

// VLAN ID for the network
func (o NetworkOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.VlanId }).(pulumi.IntPtrOutput)
}

// Physical interface for VLAN
func (o NetworkOutput) VlanPhysicalInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.VlanPhysicalInterface }).(pulumi.StringPtrOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
