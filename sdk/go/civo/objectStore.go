// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Object Store resource. This can be used to create, modify, and delete obejct stores.
type ObjectStore struct {
	pulumi.CustomResourceState

	// The access key id of the Object Store. It is generated by the provider.
	AccessKeyId pulumi.StringOutput `pulumi:"accessKeyId"`
	// The endpoint of the Object Store. It is generated by the provider.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The generated name of the Object Store. It is generated by the provider.
	GeneratedName pulumi.StringOutput `pulumi:"generatedName"`
	// The maximum size of the Object Store. Default is 500GB.
	MaxSizeGb pulumi.IntPtrOutput `pulumi:"maxSizeGb"`
	// The name of the Object Store. Must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The secret access key of the Object Store. It is generated by the provider.
	SecretAccessKey pulumi.StringOutput `pulumi:"secretAccessKey"`
	// The status of the Object Store.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewObjectStore registers a new resource with the given unique name, arguments, and options.
func NewObjectStore(ctx *pulumi.Context,
	name string, args *ObjectStoreArgs, opts ...pulumi.ResourceOption) (*ObjectStore, error) {
	if args == nil {
		args = &ObjectStoreArgs{}
	}

	var resource ObjectStore
	err := ctx.RegisterResource("civo:index/objectStore:ObjectStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectStore gets an existing ObjectStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectStoreState, opts ...pulumi.ResourceOption) (*ObjectStore, error) {
	var resource ObjectStore
	err := ctx.ReadResource("civo:index/objectStore:ObjectStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectStore resources.
type objectStoreState struct {
	// The access key id of the Object Store. It is generated by the provider.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The endpoint of the Object Store. It is generated by the provider.
	Endpoint *string `pulumi:"endpoint"`
	// The generated name of the Object Store. It is generated by the provider.
	GeneratedName *string `pulumi:"generatedName"`
	// The maximum size of the Object Store. Default is 500GB.
	MaxSizeGb *int `pulumi:"maxSizeGb"`
	// The name of the Object Store. Must be unique.
	Name *string `pulumi:"name"`
	// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
	Region *string `pulumi:"region"`
	// The secret access key of the Object Store. It is generated by the provider.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The status of the Object Store.
	Status *string `pulumi:"status"`
}

type ObjectStoreState struct {
	// The access key id of the Object Store. It is generated by the provider.
	AccessKeyId pulumi.StringPtrInput
	// The endpoint of the Object Store. It is generated by the provider.
	Endpoint pulumi.StringPtrInput
	// The generated name of the Object Store. It is generated by the provider.
	GeneratedName pulumi.StringPtrInput
	// The maximum size of the Object Store. Default is 500GB.
	MaxSizeGb pulumi.IntPtrInput
	// The name of the Object Store. Must be unique.
	Name pulumi.StringPtrInput
	// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
	Region pulumi.StringPtrInput
	// The secret access key of the Object Store. It is generated by the provider.
	SecretAccessKey pulumi.StringPtrInput
	// The status of the Object Store.
	Status pulumi.StringPtrInput
}

func (ObjectStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreState)(nil)).Elem()
}

type objectStoreArgs struct {
	// The maximum size of the Object Store. Default is 500GB.
	MaxSizeGb *int `pulumi:"maxSizeGb"`
	// The name of the Object Store. Must be unique.
	Name *string `pulumi:"name"`
	// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ObjectStore resource.
type ObjectStoreArgs struct {
	// The maximum size of the Object Store. Default is 500GB.
	MaxSizeGb pulumi.IntPtrInput
	// The name of the Object Store. Must be unique.
	Name pulumi.StringPtrInput
	// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
	Region pulumi.StringPtrInput
}

func (ObjectStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreArgs)(nil)).Elem()
}

type ObjectStoreInput interface {
	pulumi.Input

	ToObjectStoreOutput() ObjectStoreOutput
	ToObjectStoreOutputWithContext(ctx context.Context) ObjectStoreOutput
}

func (*ObjectStore) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStore)(nil)).Elem()
}

func (i *ObjectStore) ToObjectStoreOutput() ObjectStoreOutput {
	return i.ToObjectStoreOutputWithContext(context.Background())
}

func (i *ObjectStore) ToObjectStoreOutputWithContext(ctx context.Context) ObjectStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreOutput)
}

// ObjectStoreArrayInput is an input type that accepts ObjectStoreArray and ObjectStoreArrayOutput values.
// You can construct a concrete instance of `ObjectStoreArrayInput` via:
//
//          ObjectStoreArray{ ObjectStoreArgs{...} }
type ObjectStoreArrayInput interface {
	pulumi.Input

	ToObjectStoreArrayOutput() ObjectStoreArrayOutput
	ToObjectStoreArrayOutputWithContext(context.Context) ObjectStoreArrayOutput
}

type ObjectStoreArray []ObjectStoreInput

func (ObjectStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStore)(nil)).Elem()
}

func (i ObjectStoreArray) ToObjectStoreArrayOutput() ObjectStoreArrayOutput {
	return i.ToObjectStoreArrayOutputWithContext(context.Background())
}

func (i ObjectStoreArray) ToObjectStoreArrayOutputWithContext(ctx context.Context) ObjectStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreArrayOutput)
}

// ObjectStoreMapInput is an input type that accepts ObjectStoreMap and ObjectStoreMapOutput values.
// You can construct a concrete instance of `ObjectStoreMapInput` via:
//
//          ObjectStoreMap{ "key": ObjectStoreArgs{...} }
type ObjectStoreMapInput interface {
	pulumi.Input

	ToObjectStoreMapOutput() ObjectStoreMapOutput
	ToObjectStoreMapOutputWithContext(context.Context) ObjectStoreMapOutput
}

type ObjectStoreMap map[string]ObjectStoreInput

func (ObjectStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStore)(nil)).Elem()
}

func (i ObjectStoreMap) ToObjectStoreMapOutput() ObjectStoreMapOutput {
	return i.ToObjectStoreMapOutputWithContext(context.Background())
}

func (i ObjectStoreMap) ToObjectStoreMapOutputWithContext(ctx context.Context) ObjectStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreMapOutput)
}

type ObjectStoreOutput struct{ *pulumi.OutputState }

func (ObjectStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStore)(nil)).Elem()
}

func (o ObjectStoreOutput) ToObjectStoreOutput() ObjectStoreOutput {
	return o
}

func (o ObjectStoreOutput) ToObjectStoreOutputWithContext(ctx context.Context) ObjectStoreOutput {
	return o
}

// The access key id of the Object Store. It is generated by the provider.
func (o ObjectStoreOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.AccessKeyId }).(pulumi.StringOutput)
}

// The endpoint of the Object Store. It is generated by the provider.
func (o ObjectStoreOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The generated name of the Object Store. It is generated by the provider.
func (o ObjectStoreOutput) GeneratedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.GeneratedName }).(pulumi.StringOutput)
}

// The maximum size of the Object Store. Default is 500GB.
func (o ObjectStoreOutput) MaxSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.IntPtrOutput { return v.MaxSizeGb }).(pulumi.IntPtrOutput)
}

// The name of the Object Store. Must be unique.
func (o ObjectStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
func (o ObjectStoreOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The secret access key of the Object Store. It is generated by the provider.
func (o ObjectStoreOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.SecretAccessKey }).(pulumi.StringOutput)
}

// The status of the Object Store.
func (o ObjectStoreOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ObjectStoreArrayOutput struct{ *pulumi.OutputState }

func (ObjectStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStore)(nil)).Elem()
}

func (o ObjectStoreArrayOutput) ToObjectStoreArrayOutput() ObjectStoreArrayOutput {
	return o
}

func (o ObjectStoreArrayOutput) ToObjectStoreArrayOutputWithContext(ctx context.Context) ObjectStoreArrayOutput {
	return o
}

func (o ObjectStoreArrayOutput) Index(i pulumi.IntInput) ObjectStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectStore {
		return vs[0].([]*ObjectStore)[vs[1].(int)]
	}).(ObjectStoreOutput)
}

type ObjectStoreMapOutput struct{ *pulumi.OutputState }

func (ObjectStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStore)(nil)).Elem()
}

func (o ObjectStoreMapOutput) ToObjectStoreMapOutput() ObjectStoreMapOutput {
	return o
}

func (o ObjectStoreMapOutput) ToObjectStoreMapOutputWithContext(ctx context.Context) ObjectStoreMapOutput {
	return o
}

func (o ObjectStoreMapOutput) MapIndex(k pulumi.StringInput) ObjectStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectStore {
		return vs[0].(map[string]*ObjectStore)[vs[1].(string)]
	}).(ObjectStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreInput)(nil)).Elem(), &ObjectStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreArrayInput)(nil)).Elem(), ObjectStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreMapInput)(nil)).Elem(), ObjectStoreMap{})
	pulumi.RegisterOutputType(ObjectStoreOutput{})
	pulumi.RegisterOutputType(ObjectStoreArrayOutput{})
	pulumi.RegisterOutputType(ObjectStoreMapOutput{})
}
