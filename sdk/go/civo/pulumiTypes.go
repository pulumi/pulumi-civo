// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-civo/sdk/v2/go/civo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FirewallEgressRule struct {
	// The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.
	Action string `pulumi:"action"`
	// The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)
	Cidrs []string `pulumi:"cidrs"`
	Id    *string  `pulumi:"id"`
	// A string that will be the displayed name/reference for this rule
	Label *string `pulumi:"label"`
	// The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`
	PortRange *string `pulumi:"portRange"`
	// The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)
	Protocol *string `pulumi:"protocol"`
}

// FirewallEgressRuleInput is an input type that accepts FirewallEgressRuleArgs and FirewallEgressRuleOutput values.
// You can construct a concrete instance of `FirewallEgressRuleInput` via:
//
//	FirewallEgressRuleArgs{...}
type FirewallEgressRuleInput interface {
	pulumi.Input

	ToFirewallEgressRuleOutput() FirewallEgressRuleOutput
	ToFirewallEgressRuleOutputWithContext(context.Context) FirewallEgressRuleOutput
}

type FirewallEgressRuleArgs struct {
	// The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.
	Action pulumi.StringInput `pulumi:"action"`
	// The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
	Id    pulumi.StringPtrInput   `pulumi:"id"`
	// A string that will be the displayed name/reference for this rule
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (FirewallEgressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallEgressRule)(nil)).Elem()
}

func (i FirewallEgressRuleArgs) ToFirewallEgressRuleOutput() FirewallEgressRuleOutput {
	return i.ToFirewallEgressRuleOutputWithContext(context.Background())
}

func (i FirewallEgressRuleArgs) ToFirewallEgressRuleOutputWithContext(ctx context.Context) FirewallEgressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallEgressRuleOutput)
}

// FirewallEgressRuleArrayInput is an input type that accepts FirewallEgressRuleArray and FirewallEgressRuleArrayOutput values.
// You can construct a concrete instance of `FirewallEgressRuleArrayInput` via:
//
//	FirewallEgressRuleArray{ FirewallEgressRuleArgs{...} }
type FirewallEgressRuleArrayInput interface {
	pulumi.Input

	ToFirewallEgressRuleArrayOutput() FirewallEgressRuleArrayOutput
	ToFirewallEgressRuleArrayOutputWithContext(context.Context) FirewallEgressRuleArrayOutput
}

type FirewallEgressRuleArray []FirewallEgressRuleInput

func (FirewallEgressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallEgressRule)(nil)).Elem()
}

func (i FirewallEgressRuleArray) ToFirewallEgressRuleArrayOutput() FirewallEgressRuleArrayOutput {
	return i.ToFirewallEgressRuleArrayOutputWithContext(context.Background())
}

func (i FirewallEgressRuleArray) ToFirewallEgressRuleArrayOutputWithContext(ctx context.Context) FirewallEgressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallEgressRuleArrayOutput)
}

type FirewallEgressRuleOutput struct{ *pulumi.OutputState }

func (FirewallEgressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallEgressRule)(nil)).Elem()
}

func (o FirewallEgressRuleOutput) ToFirewallEgressRuleOutput() FirewallEgressRuleOutput {
	return o
}

func (o FirewallEgressRuleOutput) ToFirewallEgressRuleOutputWithContext(ctx context.Context) FirewallEgressRuleOutput {
	return o
}

// The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.
func (o FirewallEgressRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallEgressRule) string { return v.Action }).(pulumi.StringOutput)
}

// The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)
func (o FirewallEgressRuleOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallEgressRule) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

func (o FirewallEgressRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallEgressRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A string that will be the displayed name/reference for this rule
func (o FirewallEgressRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallEgressRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`
func (o FirewallEgressRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallEgressRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)
func (o FirewallEgressRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallEgressRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type FirewallEgressRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallEgressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallEgressRule)(nil)).Elem()
}

func (o FirewallEgressRuleArrayOutput) ToFirewallEgressRuleArrayOutput() FirewallEgressRuleArrayOutput {
	return o
}

func (o FirewallEgressRuleArrayOutput) ToFirewallEgressRuleArrayOutputWithContext(ctx context.Context) FirewallEgressRuleArrayOutput {
	return o
}

func (o FirewallEgressRuleArrayOutput) Index(i pulumi.IntInput) FirewallEgressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallEgressRule {
		return vs[0].([]FirewallEgressRule)[vs[1].(int)]
	}).(FirewallEgressRuleOutput)
}

type FirewallIngressRule struct {
	// The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.
	Action string `pulumi:"action"`
	// The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)
	Cidrs []string `pulumi:"cidrs"`
	Id    *string  `pulumi:"id"`
	// A string that will be the displayed name/reference for this rule
	Label *string `pulumi:"label"`
	// The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`
	PortRange *string `pulumi:"portRange"`
	// The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)
	Protocol *string `pulumi:"protocol"`
}

// FirewallIngressRuleInput is an input type that accepts FirewallIngressRuleArgs and FirewallIngressRuleOutput values.
// You can construct a concrete instance of `FirewallIngressRuleInput` via:
//
//	FirewallIngressRuleArgs{...}
type FirewallIngressRuleInput interface {
	pulumi.Input

	ToFirewallIngressRuleOutput() FirewallIngressRuleOutput
	ToFirewallIngressRuleOutputWithContext(context.Context) FirewallIngressRuleOutput
}

type FirewallIngressRuleArgs struct {
	// The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.
	Action pulumi.StringInput `pulumi:"action"`
	// The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
	Id    pulumi.StringPtrInput   `pulumi:"id"`
	// A string that will be the displayed name/reference for this rule
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (FirewallIngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallIngressRule)(nil)).Elem()
}

func (i FirewallIngressRuleArgs) ToFirewallIngressRuleOutput() FirewallIngressRuleOutput {
	return i.ToFirewallIngressRuleOutputWithContext(context.Background())
}

func (i FirewallIngressRuleArgs) ToFirewallIngressRuleOutputWithContext(ctx context.Context) FirewallIngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIngressRuleOutput)
}

// FirewallIngressRuleArrayInput is an input type that accepts FirewallIngressRuleArray and FirewallIngressRuleArrayOutput values.
// You can construct a concrete instance of `FirewallIngressRuleArrayInput` via:
//
//	FirewallIngressRuleArray{ FirewallIngressRuleArgs{...} }
type FirewallIngressRuleArrayInput interface {
	pulumi.Input

	ToFirewallIngressRuleArrayOutput() FirewallIngressRuleArrayOutput
	ToFirewallIngressRuleArrayOutputWithContext(context.Context) FirewallIngressRuleArrayOutput
}

type FirewallIngressRuleArray []FirewallIngressRuleInput

func (FirewallIngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallIngressRule)(nil)).Elem()
}

func (i FirewallIngressRuleArray) ToFirewallIngressRuleArrayOutput() FirewallIngressRuleArrayOutput {
	return i.ToFirewallIngressRuleArrayOutputWithContext(context.Background())
}

func (i FirewallIngressRuleArray) ToFirewallIngressRuleArrayOutputWithContext(ctx context.Context) FirewallIngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIngressRuleArrayOutput)
}

type FirewallIngressRuleOutput struct{ *pulumi.OutputState }

func (FirewallIngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallIngressRule)(nil)).Elem()
}

func (o FirewallIngressRuleOutput) ToFirewallIngressRuleOutput() FirewallIngressRuleOutput {
	return o
}

func (o FirewallIngressRuleOutput) ToFirewallIngressRuleOutputWithContext(ctx context.Context) FirewallIngressRuleOutput {
	return o
}

// The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.
func (o FirewallIngressRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallIngressRule) string { return v.Action }).(pulumi.StringOutput)
}

// The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)
func (o FirewallIngressRuleOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallIngressRule) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

func (o FirewallIngressRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallIngressRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A string that will be the displayed name/reference for this rule
func (o FirewallIngressRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallIngressRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`
func (o FirewallIngressRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallIngressRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)
func (o FirewallIngressRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallIngressRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type FirewallIngressRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallIngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallIngressRule)(nil)).Elem()
}

func (o FirewallIngressRuleArrayOutput) ToFirewallIngressRuleArrayOutput() FirewallIngressRuleArrayOutput {
	return o
}

func (o FirewallIngressRuleArrayOutput) ToFirewallIngressRuleArrayOutputWithContext(ctx context.Context) FirewallIngressRuleArrayOutput {
	return o
}

func (o FirewallIngressRuleArrayOutput) Index(i pulumi.IntInput) FirewallIngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallIngressRule {
		return vs[0].([]FirewallIngressRule)[vs[1].(int)]
	}).(FirewallIngressRuleOutput)
}

type KubernetesClusterInstalledApplication struct {
	// (String) name of the application
	Application *string `pulumi:"application"`
	// (String) category of the application
	Category *string `pulumi:"category"`
	// (Boolean) whether application is installed or not
	Installed *bool `pulumi:"installed"`
	// (String) version of the application
	Version *string `pulumi:"version"`
}

// KubernetesClusterInstalledApplicationInput is an input type that accepts KubernetesClusterInstalledApplicationArgs and KubernetesClusterInstalledApplicationOutput values.
// You can construct a concrete instance of `KubernetesClusterInstalledApplicationInput` via:
//
//	KubernetesClusterInstalledApplicationArgs{...}
type KubernetesClusterInstalledApplicationInput interface {
	pulumi.Input

	ToKubernetesClusterInstalledApplicationOutput() KubernetesClusterInstalledApplicationOutput
	ToKubernetesClusterInstalledApplicationOutputWithContext(context.Context) KubernetesClusterInstalledApplicationOutput
}

type KubernetesClusterInstalledApplicationArgs struct {
	// (String) name of the application
	Application pulumi.StringPtrInput `pulumi:"application"`
	// (String) category of the application
	Category pulumi.StringPtrInput `pulumi:"category"`
	// (Boolean) whether application is installed or not
	Installed pulumi.BoolPtrInput `pulumi:"installed"`
	// (String) version of the application
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KubernetesClusterInstalledApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterInstalledApplication)(nil)).Elem()
}

func (i KubernetesClusterInstalledApplicationArgs) ToKubernetesClusterInstalledApplicationOutput() KubernetesClusterInstalledApplicationOutput {
	return i.ToKubernetesClusterInstalledApplicationOutputWithContext(context.Background())
}

func (i KubernetesClusterInstalledApplicationArgs) ToKubernetesClusterInstalledApplicationOutputWithContext(ctx context.Context) KubernetesClusterInstalledApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterInstalledApplicationOutput)
}

// KubernetesClusterInstalledApplicationArrayInput is an input type that accepts KubernetesClusterInstalledApplicationArray and KubernetesClusterInstalledApplicationArrayOutput values.
// You can construct a concrete instance of `KubernetesClusterInstalledApplicationArrayInput` via:
//
//	KubernetesClusterInstalledApplicationArray{ KubernetesClusterInstalledApplicationArgs{...} }
type KubernetesClusterInstalledApplicationArrayInput interface {
	pulumi.Input

	ToKubernetesClusterInstalledApplicationArrayOutput() KubernetesClusterInstalledApplicationArrayOutput
	ToKubernetesClusterInstalledApplicationArrayOutputWithContext(context.Context) KubernetesClusterInstalledApplicationArrayOutput
}

type KubernetesClusterInstalledApplicationArray []KubernetesClusterInstalledApplicationInput

func (KubernetesClusterInstalledApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterInstalledApplication)(nil)).Elem()
}

func (i KubernetesClusterInstalledApplicationArray) ToKubernetesClusterInstalledApplicationArrayOutput() KubernetesClusterInstalledApplicationArrayOutput {
	return i.ToKubernetesClusterInstalledApplicationArrayOutputWithContext(context.Background())
}

func (i KubernetesClusterInstalledApplicationArray) ToKubernetesClusterInstalledApplicationArrayOutputWithContext(ctx context.Context) KubernetesClusterInstalledApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterInstalledApplicationArrayOutput)
}

type KubernetesClusterInstalledApplicationOutput struct{ *pulumi.OutputState }

func (KubernetesClusterInstalledApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterInstalledApplication)(nil)).Elem()
}

func (o KubernetesClusterInstalledApplicationOutput) ToKubernetesClusterInstalledApplicationOutput() KubernetesClusterInstalledApplicationOutput {
	return o
}

func (o KubernetesClusterInstalledApplicationOutput) ToKubernetesClusterInstalledApplicationOutputWithContext(ctx context.Context) KubernetesClusterInstalledApplicationOutput {
	return o
}

// (String) name of the application
func (o KubernetesClusterInstalledApplicationOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterInstalledApplication) *string { return v.Application }).(pulumi.StringPtrOutput)
}

// (String) category of the application
func (o KubernetesClusterInstalledApplicationOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterInstalledApplication) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// (Boolean) whether application is installed or not
func (o KubernetesClusterInstalledApplicationOutput) Installed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesClusterInstalledApplication) *bool { return v.Installed }).(pulumi.BoolPtrOutput)
}

// (String) version of the application
func (o KubernetesClusterInstalledApplicationOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterInstalledApplication) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KubernetesClusterInstalledApplicationArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterInstalledApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterInstalledApplication)(nil)).Elem()
}

func (o KubernetesClusterInstalledApplicationArrayOutput) ToKubernetesClusterInstalledApplicationArrayOutput() KubernetesClusterInstalledApplicationArrayOutput {
	return o
}

func (o KubernetesClusterInstalledApplicationArrayOutput) ToKubernetesClusterInstalledApplicationArrayOutputWithContext(ctx context.Context) KubernetesClusterInstalledApplicationArrayOutput {
	return o
}

func (o KubernetesClusterInstalledApplicationArrayOutput) Index(i pulumi.IntInput) KubernetesClusterInstalledApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterInstalledApplication {
		return vs[0].([]KubernetesClusterInstalledApplication)[vs[1].(int)]
	}).(KubernetesClusterInstalledApplicationOutput)
}

type KubernetesClusterPools struct {
	// Instance names in the nodepool
	InstanceNames []string `pulumi:"instanceNames"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  *string           `pulumi:"label"`
	Labels map[string]string `pulumi:"labels"`
	// Number of nodes in the nodepool
	NodeCount int `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool *bool `pulumi:"publicIpNodePool"`
	// Size of the nodes in the nodepool
	Size string `pulumi:"size"`
	// (see below for nested schema)
	//
	// Read-Only Output:
	Taints []KubernetesClusterPoolsTaint `pulumi:"taints"`
}

// KubernetesClusterPoolsInput is an input type that accepts KubernetesClusterPoolsArgs and KubernetesClusterPoolsOutput values.
// You can construct a concrete instance of `KubernetesClusterPoolsInput` via:
//
//	KubernetesClusterPoolsArgs{...}
type KubernetesClusterPoolsInput interface {
	pulumi.Input

	ToKubernetesClusterPoolsOutput() KubernetesClusterPoolsOutput
	ToKubernetesClusterPoolsOutputWithContext(context.Context) KubernetesClusterPoolsOutput
}

type KubernetesClusterPoolsArgs struct {
	// Instance names in the nodepool
	InstanceNames pulumi.StringArrayInput `pulumi:"instanceNames"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  pulumi.StringPtrInput `pulumi:"label"`
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Number of nodes in the nodepool
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool pulumi.BoolPtrInput `pulumi:"publicIpNodePool"`
	// Size of the nodes in the nodepool
	Size pulumi.StringInput `pulumi:"size"`
	// (see below for nested schema)
	//
	// Read-Only Output:
	Taints KubernetesClusterPoolsTaintArrayInput `pulumi:"taints"`
}

func (KubernetesClusterPoolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterPools)(nil)).Elem()
}

func (i KubernetesClusterPoolsArgs) ToKubernetesClusterPoolsOutput() KubernetesClusterPoolsOutput {
	return i.ToKubernetesClusterPoolsOutputWithContext(context.Background())
}

func (i KubernetesClusterPoolsArgs) ToKubernetesClusterPoolsOutputWithContext(ctx context.Context) KubernetesClusterPoolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterPoolsOutput)
}

func (i KubernetesClusterPoolsArgs) ToKubernetesClusterPoolsPtrOutput() KubernetesClusterPoolsPtrOutput {
	return i.ToKubernetesClusterPoolsPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterPoolsArgs) ToKubernetesClusterPoolsPtrOutputWithContext(ctx context.Context) KubernetesClusterPoolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterPoolsOutput).ToKubernetesClusterPoolsPtrOutputWithContext(ctx)
}

// KubernetesClusterPoolsPtrInput is an input type that accepts KubernetesClusterPoolsArgs, KubernetesClusterPoolsPtr and KubernetesClusterPoolsPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterPoolsPtrInput` via:
//
//	        KubernetesClusterPoolsArgs{...}
//
//	or:
//
//	        nil
type KubernetesClusterPoolsPtrInput interface {
	pulumi.Input

	ToKubernetesClusterPoolsPtrOutput() KubernetesClusterPoolsPtrOutput
	ToKubernetesClusterPoolsPtrOutputWithContext(context.Context) KubernetesClusterPoolsPtrOutput
}

type kubernetesClusterPoolsPtrType KubernetesClusterPoolsArgs

func KubernetesClusterPoolsPtr(v *KubernetesClusterPoolsArgs) KubernetesClusterPoolsPtrInput {
	return (*kubernetesClusterPoolsPtrType)(v)
}

func (*kubernetesClusterPoolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterPools)(nil)).Elem()
}

func (i *kubernetesClusterPoolsPtrType) ToKubernetesClusterPoolsPtrOutput() KubernetesClusterPoolsPtrOutput {
	return i.ToKubernetesClusterPoolsPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterPoolsPtrType) ToKubernetesClusterPoolsPtrOutputWithContext(ctx context.Context) KubernetesClusterPoolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterPoolsPtrOutput)
}

type KubernetesClusterPoolsOutput struct{ *pulumi.OutputState }

func (KubernetesClusterPoolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterPools)(nil)).Elem()
}

func (o KubernetesClusterPoolsOutput) ToKubernetesClusterPoolsOutput() KubernetesClusterPoolsOutput {
	return o
}

func (o KubernetesClusterPoolsOutput) ToKubernetesClusterPoolsOutputWithContext(ctx context.Context) KubernetesClusterPoolsOutput {
	return o
}

func (o KubernetesClusterPoolsOutput) ToKubernetesClusterPoolsPtrOutput() KubernetesClusterPoolsPtrOutput {
	return o.ToKubernetesClusterPoolsPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterPoolsOutput) ToKubernetesClusterPoolsPtrOutputWithContext(ctx context.Context) KubernetesClusterPoolsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesClusterPools) *KubernetesClusterPools {
		return &v
	}).(KubernetesClusterPoolsPtrOutput)
}

// Instance names in the nodepool
func (o KubernetesClusterPoolsOutput) InstanceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubernetesClusterPools) []string { return v.InstanceNames }).(pulumi.StringArrayOutput)
}

// Node pool label, if you don't provide one, we will generate one for you
func (o KubernetesClusterPoolsOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterPools) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o KubernetesClusterPoolsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesClusterPools) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Number of nodes in the nodepool
func (o KubernetesClusterPoolsOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v KubernetesClusterPools) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Node pool belongs to the public ip node pool
func (o KubernetesClusterPoolsOutput) PublicIpNodePool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesClusterPools) *bool { return v.PublicIpNodePool }).(pulumi.BoolPtrOutput)
}

// Size of the nodes in the nodepool
func (o KubernetesClusterPoolsOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterPools) string { return v.Size }).(pulumi.StringOutput)
}

// (see below for nested schema)
//
// Read-Only Output:
func (o KubernetesClusterPoolsOutput) Taints() KubernetesClusterPoolsTaintArrayOutput {
	return o.ApplyT(func(v KubernetesClusterPools) []KubernetesClusterPoolsTaint { return v.Taints }).(KubernetesClusterPoolsTaintArrayOutput)
}

type KubernetesClusterPoolsPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterPoolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterPools)(nil)).Elem()
}

func (o KubernetesClusterPoolsPtrOutput) ToKubernetesClusterPoolsPtrOutput() KubernetesClusterPoolsPtrOutput {
	return o
}

func (o KubernetesClusterPoolsPtrOutput) ToKubernetesClusterPoolsPtrOutputWithContext(ctx context.Context) KubernetesClusterPoolsPtrOutput {
	return o
}

func (o KubernetesClusterPoolsPtrOutput) Elem() KubernetesClusterPoolsOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) KubernetesClusterPools {
		if v != nil {
			return *v
		}
		var ret KubernetesClusterPools
		return ret
	}).(KubernetesClusterPoolsOutput)
}

// Instance names in the nodepool
func (o KubernetesClusterPoolsPtrOutput) InstanceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) []string {
		if v == nil {
			return nil
		}
		return v.InstanceNames
	}).(pulumi.StringArrayOutput)
}

// Node pool label, if you don't provide one, we will generate one for you
func (o KubernetesClusterPoolsPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesClusterPoolsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Number of nodes in the nodepool
func (o KubernetesClusterPoolsPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) *int {
		if v == nil {
			return nil
		}
		return &v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Node pool belongs to the public ip node pool
func (o KubernetesClusterPoolsPtrOutput) PublicIpNodePool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) *bool {
		if v == nil {
			return nil
		}
		return v.PublicIpNodePool
	}).(pulumi.BoolPtrOutput)
}

// Size of the nodes in the nodepool
func (o KubernetesClusterPoolsPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) *string {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.StringPtrOutput)
}

// (see below for nested schema)
//
// Read-Only Output:
func (o KubernetesClusterPoolsPtrOutput) Taints() KubernetesClusterPoolsTaintArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterPools) []KubernetesClusterPoolsTaint {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(KubernetesClusterPoolsTaintArrayOutput)
}

type KubernetesClusterPoolsTaint struct {
	Effect string `pulumi:"effect"`
	Key    string `pulumi:"key"`
	Value  string `pulumi:"value"`
}

// KubernetesClusterPoolsTaintInput is an input type that accepts KubernetesClusterPoolsTaintArgs and KubernetesClusterPoolsTaintOutput values.
// You can construct a concrete instance of `KubernetesClusterPoolsTaintInput` via:
//
//	KubernetesClusterPoolsTaintArgs{...}
type KubernetesClusterPoolsTaintInput interface {
	pulumi.Input

	ToKubernetesClusterPoolsTaintOutput() KubernetesClusterPoolsTaintOutput
	ToKubernetesClusterPoolsTaintOutputWithContext(context.Context) KubernetesClusterPoolsTaintOutput
}

type KubernetesClusterPoolsTaintArgs struct {
	Effect pulumi.StringInput `pulumi:"effect"`
	Key    pulumi.StringInput `pulumi:"key"`
	Value  pulumi.StringInput `pulumi:"value"`
}

func (KubernetesClusterPoolsTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterPoolsTaint)(nil)).Elem()
}

func (i KubernetesClusterPoolsTaintArgs) ToKubernetesClusterPoolsTaintOutput() KubernetesClusterPoolsTaintOutput {
	return i.ToKubernetesClusterPoolsTaintOutputWithContext(context.Background())
}

func (i KubernetesClusterPoolsTaintArgs) ToKubernetesClusterPoolsTaintOutputWithContext(ctx context.Context) KubernetesClusterPoolsTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterPoolsTaintOutput)
}

// KubernetesClusterPoolsTaintArrayInput is an input type that accepts KubernetesClusterPoolsTaintArray and KubernetesClusterPoolsTaintArrayOutput values.
// You can construct a concrete instance of `KubernetesClusterPoolsTaintArrayInput` via:
//
//	KubernetesClusterPoolsTaintArray{ KubernetesClusterPoolsTaintArgs{...} }
type KubernetesClusterPoolsTaintArrayInput interface {
	pulumi.Input

	ToKubernetesClusterPoolsTaintArrayOutput() KubernetesClusterPoolsTaintArrayOutput
	ToKubernetesClusterPoolsTaintArrayOutputWithContext(context.Context) KubernetesClusterPoolsTaintArrayOutput
}

type KubernetesClusterPoolsTaintArray []KubernetesClusterPoolsTaintInput

func (KubernetesClusterPoolsTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterPoolsTaint)(nil)).Elem()
}

func (i KubernetesClusterPoolsTaintArray) ToKubernetesClusterPoolsTaintArrayOutput() KubernetesClusterPoolsTaintArrayOutput {
	return i.ToKubernetesClusterPoolsTaintArrayOutputWithContext(context.Background())
}

func (i KubernetesClusterPoolsTaintArray) ToKubernetesClusterPoolsTaintArrayOutputWithContext(ctx context.Context) KubernetesClusterPoolsTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterPoolsTaintArrayOutput)
}

type KubernetesClusterPoolsTaintOutput struct{ *pulumi.OutputState }

func (KubernetesClusterPoolsTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterPoolsTaint)(nil)).Elem()
}

func (o KubernetesClusterPoolsTaintOutput) ToKubernetesClusterPoolsTaintOutput() KubernetesClusterPoolsTaintOutput {
	return o
}

func (o KubernetesClusterPoolsTaintOutput) ToKubernetesClusterPoolsTaintOutputWithContext(ctx context.Context) KubernetesClusterPoolsTaintOutput {
	return o
}

func (o KubernetesClusterPoolsTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterPoolsTaint) string { return v.Effect }).(pulumi.StringOutput)
}

func (o KubernetesClusterPoolsTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterPoolsTaint) string { return v.Key }).(pulumi.StringOutput)
}

func (o KubernetesClusterPoolsTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterPoolsTaint) string { return v.Value }).(pulumi.StringOutput)
}

type KubernetesClusterPoolsTaintArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterPoolsTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterPoolsTaint)(nil)).Elem()
}

func (o KubernetesClusterPoolsTaintArrayOutput) ToKubernetesClusterPoolsTaintArrayOutput() KubernetesClusterPoolsTaintArrayOutput {
	return o
}

func (o KubernetesClusterPoolsTaintArrayOutput) ToKubernetesClusterPoolsTaintArrayOutputWithContext(ctx context.Context) KubernetesClusterPoolsTaintArrayOutput {
	return o
}

func (o KubernetesClusterPoolsTaintArrayOutput) Index(i pulumi.IntInput) KubernetesClusterPoolsTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterPoolsTaint {
		return vs[0].([]KubernetesClusterPoolsTaint)[vs[1].(int)]
	}).(KubernetesClusterPoolsTaintOutput)
}

type KubernetesNodePoolTaint struct {
	Effect string `pulumi:"effect"`
	Key    string `pulumi:"key"`
	Value  string `pulumi:"value"`
}

// KubernetesNodePoolTaintInput is an input type that accepts KubernetesNodePoolTaintArgs and KubernetesNodePoolTaintOutput values.
// You can construct a concrete instance of `KubernetesNodePoolTaintInput` via:
//
//	KubernetesNodePoolTaintArgs{...}
type KubernetesNodePoolTaintInput interface {
	pulumi.Input

	ToKubernetesNodePoolTaintOutput() KubernetesNodePoolTaintOutput
	ToKubernetesNodePoolTaintOutputWithContext(context.Context) KubernetesNodePoolTaintOutput
}

type KubernetesNodePoolTaintArgs struct {
	Effect pulumi.StringInput `pulumi:"effect"`
	Key    pulumi.StringInput `pulumi:"key"`
	Value  pulumi.StringInput `pulumi:"value"`
}

func (KubernetesNodePoolTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolTaint)(nil)).Elem()
}

func (i KubernetesNodePoolTaintArgs) ToKubernetesNodePoolTaintOutput() KubernetesNodePoolTaintOutput {
	return i.ToKubernetesNodePoolTaintOutputWithContext(context.Background())
}

func (i KubernetesNodePoolTaintArgs) ToKubernetesNodePoolTaintOutputWithContext(ctx context.Context) KubernetesNodePoolTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolTaintOutput)
}

// KubernetesNodePoolTaintArrayInput is an input type that accepts KubernetesNodePoolTaintArray and KubernetesNodePoolTaintArrayOutput values.
// You can construct a concrete instance of `KubernetesNodePoolTaintArrayInput` via:
//
//	KubernetesNodePoolTaintArray{ KubernetesNodePoolTaintArgs{...} }
type KubernetesNodePoolTaintArrayInput interface {
	pulumi.Input

	ToKubernetesNodePoolTaintArrayOutput() KubernetesNodePoolTaintArrayOutput
	ToKubernetesNodePoolTaintArrayOutputWithContext(context.Context) KubernetesNodePoolTaintArrayOutput
}

type KubernetesNodePoolTaintArray []KubernetesNodePoolTaintInput

func (KubernetesNodePoolTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesNodePoolTaint)(nil)).Elem()
}

func (i KubernetesNodePoolTaintArray) ToKubernetesNodePoolTaintArrayOutput() KubernetesNodePoolTaintArrayOutput {
	return i.ToKubernetesNodePoolTaintArrayOutputWithContext(context.Background())
}

func (i KubernetesNodePoolTaintArray) ToKubernetesNodePoolTaintArrayOutputWithContext(ctx context.Context) KubernetesNodePoolTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolTaintArrayOutput)
}

type KubernetesNodePoolTaintOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolTaint)(nil)).Elem()
}

func (o KubernetesNodePoolTaintOutput) ToKubernetesNodePoolTaintOutput() KubernetesNodePoolTaintOutput {
	return o
}

func (o KubernetesNodePoolTaintOutput) ToKubernetesNodePoolTaintOutputWithContext(ctx context.Context) KubernetesNodePoolTaintOutput {
	return o
}

func (o KubernetesNodePoolTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesNodePoolTaint) string { return v.Effect }).(pulumi.StringOutput)
}

func (o KubernetesNodePoolTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesNodePoolTaint) string { return v.Key }).(pulumi.StringOutput)
}

func (o KubernetesNodePoolTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesNodePoolTaint) string { return v.Value }).(pulumi.StringOutput)
}

type KubernetesNodePoolTaintArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesNodePoolTaint)(nil)).Elem()
}

func (o KubernetesNodePoolTaintArrayOutput) ToKubernetesNodePoolTaintArrayOutput() KubernetesNodePoolTaintArrayOutput {
	return o
}

func (o KubernetesNodePoolTaintArrayOutput) ToKubernetesNodePoolTaintArrayOutputWithContext(ctx context.Context) KubernetesNodePoolTaintArrayOutput {
	return o
}

func (o KubernetesNodePoolTaintArrayOutput) Index(i pulumi.IntInput) KubernetesNodePoolTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesNodePoolTaint {
		return vs[0].([]KubernetesNodePoolTaint)[vs[1].(int)]
	}).(KubernetesNodePoolTaintOutput)
}

type GetDatabaseVersionFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter versions by this key. This may be one of `default`, `engine`, `version`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves `versions` which keys has value that matches one of the values provided here
	Values []string `pulumi:"values"`
}

// GetDatabaseVersionFilterInput is an input type that accepts GetDatabaseVersionFilterArgs and GetDatabaseVersionFilterOutput values.
// You can construct a concrete instance of `GetDatabaseVersionFilterInput` via:
//
//	GetDatabaseVersionFilterArgs{...}
type GetDatabaseVersionFilterInput interface {
	pulumi.Input

	ToGetDatabaseVersionFilterOutput() GetDatabaseVersionFilterOutput
	ToGetDatabaseVersionFilterOutputWithContext(context.Context) GetDatabaseVersionFilterOutput
}

type GetDatabaseVersionFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter versions by this key. This may be one of `default`, `engine`, `version`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves `versions` which keys has value that matches one of the values provided here
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetDatabaseVersionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseVersionFilter)(nil)).Elem()
}

func (i GetDatabaseVersionFilterArgs) ToGetDatabaseVersionFilterOutput() GetDatabaseVersionFilterOutput {
	return i.ToGetDatabaseVersionFilterOutputWithContext(context.Background())
}

func (i GetDatabaseVersionFilterArgs) ToGetDatabaseVersionFilterOutputWithContext(ctx context.Context) GetDatabaseVersionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseVersionFilterOutput)
}

// GetDatabaseVersionFilterArrayInput is an input type that accepts GetDatabaseVersionFilterArray and GetDatabaseVersionFilterArrayOutput values.
// You can construct a concrete instance of `GetDatabaseVersionFilterArrayInput` via:
//
//	GetDatabaseVersionFilterArray{ GetDatabaseVersionFilterArgs{...} }
type GetDatabaseVersionFilterArrayInput interface {
	pulumi.Input

	ToGetDatabaseVersionFilterArrayOutput() GetDatabaseVersionFilterArrayOutput
	ToGetDatabaseVersionFilterArrayOutputWithContext(context.Context) GetDatabaseVersionFilterArrayOutput
}

type GetDatabaseVersionFilterArray []GetDatabaseVersionFilterInput

func (GetDatabaseVersionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseVersionFilter)(nil)).Elem()
}

func (i GetDatabaseVersionFilterArray) ToGetDatabaseVersionFilterArrayOutput() GetDatabaseVersionFilterArrayOutput {
	return i.ToGetDatabaseVersionFilterArrayOutputWithContext(context.Background())
}

func (i GetDatabaseVersionFilterArray) ToGetDatabaseVersionFilterArrayOutputWithContext(ctx context.Context) GetDatabaseVersionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseVersionFilterArrayOutput)
}

type GetDatabaseVersionFilterOutput struct{ *pulumi.OutputState }

func (GetDatabaseVersionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseVersionFilter)(nil)).Elem()
}

func (o GetDatabaseVersionFilterOutput) ToGetDatabaseVersionFilterOutput() GetDatabaseVersionFilterOutput {
	return o
}

func (o GetDatabaseVersionFilterOutput) ToGetDatabaseVersionFilterOutputWithContext(ctx context.Context) GetDatabaseVersionFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
func (o GetDatabaseVersionFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDatabaseVersionFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter versions by this key. This may be one of `default`, `engine`, `version`.
func (o GetDatabaseVersionFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseVersionFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
func (o GetDatabaseVersionFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatabaseVersionFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves `versions` which keys has value that matches one of the values provided here
func (o GetDatabaseVersionFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabaseVersionFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetDatabaseVersionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseVersionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseVersionFilter)(nil)).Elem()
}

func (o GetDatabaseVersionFilterArrayOutput) ToGetDatabaseVersionFilterArrayOutput() GetDatabaseVersionFilterArrayOutput {
	return o
}

func (o GetDatabaseVersionFilterArrayOutput) ToGetDatabaseVersionFilterArrayOutputWithContext(ctx context.Context) GetDatabaseVersionFilterArrayOutput {
	return o
}

func (o GetDatabaseVersionFilterArrayOutput) Index(i pulumi.IntInput) GetDatabaseVersionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseVersionFilter {
		return vs[0].([]GetDatabaseVersionFilter)[vs[1].(int)]
	}).(GetDatabaseVersionFilterOutput)
}

type GetDatabaseVersionSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort versions by this key. This may be one of `default`, `engine`, `version`.
	Key string `pulumi:"key"`
}

// GetDatabaseVersionSortInput is an input type that accepts GetDatabaseVersionSortArgs and GetDatabaseVersionSortOutput values.
// You can construct a concrete instance of `GetDatabaseVersionSortInput` via:
//
//	GetDatabaseVersionSortArgs{...}
type GetDatabaseVersionSortInput interface {
	pulumi.Input

	ToGetDatabaseVersionSortOutput() GetDatabaseVersionSortOutput
	ToGetDatabaseVersionSortOutputWithContext(context.Context) GetDatabaseVersionSortOutput
}

type GetDatabaseVersionSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort versions by this key. This may be one of `default`, `engine`, `version`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetDatabaseVersionSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseVersionSort)(nil)).Elem()
}

func (i GetDatabaseVersionSortArgs) ToGetDatabaseVersionSortOutput() GetDatabaseVersionSortOutput {
	return i.ToGetDatabaseVersionSortOutputWithContext(context.Background())
}

func (i GetDatabaseVersionSortArgs) ToGetDatabaseVersionSortOutputWithContext(ctx context.Context) GetDatabaseVersionSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseVersionSortOutput)
}

// GetDatabaseVersionSortArrayInput is an input type that accepts GetDatabaseVersionSortArray and GetDatabaseVersionSortArrayOutput values.
// You can construct a concrete instance of `GetDatabaseVersionSortArrayInput` via:
//
//	GetDatabaseVersionSortArray{ GetDatabaseVersionSortArgs{...} }
type GetDatabaseVersionSortArrayInput interface {
	pulumi.Input

	ToGetDatabaseVersionSortArrayOutput() GetDatabaseVersionSortArrayOutput
	ToGetDatabaseVersionSortArrayOutputWithContext(context.Context) GetDatabaseVersionSortArrayOutput
}

type GetDatabaseVersionSortArray []GetDatabaseVersionSortInput

func (GetDatabaseVersionSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseVersionSort)(nil)).Elem()
}

func (i GetDatabaseVersionSortArray) ToGetDatabaseVersionSortArrayOutput() GetDatabaseVersionSortArrayOutput {
	return i.ToGetDatabaseVersionSortArrayOutputWithContext(context.Background())
}

func (i GetDatabaseVersionSortArray) ToGetDatabaseVersionSortArrayOutputWithContext(ctx context.Context) GetDatabaseVersionSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseVersionSortArrayOutput)
}

type GetDatabaseVersionSortOutput struct{ *pulumi.OutputState }

func (GetDatabaseVersionSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseVersionSort)(nil)).Elem()
}

func (o GetDatabaseVersionSortOutput) ToGetDatabaseVersionSortOutput() GetDatabaseVersionSortOutput {
	return o
}

func (o GetDatabaseVersionSortOutput) ToGetDatabaseVersionSortOutputWithContext(ctx context.Context) GetDatabaseVersionSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetDatabaseVersionSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatabaseVersionSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort versions by this key. This may be one of `default`, `engine`, `version`.
func (o GetDatabaseVersionSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseVersionSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetDatabaseVersionSortArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseVersionSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseVersionSort)(nil)).Elem()
}

func (o GetDatabaseVersionSortArrayOutput) ToGetDatabaseVersionSortArrayOutput() GetDatabaseVersionSortArrayOutput {
	return o
}

func (o GetDatabaseVersionSortArrayOutput) ToGetDatabaseVersionSortArrayOutputWithContext(ctx context.Context) GetDatabaseVersionSortArrayOutput {
	return o
}

func (o GetDatabaseVersionSortArrayOutput) Index(i pulumi.IntInput) GetDatabaseVersionSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseVersionSort {
		return vs[0].([]GetDatabaseVersionSort)[vs[1].(int)]
	}).(GetDatabaseVersionSortOutput)
}

type GetDatabaseVersionVersion struct {
	// If the version is the default
	Default bool `pulumi:"default"`
	// The engine of the database
	Engine string `pulumi:"engine"`
	// The version of the database
	Version string `pulumi:"version"`
}

// GetDatabaseVersionVersionInput is an input type that accepts GetDatabaseVersionVersionArgs and GetDatabaseVersionVersionOutput values.
// You can construct a concrete instance of `GetDatabaseVersionVersionInput` via:
//
//	GetDatabaseVersionVersionArgs{...}
type GetDatabaseVersionVersionInput interface {
	pulumi.Input

	ToGetDatabaseVersionVersionOutput() GetDatabaseVersionVersionOutput
	ToGetDatabaseVersionVersionOutputWithContext(context.Context) GetDatabaseVersionVersionOutput
}

type GetDatabaseVersionVersionArgs struct {
	// If the version is the default
	Default pulumi.BoolInput `pulumi:"default"`
	// The engine of the database
	Engine pulumi.StringInput `pulumi:"engine"`
	// The version of the database
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetDatabaseVersionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseVersionVersion)(nil)).Elem()
}

func (i GetDatabaseVersionVersionArgs) ToGetDatabaseVersionVersionOutput() GetDatabaseVersionVersionOutput {
	return i.ToGetDatabaseVersionVersionOutputWithContext(context.Background())
}

func (i GetDatabaseVersionVersionArgs) ToGetDatabaseVersionVersionOutputWithContext(ctx context.Context) GetDatabaseVersionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseVersionVersionOutput)
}

// GetDatabaseVersionVersionArrayInput is an input type that accepts GetDatabaseVersionVersionArray and GetDatabaseVersionVersionArrayOutput values.
// You can construct a concrete instance of `GetDatabaseVersionVersionArrayInput` via:
//
//	GetDatabaseVersionVersionArray{ GetDatabaseVersionVersionArgs{...} }
type GetDatabaseVersionVersionArrayInput interface {
	pulumi.Input

	ToGetDatabaseVersionVersionArrayOutput() GetDatabaseVersionVersionArrayOutput
	ToGetDatabaseVersionVersionArrayOutputWithContext(context.Context) GetDatabaseVersionVersionArrayOutput
}

type GetDatabaseVersionVersionArray []GetDatabaseVersionVersionInput

func (GetDatabaseVersionVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseVersionVersion)(nil)).Elem()
}

func (i GetDatabaseVersionVersionArray) ToGetDatabaseVersionVersionArrayOutput() GetDatabaseVersionVersionArrayOutput {
	return i.ToGetDatabaseVersionVersionArrayOutputWithContext(context.Background())
}

func (i GetDatabaseVersionVersionArray) ToGetDatabaseVersionVersionArrayOutputWithContext(ctx context.Context) GetDatabaseVersionVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseVersionVersionArrayOutput)
}

type GetDatabaseVersionVersionOutput struct{ *pulumi.OutputState }

func (GetDatabaseVersionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseVersionVersion)(nil)).Elem()
}

func (o GetDatabaseVersionVersionOutput) ToGetDatabaseVersionVersionOutput() GetDatabaseVersionVersionOutput {
	return o
}

func (o GetDatabaseVersionVersionOutput) ToGetDatabaseVersionVersionOutputWithContext(ctx context.Context) GetDatabaseVersionVersionOutput {
	return o
}

// If the version is the default
func (o GetDatabaseVersionVersionOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabaseVersionVersion) bool { return v.Default }).(pulumi.BoolOutput)
}

// The engine of the database
func (o GetDatabaseVersionVersionOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseVersionVersion) string { return v.Engine }).(pulumi.StringOutput)
}

// The version of the database
func (o GetDatabaseVersionVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseVersionVersion) string { return v.Version }).(pulumi.StringOutput)
}

type GetDatabaseVersionVersionArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseVersionVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseVersionVersion)(nil)).Elem()
}

func (o GetDatabaseVersionVersionArrayOutput) ToGetDatabaseVersionVersionArrayOutput() GetDatabaseVersionVersionArrayOutput {
	return o
}

func (o GetDatabaseVersionVersionArrayOutput) ToGetDatabaseVersionVersionArrayOutputWithContext(ctx context.Context) GetDatabaseVersionVersionArrayOutput {
	return o
}

func (o GetDatabaseVersionVersionArrayOutput) Index(i pulumi.IntInput) GetDatabaseVersionVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseVersionVersion {
		return vs[0].([]GetDatabaseVersionVersion)[vs[1].(int)]
	}).(GetDatabaseVersionVersionOutput)
}

type GetDiskImageDiskimage struct {
	// ID of disk image
	Id string `pulumi:"id"`
	// Label of disk image
	Label string `pulumi:"label"`
	// Name of disk image
	Name string `pulumi:"name"`
	// Version of disk image
	Version string `pulumi:"version"`
}

// GetDiskImageDiskimageInput is an input type that accepts GetDiskImageDiskimageArgs and GetDiskImageDiskimageOutput values.
// You can construct a concrete instance of `GetDiskImageDiskimageInput` via:
//
//	GetDiskImageDiskimageArgs{...}
type GetDiskImageDiskimageInput interface {
	pulumi.Input

	ToGetDiskImageDiskimageOutput() GetDiskImageDiskimageOutput
	ToGetDiskImageDiskimageOutputWithContext(context.Context) GetDiskImageDiskimageOutput
}

type GetDiskImageDiskimageArgs struct {
	// ID of disk image
	Id pulumi.StringInput `pulumi:"id"`
	// Label of disk image
	Label pulumi.StringInput `pulumi:"label"`
	// Name of disk image
	Name pulumi.StringInput `pulumi:"name"`
	// Version of disk image
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetDiskImageDiskimageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskImageDiskimage)(nil)).Elem()
}

func (i GetDiskImageDiskimageArgs) ToGetDiskImageDiskimageOutput() GetDiskImageDiskimageOutput {
	return i.ToGetDiskImageDiskimageOutputWithContext(context.Background())
}

func (i GetDiskImageDiskimageArgs) ToGetDiskImageDiskimageOutputWithContext(ctx context.Context) GetDiskImageDiskimageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDiskImageDiskimageOutput)
}

// GetDiskImageDiskimageArrayInput is an input type that accepts GetDiskImageDiskimageArray and GetDiskImageDiskimageArrayOutput values.
// You can construct a concrete instance of `GetDiskImageDiskimageArrayInput` via:
//
//	GetDiskImageDiskimageArray{ GetDiskImageDiskimageArgs{...} }
type GetDiskImageDiskimageArrayInput interface {
	pulumi.Input

	ToGetDiskImageDiskimageArrayOutput() GetDiskImageDiskimageArrayOutput
	ToGetDiskImageDiskimageArrayOutputWithContext(context.Context) GetDiskImageDiskimageArrayOutput
}

type GetDiskImageDiskimageArray []GetDiskImageDiskimageInput

func (GetDiskImageDiskimageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDiskImageDiskimage)(nil)).Elem()
}

func (i GetDiskImageDiskimageArray) ToGetDiskImageDiskimageArrayOutput() GetDiskImageDiskimageArrayOutput {
	return i.ToGetDiskImageDiskimageArrayOutputWithContext(context.Background())
}

func (i GetDiskImageDiskimageArray) ToGetDiskImageDiskimageArrayOutputWithContext(ctx context.Context) GetDiskImageDiskimageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDiskImageDiskimageArrayOutput)
}

type GetDiskImageDiskimageOutput struct{ *pulumi.OutputState }

func (GetDiskImageDiskimageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskImageDiskimage)(nil)).Elem()
}

func (o GetDiskImageDiskimageOutput) ToGetDiskImageDiskimageOutput() GetDiskImageDiskimageOutput {
	return o
}

func (o GetDiskImageDiskimageOutput) ToGetDiskImageDiskimageOutputWithContext(ctx context.Context) GetDiskImageDiskimageOutput {
	return o
}

// ID of disk image
func (o GetDiskImageDiskimageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskImageDiskimage) string { return v.Id }).(pulumi.StringOutput)
}

// Label of disk image
func (o GetDiskImageDiskimageOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskImageDiskimage) string { return v.Label }).(pulumi.StringOutput)
}

// Name of disk image
func (o GetDiskImageDiskimageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskImageDiskimage) string { return v.Name }).(pulumi.StringOutput)
}

// Version of disk image
func (o GetDiskImageDiskimageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskImageDiskimage) string { return v.Version }).(pulumi.StringOutput)
}

type GetDiskImageDiskimageArrayOutput struct{ *pulumi.OutputState }

func (GetDiskImageDiskimageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDiskImageDiskimage)(nil)).Elem()
}

func (o GetDiskImageDiskimageArrayOutput) ToGetDiskImageDiskimageArrayOutput() GetDiskImageDiskimageArrayOutput {
	return o
}

func (o GetDiskImageDiskimageArrayOutput) ToGetDiskImageDiskimageArrayOutputWithContext(ctx context.Context) GetDiskImageDiskimageArrayOutput {
	return o
}

func (o GetDiskImageDiskimageArrayOutput) Index(i pulumi.IntInput) GetDiskImageDiskimageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDiskImageDiskimage {
		return vs[0].([]GetDiskImageDiskimage)[vs[1].(int)]
	}).(GetDiskImageDiskimageOutput)
}

type GetDiskImageFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves `diskimages` which keys has value that matches one of the values provided here
	Values []string `pulumi:"values"`
}

// GetDiskImageFilterInput is an input type that accepts GetDiskImageFilterArgs and GetDiskImageFilterOutput values.
// You can construct a concrete instance of `GetDiskImageFilterInput` via:
//
//	GetDiskImageFilterArgs{...}
type GetDiskImageFilterInput interface {
	pulumi.Input

	ToGetDiskImageFilterOutput() GetDiskImageFilterOutput
	ToGetDiskImageFilterOutputWithContext(context.Context) GetDiskImageFilterOutput
}

type GetDiskImageFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves `diskimages` which keys has value that matches one of the values provided here
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetDiskImageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskImageFilter)(nil)).Elem()
}

func (i GetDiskImageFilterArgs) ToGetDiskImageFilterOutput() GetDiskImageFilterOutput {
	return i.ToGetDiskImageFilterOutputWithContext(context.Background())
}

func (i GetDiskImageFilterArgs) ToGetDiskImageFilterOutputWithContext(ctx context.Context) GetDiskImageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDiskImageFilterOutput)
}

// GetDiskImageFilterArrayInput is an input type that accepts GetDiskImageFilterArray and GetDiskImageFilterArrayOutput values.
// You can construct a concrete instance of `GetDiskImageFilterArrayInput` via:
//
//	GetDiskImageFilterArray{ GetDiskImageFilterArgs{...} }
type GetDiskImageFilterArrayInput interface {
	pulumi.Input

	ToGetDiskImageFilterArrayOutput() GetDiskImageFilterArrayOutput
	ToGetDiskImageFilterArrayOutputWithContext(context.Context) GetDiskImageFilterArrayOutput
}

type GetDiskImageFilterArray []GetDiskImageFilterInput

func (GetDiskImageFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDiskImageFilter)(nil)).Elem()
}

func (i GetDiskImageFilterArray) ToGetDiskImageFilterArrayOutput() GetDiskImageFilterArrayOutput {
	return i.ToGetDiskImageFilterArrayOutputWithContext(context.Background())
}

func (i GetDiskImageFilterArray) ToGetDiskImageFilterArrayOutputWithContext(ctx context.Context) GetDiskImageFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDiskImageFilterArrayOutput)
}

type GetDiskImageFilterOutput struct{ *pulumi.OutputState }

func (GetDiskImageFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskImageFilter)(nil)).Elem()
}

func (o GetDiskImageFilterOutput) ToGetDiskImageFilterOutput() GetDiskImageFilterOutput {
	return o
}

func (o GetDiskImageFilterOutput) ToGetDiskImageFilterOutputWithContext(ctx context.Context) GetDiskImageFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
func (o GetDiskImageFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDiskImageFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
func (o GetDiskImageFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskImageFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
func (o GetDiskImageFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDiskImageFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves `diskimages` which keys has value that matches one of the values provided here
func (o GetDiskImageFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDiskImageFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetDiskImageFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDiskImageFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDiskImageFilter)(nil)).Elem()
}

func (o GetDiskImageFilterArrayOutput) ToGetDiskImageFilterArrayOutput() GetDiskImageFilterArrayOutput {
	return o
}

func (o GetDiskImageFilterArrayOutput) ToGetDiskImageFilterArrayOutputWithContext(ctx context.Context) GetDiskImageFilterArrayOutput {
	return o
}

func (o GetDiskImageFilterArrayOutput) Index(i pulumi.IntInput) GetDiskImageFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDiskImageFilter {
		return vs[0].([]GetDiskImageFilter)[vs[1].(int)]
	}).(GetDiskImageFilterOutput)
}

type GetDiskImageSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
	Key string `pulumi:"key"`
}

// GetDiskImageSortInput is an input type that accepts GetDiskImageSortArgs and GetDiskImageSortOutput values.
// You can construct a concrete instance of `GetDiskImageSortInput` via:
//
//	GetDiskImageSortArgs{...}
type GetDiskImageSortInput interface {
	pulumi.Input

	ToGetDiskImageSortOutput() GetDiskImageSortOutput
	ToGetDiskImageSortOutputWithContext(context.Context) GetDiskImageSortOutput
}

type GetDiskImageSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetDiskImageSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskImageSort)(nil)).Elem()
}

func (i GetDiskImageSortArgs) ToGetDiskImageSortOutput() GetDiskImageSortOutput {
	return i.ToGetDiskImageSortOutputWithContext(context.Background())
}

func (i GetDiskImageSortArgs) ToGetDiskImageSortOutputWithContext(ctx context.Context) GetDiskImageSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDiskImageSortOutput)
}

// GetDiskImageSortArrayInput is an input type that accepts GetDiskImageSortArray and GetDiskImageSortArrayOutput values.
// You can construct a concrete instance of `GetDiskImageSortArrayInput` via:
//
//	GetDiskImageSortArray{ GetDiskImageSortArgs{...} }
type GetDiskImageSortArrayInput interface {
	pulumi.Input

	ToGetDiskImageSortArrayOutput() GetDiskImageSortArrayOutput
	ToGetDiskImageSortArrayOutputWithContext(context.Context) GetDiskImageSortArrayOutput
}

type GetDiskImageSortArray []GetDiskImageSortInput

func (GetDiskImageSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDiskImageSort)(nil)).Elem()
}

func (i GetDiskImageSortArray) ToGetDiskImageSortArrayOutput() GetDiskImageSortArrayOutput {
	return i.ToGetDiskImageSortArrayOutputWithContext(context.Background())
}

func (i GetDiskImageSortArray) ToGetDiskImageSortArrayOutputWithContext(ctx context.Context) GetDiskImageSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDiskImageSortArrayOutput)
}

type GetDiskImageSortOutput struct{ *pulumi.OutputState }

func (GetDiskImageSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskImageSort)(nil)).Elem()
}

func (o GetDiskImageSortOutput) ToGetDiskImageSortOutput() GetDiskImageSortOutput {
	return o
}

func (o GetDiskImageSortOutput) ToGetDiskImageSortOutputWithContext(ctx context.Context) GetDiskImageSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetDiskImageSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDiskImageSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
func (o GetDiskImageSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskImageSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetDiskImageSortArrayOutput struct{ *pulumi.OutputState }

func (GetDiskImageSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDiskImageSort)(nil)).Elem()
}

func (o GetDiskImageSortArrayOutput) ToGetDiskImageSortArrayOutput() GetDiskImageSortArrayOutput {
	return o
}

func (o GetDiskImageSortArrayOutput) ToGetDiskImageSortArrayOutputWithContext(ctx context.Context) GetDiskImageSortArrayOutput {
	return o
}

func (o GetDiskImageSortArrayOutput) Index(i pulumi.IntInput) GetDiskImageSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDiskImageSort {
		return vs[0].([]GetDiskImageSort)[vs[1].(int)]
	}).(GetDiskImageSortOutput)
}

type GetInstancesFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `tags`, `template`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves `instances` which keys has value that matches one of the values provided here
	Values []string `pulumi:"values"`
}

// GetInstancesFilterInput is an input type that accepts GetInstancesFilterArgs and GetInstancesFilterOutput values.
// You can construct a concrete instance of `GetInstancesFilterInput` via:
//
//	GetInstancesFilterArgs{...}
type GetInstancesFilterInput interface {
	pulumi.Input

	ToGetInstancesFilterOutput() GetInstancesFilterOutput
	ToGetInstancesFilterOutputWithContext(context.Context) GetInstancesFilterOutput
}

type GetInstancesFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `tags`, `template`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves `instances` which keys has value that matches one of the values provided here
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetInstancesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesFilter)(nil)).Elem()
}

func (i GetInstancesFilterArgs) ToGetInstancesFilterOutput() GetInstancesFilterOutput {
	return i.ToGetInstancesFilterOutputWithContext(context.Background())
}

func (i GetInstancesFilterArgs) ToGetInstancesFilterOutputWithContext(ctx context.Context) GetInstancesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesFilterOutput)
}

// GetInstancesFilterArrayInput is an input type that accepts GetInstancesFilterArray and GetInstancesFilterArrayOutput values.
// You can construct a concrete instance of `GetInstancesFilterArrayInput` via:
//
//	GetInstancesFilterArray{ GetInstancesFilterArgs{...} }
type GetInstancesFilterArrayInput interface {
	pulumi.Input

	ToGetInstancesFilterArrayOutput() GetInstancesFilterArrayOutput
	ToGetInstancesFilterArrayOutputWithContext(context.Context) GetInstancesFilterArrayOutput
}

type GetInstancesFilterArray []GetInstancesFilterInput

func (GetInstancesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesFilter)(nil)).Elem()
}

func (i GetInstancesFilterArray) ToGetInstancesFilterArrayOutput() GetInstancesFilterArrayOutput {
	return i.ToGetInstancesFilterArrayOutputWithContext(context.Background())
}

func (i GetInstancesFilterArray) ToGetInstancesFilterArrayOutputWithContext(ctx context.Context) GetInstancesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesFilterArrayOutput)
}

type GetInstancesFilterOutput struct{ *pulumi.OutputState }

func (GetInstancesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesFilter)(nil)).Elem()
}

func (o GetInstancesFilterOutput) ToGetInstancesFilterOutput() GetInstancesFilterOutput {
	return o
}

func (o GetInstancesFilterOutput) ToGetInstancesFilterOutputWithContext(ctx context.Context) GetInstancesFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
func (o GetInstancesFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetInstancesFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `tags`, `template`.
func (o GetInstancesFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
func (o GetInstancesFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves `instances` which keys has value that matches one of the values provided here
func (o GetInstancesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetInstancesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesFilter)(nil)).Elem()
}

func (o GetInstancesFilterArrayOutput) ToGetInstancesFilterArrayOutput() GetInstancesFilterArrayOutput {
	return o
}

func (o GetInstancesFilterArrayOutput) ToGetInstancesFilterArrayOutputWithContext(ctx context.Context) GetInstancesFilterArrayOutput {
	return o
}

func (o GetInstancesFilterArrayOutput) Index(i pulumi.IntInput) GetInstancesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesFilter {
		return vs[0].([]GetInstancesFilter)[vs[1].(int)]
	}).(GetInstancesFilterOutput)
}

type GetInstancesInstance struct {
	// CPU of the instance
	CpuCores int `pulumi:"cpuCores"`
	// Creation date of the instance
	CreatedAt string `pulumi:"createdAt"`
	// SSD size of the instance
	DiskGb int `pulumi:"diskGb"`
	// Firewall ID of the instance
	FirewallId string `pulumi:"firewallId"`
	// Hostname of the instance
	Hostname string `pulumi:"hostname"`
	// ID of the instance
	Id string `pulumi:"id"`
	// Initial password of the instance
	InitialPassword string `pulumi:"initialPassword"`
	// Initial user of the instance
	InitialUser string `pulumi:"initialUser"`
	// Network id of the instance
	NetworkId string `pulumi:"networkId"`
	// Note of the instance
	Notes string `pulumi:"notes"`
	// Private IP of the instance
	PrivateIp string `pulumi:"privateIp"`
	// Pseudo IP of the instance
	PseudoIp string `pulumi:"pseudoIp"`
	// Public IP of the instance
	PublicIp string `pulumi:"publicIp"`
	// RAM of the instance
	RamMb int `pulumi:"ramMb"`
	// Region of the instance
	Region string `pulumi:"region"`
	// Reverse DNS of the instance
	ReverseDns string `pulumi:"reverseDns"`
	// Script of the instance
	Script string `pulumi:"script"`
	// Size of the instance
	Size string `pulumi:"size"`
	// SSH key id of the instance
	SshkeyId string `pulumi:"sshkeyId"`
	// Status of the instance
	Status string `pulumi:"status"`
	// Tags of the instance
	Tags []string `pulumi:"tags"`
	// Disk image/template of the instance
	Template string `pulumi:"template"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// CPU of the instance
	CpuCores pulumi.IntInput `pulumi:"cpuCores"`
	// Creation date of the instance
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// SSD size of the instance
	DiskGb pulumi.IntInput `pulumi:"diskGb"`
	// Firewall ID of the instance
	FirewallId pulumi.StringInput `pulumi:"firewallId"`
	// Hostname of the instance
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// ID of the instance
	Id pulumi.StringInput `pulumi:"id"`
	// Initial password of the instance
	InitialPassword pulumi.StringInput `pulumi:"initialPassword"`
	// Initial user of the instance
	InitialUser pulumi.StringInput `pulumi:"initialUser"`
	// Network id of the instance
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// Note of the instance
	Notes pulumi.StringInput `pulumi:"notes"`
	// Private IP of the instance
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// Pseudo IP of the instance
	PseudoIp pulumi.StringInput `pulumi:"pseudoIp"`
	// Public IP of the instance
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// RAM of the instance
	RamMb pulumi.IntInput `pulumi:"ramMb"`
	// Region of the instance
	Region pulumi.StringInput `pulumi:"region"`
	// Reverse DNS of the instance
	ReverseDns pulumi.StringInput `pulumi:"reverseDns"`
	// Script of the instance
	Script pulumi.StringInput `pulumi:"script"`
	// Size of the instance
	Size pulumi.StringInput `pulumi:"size"`
	// SSH key id of the instance
	SshkeyId pulumi.StringInput `pulumi:"sshkeyId"`
	// Status of the instance
	Status pulumi.StringInput `pulumi:"status"`
	// Tags of the instance
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Disk image/template of the instance
	Template pulumi.StringInput `pulumi:"template"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// CPU of the instance
func (o GetInstancesInstanceOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.CpuCores }).(pulumi.IntOutput)
}

// Creation date of the instance
func (o GetInstancesInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// SSD size of the instance
func (o GetInstancesInstanceOutput) DiskGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.DiskGb }).(pulumi.IntOutput)
}

// Firewall ID of the instance
func (o GetInstancesInstanceOutput) FirewallId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.FirewallId }).(pulumi.StringOutput)
}

// Hostname of the instance
func (o GetInstancesInstanceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Hostname }).(pulumi.StringOutput)
}

// ID of the instance
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// Initial password of the instance
func (o GetInstancesInstanceOutput) InitialPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InitialPassword }).(pulumi.StringOutput)
}

// Initial user of the instance
func (o GetInstancesInstanceOutput) InitialUser() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InitialUser }).(pulumi.StringOutput)
}

// Network id of the instance
func (o GetInstancesInstanceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Note of the instance
func (o GetInstancesInstanceOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Notes }).(pulumi.StringOutput)
}

// Private IP of the instance
func (o GetInstancesInstanceOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// Pseudo IP of the instance
func (o GetInstancesInstanceOutput) PseudoIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PseudoIp }).(pulumi.StringOutput)
}

// Public IP of the instance
func (o GetInstancesInstanceOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PublicIp }).(pulumi.StringOutput)
}

// RAM of the instance
func (o GetInstancesInstanceOutput) RamMb() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.RamMb }).(pulumi.IntOutput)
}

// Region of the instance
func (o GetInstancesInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Region }).(pulumi.StringOutput)
}

// Reverse DNS of the instance
func (o GetInstancesInstanceOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ReverseDns }).(pulumi.StringOutput)
}

// Script of the instance
func (o GetInstancesInstanceOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Script }).(pulumi.StringOutput)
}

// Size of the instance
func (o GetInstancesInstanceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Size }).(pulumi.StringOutput)
}

// SSH key id of the instance
func (o GetInstancesInstanceOutput) SshkeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SshkeyId }).(pulumi.StringOutput)
}

// Status of the instance
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// Tags of the instance
func (o GetInstancesInstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Disk image/template of the instance
func (o GetInstancesInstanceOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Template }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetInstancesSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `template`.
	Key string `pulumi:"key"`
}

// GetInstancesSortInput is an input type that accepts GetInstancesSortArgs and GetInstancesSortOutput values.
// You can construct a concrete instance of `GetInstancesSortInput` via:
//
//	GetInstancesSortArgs{...}
type GetInstancesSortInput interface {
	pulumi.Input

	ToGetInstancesSortOutput() GetInstancesSortOutput
	ToGetInstancesSortOutputWithContext(context.Context) GetInstancesSortOutput
}

type GetInstancesSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `template`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetInstancesSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesSort)(nil)).Elem()
}

func (i GetInstancesSortArgs) ToGetInstancesSortOutput() GetInstancesSortOutput {
	return i.ToGetInstancesSortOutputWithContext(context.Background())
}

func (i GetInstancesSortArgs) ToGetInstancesSortOutputWithContext(ctx context.Context) GetInstancesSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesSortOutput)
}

// GetInstancesSortArrayInput is an input type that accepts GetInstancesSortArray and GetInstancesSortArrayOutput values.
// You can construct a concrete instance of `GetInstancesSortArrayInput` via:
//
//	GetInstancesSortArray{ GetInstancesSortArgs{...} }
type GetInstancesSortArrayInput interface {
	pulumi.Input

	ToGetInstancesSortArrayOutput() GetInstancesSortArrayOutput
	ToGetInstancesSortArrayOutputWithContext(context.Context) GetInstancesSortArrayOutput
}

type GetInstancesSortArray []GetInstancesSortInput

func (GetInstancesSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesSort)(nil)).Elem()
}

func (i GetInstancesSortArray) ToGetInstancesSortArrayOutput() GetInstancesSortArrayOutput {
	return i.ToGetInstancesSortArrayOutputWithContext(context.Background())
}

func (i GetInstancesSortArray) ToGetInstancesSortArrayOutputWithContext(ctx context.Context) GetInstancesSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesSortArrayOutput)
}

type GetInstancesSortOutput struct{ *pulumi.OutputState }

func (GetInstancesSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesSort)(nil)).Elem()
}

func (o GetInstancesSortOutput) ToGetInstancesSortOutput() GetInstancesSortOutput {
	return o
}

func (o GetInstancesSortOutput) ToGetInstancesSortOutputWithContext(ctx context.Context) GetInstancesSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetInstancesSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort instances by this key. This may be one of `cpuCores`, `createdAt`, `diskGb`, `firewallId`, `hostname`, `id`, `initialPassword`, `initialUser`, `networkId`, `notes`, `privateIp`, `pseudoIp`, `publicIp`, `ramMb`, `region`, `reverseDns`, `script`, `size`, `sshkeyId`, `status`, `template`.
func (o GetInstancesSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetInstancesSortArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesSort)(nil)).Elem()
}

func (o GetInstancesSortArrayOutput) ToGetInstancesSortArrayOutput() GetInstancesSortArrayOutput {
	return o
}

func (o GetInstancesSortArrayOutput) ToGetInstancesSortArrayOutputWithContext(ctx context.Context) GetInstancesSortArrayOutput {
	return o
}

func (o GetInstancesSortArrayOutput) Index(i pulumi.IntInput) GetInstancesSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesSort {
		return vs[0].([]GetInstancesSort)[vs[1].(int)]
	}).(GetInstancesSortOutput)
}

type GetKubernetesClusterInstalledApplication struct {
	// The name of the application
	Application string `pulumi:"application"`
	// The category of the application
	Category string `pulumi:"category"`
	// If the application is installed, this will return `true`
	Installed bool `pulumi:"installed"`
	// The version of the application
	Version string `pulumi:"version"`
}

// GetKubernetesClusterInstalledApplicationInput is an input type that accepts GetKubernetesClusterInstalledApplicationArgs and GetKubernetesClusterInstalledApplicationOutput values.
// You can construct a concrete instance of `GetKubernetesClusterInstalledApplicationInput` via:
//
//	GetKubernetesClusterInstalledApplicationArgs{...}
type GetKubernetesClusterInstalledApplicationInput interface {
	pulumi.Input

	ToGetKubernetesClusterInstalledApplicationOutput() GetKubernetesClusterInstalledApplicationOutput
	ToGetKubernetesClusterInstalledApplicationOutputWithContext(context.Context) GetKubernetesClusterInstalledApplicationOutput
}

type GetKubernetesClusterInstalledApplicationArgs struct {
	// The name of the application
	Application pulumi.StringInput `pulumi:"application"`
	// The category of the application
	Category pulumi.StringInput `pulumi:"category"`
	// If the application is installed, this will return `true`
	Installed pulumi.BoolInput `pulumi:"installed"`
	// The version of the application
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetKubernetesClusterInstalledApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterInstalledApplication)(nil)).Elem()
}

func (i GetKubernetesClusterInstalledApplicationArgs) ToGetKubernetesClusterInstalledApplicationOutput() GetKubernetesClusterInstalledApplicationOutput {
	return i.ToGetKubernetesClusterInstalledApplicationOutputWithContext(context.Background())
}

func (i GetKubernetesClusterInstalledApplicationArgs) ToGetKubernetesClusterInstalledApplicationOutputWithContext(ctx context.Context) GetKubernetesClusterInstalledApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterInstalledApplicationOutput)
}

// GetKubernetesClusterInstalledApplicationArrayInput is an input type that accepts GetKubernetesClusterInstalledApplicationArray and GetKubernetesClusterInstalledApplicationArrayOutput values.
// You can construct a concrete instance of `GetKubernetesClusterInstalledApplicationArrayInput` via:
//
//	GetKubernetesClusterInstalledApplicationArray{ GetKubernetesClusterInstalledApplicationArgs{...} }
type GetKubernetesClusterInstalledApplicationArrayInput interface {
	pulumi.Input

	ToGetKubernetesClusterInstalledApplicationArrayOutput() GetKubernetesClusterInstalledApplicationArrayOutput
	ToGetKubernetesClusterInstalledApplicationArrayOutputWithContext(context.Context) GetKubernetesClusterInstalledApplicationArrayOutput
}

type GetKubernetesClusterInstalledApplicationArray []GetKubernetesClusterInstalledApplicationInput

func (GetKubernetesClusterInstalledApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterInstalledApplication)(nil)).Elem()
}

func (i GetKubernetesClusterInstalledApplicationArray) ToGetKubernetesClusterInstalledApplicationArrayOutput() GetKubernetesClusterInstalledApplicationArrayOutput {
	return i.ToGetKubernetesClusterInstalledApplicationArrayOutputWithContext(context.Background())
}

func (i GetKubernetesClusterInstalledApplicationArray) ToGetKubernetesClusterInstalledApplicationArrayOutputWithContext(ctx context.Context) GetKubernetesClusterInstalledApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterInstalledApplicationArrayOutput)
}

type GetKubernetesClusterInstalledApplicationOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterInstalledApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterInstalledApplication)(nil)).Elem()
}

func (o GetKubernetesClusterInstalledApplicationOutput) ToGetKubernetesClusterInstalledApplicationOutput() GetKubernetesClusterInstalledApplicationOutput {
	return o
}

func (o GetKubernetesClusterInstalledApplicationOutput) ToGetKubernetesClusterInstalledApplicationOutputWithContext(ctx context.Context) GetKubernetesClusterInstalledApplicationOutput {
	return o
}

// The name of the application
func (o GetKubernetesClusterInstalledApplicationOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterInstalledApplication) string { return v.Application }).(pulumi.StringOutput)
}

// The category of the application
func (o GetKubernetesClusterInstalledApplicationOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterInstalledApplication) string { return v.Category }).(pulumi.StringOutput)
}

// If the application is installed, this will return `true`
func (o GetKubernetesClusterInstalledApplicationOutput) Installed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKubernetesClusterInstalledApplication) bool { return v.Installed }).(pulumi.BoolOutput)
}

// The version of the application
func (o GetKubernetesClusterInstalledApplicationOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterInstalledApplication) string { return v.Version }).(pulumi.StringOutput)
}

type GetKubernetesClusterInstalledApplicationArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterInstalledApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterInstalledApplication)(nil)).Elem()
}

func (o GetKubernetesClusterInstalledApplicationArrayOutput) ToGetKubernetesClusterInstalledApplicationArrayOutput() GetKubernetesClusterInstalledApplicationArrayOutput {
	return o
}

func (o GetKubernetesClusterInstalledApplicationArrayOutput) ToGetKubernetesClusterInstalledApplicationArrayOutputWithContext(ctx context.Context) GetKubernetesClusterInstalledApplicationArrayOutput {
	return o
}

func (o GetKubernetesClusterInstalledApplicationArrayOutput) Index(i pulumi.IntInput) GetKubernetesClusterInstalledApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesClusterInstalledApplication {
		return vs[0].([]GetKubernetesClusterInstalledApplication)[vs[1].(int)]
	}).(GetKubernetesClusterInstalledApplicationOutput)
}

type GetKubernetesClusterPool struct {
	// Instance names in the nodepool
	InstanceNames []string `pulumi:"instanceNames"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  string            `pulumi:"label"`
	Labels map[string]string `pulumi:"labels"`
	// Number of nodes in the nodepool
	NodeCount int `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool bool `pulumi:"publicIpNodePool"`
	// Size of the nodes in the nodepool
	Size   string                          `pulumi:"size"`
	Taints []GetKubernetesClusterPoolTaint `pulumi:"taints"`
}

// GetKubernetesClusterPoolInput is an input type that accepts GetKubernetesClusterPoolArgs and GetKubernetesClusterPoolOutput values.
// You can construct a concrete instance of `GetKubernetesClusterPoolInput` via:
//
//	GetKubernetesClusterPoolArgs{...}
type GetKubernetesClusterPoolInput interface {
	pulumi.Input

	ToGetKubernetesClusterPoolOutput() GetKubernetesClusterPoolOutput
	ToGetKubernetesClusterPoolOutputWithContext(context.Context) GetKubernetesClusterPoolOutput
}

type GetKubernetesClusterPoolArgs struct {
	// Instance names in the nodepool
	InstanceNames pulumi.StringArrayInput `pulumi:"instanceNames"`
	// Node pool label, if you don't provide one, we will generate one for you
	Label  pulumi.StringInput    `pulumi:"label"`
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Number of nodes in the nodepool
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
	// Node pool belongs to the public ip node pool
	PublicIpNodePool pulumi.BoolInput `pulumi:"publicIpNodePool"`
	// Size of the nodes in the nodepool
	Size   pulumi.StringInput                      `pulumi:"size"`
	Taints GetKubernetesClusterPoolTaintArrayInput `pulumi:"taints"`
}

func (GetKubernetesClusterPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterPool)(nil)).Elem()
}

func (i GetKubernetesClusterPoolArgs) ToGetKubernetesClusterPoolOutput() GetKubernetesClusterPoolOutput {
	return i.ToGetKubernetesClusterPoolOutputWithContext(context.Background())
}

func (i GetKubernetesClusterPoolArgs) ToGetKubernetesClusterPoolOutputWithContext(ctx context.Context) GetKubernetesClusterPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterPoolOutput)
}

// GetKubernetesClusterPoolArrayInput is an input type that accepts GetKubernetesClusterPoolArray and GetKubernetesClusterPoolArrayOutput values.
// You can construct a concrete instance of `GetKubernetesClusterPoolArrayInput` via:
//
//	GetKubernetesClusterPoolArray{ GetKubernetesClusterPoolArgs{...} }
type GetKubernetesClusterPoolArrayInput interface {
	pulumi.Input

	ToGetKubernetesClusterPoolArrayOutput() GetKubernetesClusterPoolArrayOutput
	ToGetKubernetesClusterPoolArrayOutputWithContext(context.Context) GetKubernetesClusterPoolArrayOutput
}

type GetKubernetesClusterPoolArray []GetKubernetesClusterPoolInput

func (GetKubernetesClusterPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterPool)(nil)).Elem()
}

func (i GetKubernetesClusterPoolArray) ToGetKubernetesClusterPoolArrayOutput() GetKubernetesClusterPoolArrayOutput {
	return i.ToGetKubernetesClusterPoolArrayOutputWithContext(context.Background())
}

func (i GetKubernetesClusterPoolArray) ToGetKubernetesClusterPoolArrayOutputWithContext(ctx context.Context) GetKubernetesClusterPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterPoolArrayOutput)
}

type GetKubernetesClusterPoolOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterPool)(nil)).Elem()
}

func (o GetKubernetesClusterPoolOutput) ToGetKubernetesClusterPoolOutput() GetKubernetesClusterPoolOutput {
	return o
}

func (o GetKubernetesClusterPoolOutput) ToGetKubernetesClusterPoolOutputWithContext(ctx context.Context) GetKubernetesClusterPoolOutput {
	return o
}

// Instance names in the nodepool
func (o GetKubernetesClusterPoolOutput) InstanceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) []string { return v.InstanceNames }).(pulumi.StringArrayOutput)
}

// Node pool label, if you don't provide one, we will generate one for you
func (o GetKubernetesClusterPoolOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetKubernetesClusterPoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Number of nodes in the nodepool
func (o GetKubernetesClusterPoolOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Node pool belongs to the public ip node pool
func (o GetKubernetesClusterPoolOutput) PublicIpNodePool() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) bool { return v.PublicIpNodePool }).(pulumi.BoolOutput)
}

// Size of the nodes in the nodepool
func (o GetKubernetesClusterPoolOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) string { return v.Size }).(pulumi.StringOutput)
}

func (o GetKubernetesClusterPoolOutput) Taints() GetKubernetesClusterPoolTaintArrayOutput {
	return o.ApplyT(func(v GetKubernetesClusterPool) []GetKubernetesClusterPoolTaint { return v.Taints }).(GetKubernetesClusterPoolTaintArrayOutput)
}

type GetKubernetesClusterPoolArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterPool)(nil)).Elem()
}

func (o GetKubernetesClusterPoolArrayOutput) ToGetKubernetesClusterPoolArrayOutput() GetKubernetesClusterPoolArrayOutput {
	return o
}

func (o GetKubernetesClusterPoolArrayOutput) ToGetKubernetesClusterPoolArrayOutputWithContext(ctx context.Context) GetKubernetesClusterPoolArrayOutput {
	return o
}

func (o GetKubernetesClusterPoolArrayOutput) Index(i pulumi.IntInput) GetKubernetesClusterPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesClusterPool {
		return vs[0].([]GetKubernetesClusterPool)[vs[1].(int)]
	}).(GetKubernetesClusterPoolOutput)
}

type GetKubernetesClusterPoolTaint struct {
	Effect string `pulumi:"effect"`
	Key    string `pulumi:"key"`
	Value  string `pulumi:"value"`
}

// GetKubernetesClusterPoolTaintInput is an input type that accepts GetKubernetesClusterPoolTaintArgs and GetKubernetesClusterPoolTaintOutput values.
// You can construct a concrete instance of `GetKubernetesClusterPoolTaintInput` via:
//
//	GetKubernetesClusterPoolTaintArgs{...}
type GetKubernetesClusterPoolTaintInput interface {
	pulumi.Input

	ToGetKubernetesClusterPoolTaintOutput() GetKubernetesClusterPoolTaintOutput
	ToGetKubernetesClusterPoolTaintOutputWithContext(context.Context) GetKubernetesClusterPoolTaintOutput
}

type GetKubernetesClusterPoolTaintArgs struct {
	Effect pulumi.StringInput `pulumi:"effect"`
	Key    pulumi.StringInput `pulumi:"key"`
	Value  pulumi.StringInput `pulumi:"value"`
}

func (GetKubernetesClusterPoolTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterPoolTaint)(nil)).Elem()
}

func (i GetKubernetesClusterPoolTaintArgs) ToGetKubernetesClusterPoolTaintOutput() GetKubernetesClusterPoolTaintOutput {
	return i.ToGetKubernetesClusterPoolTaintOutputWithContext(context.Background())
}

func (i GetKubernetesClusterPoolTaintArgs) ToGetKubernetesClusterPoolTaintOutputWithContext(ctx context.Context) GetKubernetesClusterPoolTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterPoolTaintOutput)
}

// GetKubernetesClusterPoolTaintArrayInput is an input type that accepts GetKubernetesClusterPoolTaintArray and GetKubernetesClusterPoolTaintArrayOutput values.
// You can construct a concrete instance of `GetKubernetesClusterPoolTaintArrayInput` via:
//
//	GetKubernetesClusterPoolTaintArray{ GetKubernetesClusterPoolTaintArgs{...} }
type GetKubernetesClusterPoolTaintArrayInput interface {
	pulumi.Input

	ToGetKubernetesClusterPoolTaintArrayOutput() GetKubernetesClusterPoolTaintArrayOutput
	ToGetKubernetesClusterPoolTaintArrayOutputWithContext(context.Context) GetKubernetesClusterPoolTaintArrayOutput
}

type GetKubernetesClusterPoolTaintArray []GetKubernetesClusterPoolTaintInput

func (GetKubernetesClusterPoolTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterPoolTaint)(nil)).Elem()
}

func (i GetKubernetesClusterPoolTaintArray) ToGetKubernetesClusterPoolTaintArrayOutput() GetKubernetesClusterPoolTaintArrayOutput {
	return i.ToGetKubernetesClusterPoolTaintArrayOutputWithContext(context.Background())
}

func (i GetKubernetesClusterPoolTaintArray) ToGetKubernetesClusterPoolTaintArrayOutputWithContext(ctx context.Context) GetKubernetesClusterPoolTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterPoolTaintArrayOutput)
}

type GetKubernetesClusterPoolTaintOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterPoolTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterPoolTaint)(nil)).Elem()
}

func (o GetKubernetesClusterPoolTaintOutput) ToGetKubernetesClusterPoolTaintOutput() GetKubernetesClusterPoolTaintOutput {
	return o
}

func (o GetKubernetesClusterPoolTaintOutput) ToGetKubernetesClusterPoolTaintOutputWithContext(ctx context.Context) GetKubernetesClusterPoolTaintOutput {
	return o
}

func (o GetKubernetesClusterPoolTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterPoolTaint) string { return v.Effect }).(pulumi.StringOutput)
}

func (o GetKubernetesClusterPoolTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterPoolTaint) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetKubernetesClusterPoolTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterPoolTaint) string { return v.Value }).(pulumi.StringOutput)
}

type GetKubernetesClusterPoolTaintArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterPoolTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterPoolTaint)(nil)).Elem()
}

func (o GetKubernetesClusterPoolTaintArrayOutput) ToGetKubernetesClusterPoolTaintArrayOutput() GetKubernetesClusterPoolTaintArrayOutput {
	return o
}

func (o GetKubernetesClusterPoolTaintArrayOutput) ToGetKubernetesClusterPoolTaintArrayOutputWithContext(ctx context.Context) GetKubernetesClusterPoolTaintArrayOutput {
	return o
}

func (o GetKubernetesClusterPoolTaintArrayOutput) Index(i pulumi.IntInput) GetKubernetesClusterPoolTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesClusterPoolTaint {
		return vs[0].([]GetKubernetesClusterPoolTaint)[vs[1].(int)]
	}).(GetKubernetesClusterPoolTaintOutput)
}

type GetKubernetesVersionFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter versions by this key. This may be one of `default`, `label`, `type`, `version`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves `versions` which keys has value that matches one of the values provided here
	Values []string `pulumi:"values"`
}

// GetKubernetesVersionFilterInput is an input type that accepts GetKubernetesVersionFilterArgs and GetKubernetesVersionFilterOutput values.
// You can construct a concrete instance of `GetKubernetesVersionFilterInput` via:
//
//	GetKubernetesVersionFilterArgs{...}
type GetKubernetesVersionFilterInput interface {
	pulumi.Input

	ToGetKubernetesVersionFilterOutput() GetKubernetesVersionFilterOutput
	ToGetKubernetesVersionFilterOutputWithContext(context.Context) GetKubernetesVersionFilterOutput
}

type GetKubernetesVersionFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter versions by this key. This may be one of `default`, `label`, `type`, `version`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves `versions` which keys has value that matches one of the values provided here
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetKubernetesVersionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesVersionFilter)(nil)).Elem()
}

func (i GetKubernetesVersionFilterArgs) ToGetKubernetesVersionFilterOutput() GetKubernetesVersionFilterOutput {
	return i.ToGetKubernetesVersionFilterOutputWithContext(context.Background())
}

func (i GetKubernetesVersionFilterArgs) ToGetKubernetesVersionFilterOutputWithContext(ctx context.Context) GetKubernetesVersionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesVersionFilterOutput)
}

// GetKubernetesVersionFilterArrayInput is an input type that accepts GetKubernetesVersionFilterArray and GetKubernetesVersionFilterArrayOutput values.
// You can construct a concrete instance of `GetKubernetesVersionFilterArrayInput` via:
//
//	GetKubernetesVersionFilterArray{ GetKubernetesVersionFilterArgs{...} }
type GetKubernetesVersionFilterArrayInput interface {
	pulumi.Input

	ToGetKubernetesVersionFilterArrayOutput() GetKubernetesVersionFilterArrayOutput
	ToGetKubernetesVersionFilterArrayOutputWithContext(context.Context) GetKubernetesVersionFilterArrayOutput
}

type GetKubernetesVersionFilterArray []GetKubernetesVersionFilterInput

func (GetKubernetesVersionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesVersionFilter)(nil)).Elem()
}

func (i GetKubernetesVersionFilterArray) ToGetKubernetesVersionFilterArrayOutput() GetKubernetesVersionFilterArrayOutput {
	return i.ToGetKubernetesVersionFilterArrayOutputWithContext(context.Background())
}

func (i GetKubernetesVersionFilterArray) ToGetKubernetesVersionFilterArrayOutputWithContext(ctx context.Context) GetKubernetesVersionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesVersionFilterArrayOutput)
}

type GetKubernetesVersionFilterOutput struct{ *pulumi.OutputState }

func (GetKubernetesVersionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesVersionFilter)(nil)).Elem()
}

func (o GetKubernetesVersionFilterOutput) ToGetKubernetesVersionFilterOutput() GetKubernetesVersionFilterOutput {
	return o
}

func (o GetKubernetesVersionFilterOutput) ToGetKubernetesVersionFilterOutputWithContext(ctx context.Context) GetKubernetesVersionFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
func (o GetKubernetesVersionFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetKubernetesVersionFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter versions by this key. This may be one of `default`, `label`, `type`, `version`.
func (o GetKubernetesVersionFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesVersionFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
func (o GetKubernetesVersionFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKubernetesVersionFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves `versions` which keys has value that matches one of the values provided here
func (o GetKubernetesVersionFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKubernetesVersionFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetKubernetesVersionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesVersionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesVersionFilter)(nil)).Elem()
}

func (o GetKubernetesVersionFilterArrayOutput) ToGetKubernetesVersionFilterArrayOutput() GetKubernetesVersionFilterArrayOutput {
	return o
}

func (o GetKubernetesVersionFilterArrayOutput) ToGetKubernetesVersionFilterArrayOutputWithContext(ctx context.Context) GetKubernetesVersionFilterArrayOutput {
	return o
}

func (o GetKubernetesVersionFilterArrayOutput) Index(i pulumi.IntInput) GetKubernetesVersionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesVersionFilter {
		return vs[0].([]GetKubernetesVersionFilter)[vs[1].(int)]
	}).(GetKubernetesVersionFilterOutput)
}

type GetKubernetesVersionSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort versions by this key. This may be one of `default`, `label`, `type`, `version`.
	Key string `pulumi:"key"`
}

// GetKubernetesVersionSortInput is an input type that accepts GetKubernetesVersionSortArgs and GetKubernetesVersionSortOutput values.
// You can construct a concrete instance of `GetKubernetesVersionSortInput` via:
//
//	GetKubernetesVersionSortArgs{...}
type GetKubernetesVersionSortInput interface {
	pulumi.Input

	ToGetKubernetesVersionSortOutput() GetKubernetesVersionSortOutput
	ToGetKubernetesVersionSortOutputWithContext(context.Context) GetKubernetesVersionSortOutput
}

type GetKubernetesVersionSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort versions by this key. This may be one of `default`, `label`, `type`, `version`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetKubernetesVersionSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesVersionSort)(nil)).Elem()
}

func (i GetKubernetesVersionSortArgs) ToGetKubernetesVersionSortOutput() GetKubernetesVersionSortOutput {
	return i.ToGetKubernetesVersionSortOutputWithContext(context.Background())
}

func (i GetKubernetesVersionSortArgs) ToGetKubernetesVersionSortOutputWithContext(ctx context.Context) GetKubernetesVersionSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesVersionSortOutput)
}

// GetKubernetesVersionSortArrayInput is an input type that accepts GetKubernetesVersionSortArray and GetKubernetesVersionSortArrayOutput values.
// You can construct a concrete instance of `GetKubernetesVersionSortArrayInput` via:
//
//	GetKubernetesVersionSortArray{ GetKubernetesVersionSortArgs{...} }
type GetKubernetesVersionSortArrayInput interface {
	pulumi.Input

	ToGetKubernetesVersionSortArrayOutput() GetKubernetesVersionSortArrayOutput
	ToGetKubernetesVersionSortArrayOutputWithContext(context.Context) GetKubernetesVersionSortArrayOutput
}

type GetKubernetesVersionSortArray []GetKubernetesVersionSortInput

func (GetKubernetesVersionSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesVersionSort)(nil)).Elem()
}

func (i GetKubernetesVersionSortArray) ToGetKubernetesVersionSortArrayOutput() GetKubernetesVersionSortArrayOutput {
	return i.ToGetKubernetesVersionSortArrayOutputWithContext(context.Background())
}

func (i GetKubernetesVersionSortArray) ToGetKubernetesVersionSortArrayOutputWithContext(ctx context.Context) GetKubernetesVersionSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesVersionSortArrayOutput)
}

type GetKubernetesVersionSortOutput struct{ *pulumi.OutputState }

func (GetKubernetesVersionSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesVersionSort)(nil)).Elem()
}

func (o GetKubernetesVersionSortOutput) ToGetKubernetesVersionSortOutput() GetKubernetesVersionSortOutput {
	return o
}

func (o GetKubernetesVersionSortOutput) ToGetKubernetesVersionSortOutputWithContext(ctx context.Context) GetKubernetesVersionSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetKubernetesVersionSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKubernetesVersionSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort versions by this key. This may be one of `default`, `label`, `type`, `version`.
func (o GetKubernetesVersionSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesVersionSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetKubernetesVersionSortArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesVersionSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesVersionSort)(nil)).Elem()
}

func (o GetKubernetesVersionSortArrayOutput) ToGetKubernetesVersionSortArrayOutput() GetKubernetesVersionSortArrayOutput {
	return o
}

func (o GetKubernetesVersionSortArrayOutput) ToGetKubernetesVersionSortArrayOutputWithContext(ctx context.Context) GetKubernetesVersionSortArrayOutput {
	return o
}

func (o GetKubernetesVersionSortArrayOutput) Index(i pulumi.IntInput) GetKubernetesVersionSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesVersionSort {
		return vs[0].([]GetKubernetesVersionSort)[vs[1].(int)]
	}).(GetKubernetesVersionSortOutput)
}

type GetKubernetesVersionVersion struct {
	// If is the default version used in all cluster, this will return `true`
	Default bool `pulumi:"default"`
	// The label of this version
	Label string `pulumi:"label"`
	// The type of the cluster, can be `talos` or `k3s`
	Type string `pulumi:"type"`
	// A version of the Kubernetes
	Version string `pulumi:"version"`
}

// GetKubernetesVersionVersionInput is an input type that accepts GetKubernetesVersionVersionArgs and GetKubernetesVersionVersionOutput values.
// You can construct a concrete instance of `GetKubernetesVersionVersionInput` via:
//
//	GetKubernetesVersionVersionArgs{...}
type GetKubernetesVersionVersionInput interface {
	pulumi.Input

	ToGetKubernetesVersionVersionOutput() GetKubernetesVersionVersionOutput
	ToGetKubernetesVersionVersionOutputWithContext(context.Context) GetKubernetesVersionVersionOutput
}

type GetKubernetesVersionVersionArgs struct {
	// If is the default version used in all cluster, this will return `true`
	Default pulumi.BoolInput `pulumi:"default"`
	// The label of this version
	Label pulumi.StringInput `pulumi:"label"`
	// The type of the cluster, can be `talos` or `k3s`
	Type pulumi.StringInput `pulumi:"type"`
	// A version of the Kubernetes
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetKubernetesVersionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesVersionVersion)(nil)).Elem()
}

func (i GetKubernetesVersionVersionArgs) ToGetKubernetesVersionVersionOutput() GetKubernetesVersionVersionOutput {
	return i.ToGetKubernetesVersionVersionOutputWithContext(context.Background())
}

func (i GetKubernetesVersionVersionArgs) ToGetKubernetesVersionVersionOutputWithContext(ctx context.Context) GetKubernetesVersionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesVersionVersionOutput)
}

// GetKubernetesVersionVersionArrayInput is an input type that accepts GetKubernetesVersionVersionArray and GetKubernetesVersionVersionArrayOutput values.
// You can construct a concrete instance of `GetKubernetesVersionVersionArrayInput` via:
//
//	GetKubernetesVersionVersionArray{ GetKubernetesVersionVersionArgs{...} }
type GetKubernetesVersionVersionArrayInput interface {
	pulumi.Input

	ToGetKubernetesVersionVersionArrayOutput() GetKubernetesVersionVersionArrayOutput
	ToGetKubernetesVersionVersionArrayOutputWithContext(context.Context) GetKubernetesVersionVersionArrayOutput
}

type GetKubernetesVersionVersionArray []GetKubernetesVersionVersionInput

func (GetKubernetesVersionVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesVersionVersion)(nil)).Elem()
}

func (i GetKubernetesVersionVersionArray) ToGetKubernetesVersionVersionArrayOutput() GetKubernetesVersionVersionArrayOutput {
	return i.ToGetKubernetesVersionVersionArrayOutputWithContext(context.Background())
}

func (i GetKubernetesVersionVersionArray) ToGetKubernetesVersionVersionArrayOutputWithContext(ctx context.Context) GetKubernetesVersionVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesVersionVersionArrayOutput)
}

type GetKubernetesVersionVersionOutput struct{ *pulumi.OutputState }

func (GetKubernetesVersionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesVersionVersion)(nil)).Elem()
}

func (o GetKubernetesVersionVersionOutput) ToGetKubernetesVersionVersionOutput() GetKubernetesVersionVersionOutput {
	return o
}

func (o GetKubernetesVersionVersionOutput) ToGetKubernetesVersionVersionOutputWithContext(ctx context.Context) GetKubernetesVersionVersionOutput {
	return o
}

// If is the default version used in all cluster, this will return `true`
func (o GetKubernetesVersionVersionOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKubernetesVersionVersion) bool { return v.Default }).(pulumi.BoolOutput)
}

// The label of this version
func (o GetKubernetesVersionVersionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesVersionVersion) string { return v.Label }).(pulumi.StringOutput)
}

// The type of the cluster, can be `talos` or `k3s`
func (o GetKubernetesVersionVersionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesVersionVersion) string { return v.Type }).(pulumi.StringOutput)
}

// A version of the Kubernetes
func (o GetKubernetesVersionVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesVersionVersion) string { return v.Version }).(pulumi.StringOutput)
}

type GetKubernetesVersionVersionArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesVersionVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesVersionVersion)(nil)).Elem()
}

func (o GetKubernetesVersionVersionArrayOutput) ToGetKubernetesVersionVersionArrayOutput() GetKubernetesVersionVersionArrayOutput {
	return o
}

func (o GetKubernetesVersionVersionArrayOutput) ToGetKubernetesVersionVersionArrayOutputWithContext(ctx context.Context) GetKubernetesVersionVersionArrayOutput {
	return o
}

func (o GetKubernetesVersionVersionArrayOutput) Index(i pulumi.IntInput) GetKubernetesVersionVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesVersionVersion {
		return vs[0].([]GetKubernetesVersionVersion)[vs[1].(int)]
	}).(GetKubernetesVersionVersionOutput)
}

type GetLoadBalancerBackend struct {
	// The health check port of the backend
	HealthCheckPort int `pulumi:"healthCheckPort"`
	// The ip of the backend
	Ip string `pulumi:"ip"`
	// The protocol of the backend
	Protocol string `pulumi:"protocol"`
	// The source port of the backend
	SourcePort int `pulumi:"sourcePort"`
	// The target port of the backend
	TargetPort int `pulumi:"targetPort"`
}

// GetLoadBalancerBackendInput is an input type that accepts GetLoadBalancerBackendArgs and GetLoadBalancerBackendOutput values.
// You can construct a concrete instance of `GetLoadBalancerBackendInput` via:
//
//	GetLoadBalancerBackendArgs{...}
type GetLoadBalancerBackendInput interface {
	pulumi.Input

	ToGetLoadBalancerBackendOutput() GetLoadBalancerBackendOutput
	ToGetLoadBalancerBackendOutputWithContext(context.Context) GetLoadBalancerBackendOutput
}

type GetLoadBalancerBackendArgs struct {
	// The health check port of the backend
	HealthCheckPort pulumi.IntInput `pulumi:"healthCheckPort"`
	// The ip of the backend
	Ip pulumi.StringInput `pulumi:"ip"`
	// The protocol of the backend
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The source port of the backend
	SourcePort pulumi.IntInput `pulumi:"sourcePort"`
	// The target port of the backend
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
}

func (GetLoadBalancerBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerBackend)(nil)).Elem()
}

func (i GetLoadBalancerBackendArgs) ToGetLoadBalancerBackendOutput() GetLoadBalancerBackendOutput {
	return i.ToGetLoadBalancerBackendOutputWithContext(context.Background())
}

func (i GetLoadBalancerBackendArgs) ToGetLoadBalancerBackendOutputWithContext(ctx context.Context) GetLoadBalancerBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerBackendOutput)
}

// GetLoadBalancerBackendArrayInput is an input type that accepts GetLoadBalancerBackendArray and GetLoadBalancerBackendArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerBackendArrayInput` via:
//
//	GetLoadBalancerBackendArray{ GetLoadBalancerBackendArgs{...} }
type GetLoadBalancerBackendArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerBackendArrayOutput() GetLoadBalancerBackendArrayOutput
	ToGetLoadBalancerBackendArrayOutputWithContext(context.Context) GetLoadBalancerBackendArrayOutput
}

type GetLoadBalancerBackendArray []GetLoadBalancerBackendInput

func (GetLoadBalancerBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerBackend)(nil)).Elem()
}

func (i GetLoadBalancerBackendArray) ToGetLoadBalancerBackendArrayOutput() GetLoadBalancerBackendArrayOutput {
	return i.ToGetLoadBalancerBackendArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerBackendArray) ToGetLoadBalancerBackendArrayOutputWithContext(ctx context.Context) GetLoadBalancerBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerBackendArrayOutput)
}

type GetLoadBalancerBackendOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerBackend)(nil)).Elem()
}

func (o GetLoadBalancerBackendOutput) ToGetLoadBalancerBackendOutput() GetLoadBalancerBackendOutput {
	return o
}

func (o GetLoadBalancerBackendOutput) ToGetLoadBalancerBackendOutputWithContext(ctx context.Context) GetLoadBalancerBackendOutput {
	return o
}

// The health check port of the backend
func (o GetLoadBalancerBackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerBackend) int { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// The ip of the backend
func (o GetLoadBalancerBackendOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerBackend) string { return v.Ip }).(pulumi.StringOutput)
}

// The protocol of the backend
func (o GetLoadBalancerBackendOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerBackend) string { return v.Protocol }).(pulumi.StringOutput)
}

// The source port of the backend
func (o GetLoadBalancerBackendOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerBackend) int { return v.SourcePort }).(pulumi.IntOutput)
}

// The target port of the backend
func (o GetLoadBalancerBackendOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerBackend) int { return v.TargetPort }).(pulumi.IntOutput)
}

type GetLoadBalancerBackendArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerBackend)(nil)).Elem()
}

func (o GetLoadBalancerBackendArrayOutput) ToGetLoadBalancerBackendArrayOutput() GetLoadBalancerBackendArrayOutput {
	return o
}

func (o GetLoadBalancerBackendArrayOutput) ToGetLoadBalancerBackendArrayOutputWithContext(ctx context.Context) GetLoadBalancerBackendArrayOutput {
	return o
}

func (o GetLoadBalancerBackendArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerBackend {
		return vs[0].([]GetLoadBalancerBackend)[vs[1].(int)]
	}).(GetLoadBalancerBackendOutput)
}

type GetRegionFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter regions by this key. This may be one of `code`, `country`, `default`, `name`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves `regions` which keys has value that matches one of the values provided here
	Values []string `pulumi:"values"`
}

// GetRegionFilterInput is an input type that accepts GetRegionFilterArgs and GetRegionFilterOutput values.
// You can construct a concrete instance of `GetRegionFilterInput` via:
//
//	GetRegionFilterArgs{...}
type GetRegionFilterInput interface {
	pulumi.Input

	ToGetRegionFilterOutput() GetRegionFilterOutput
	ToGetRegionFilterOutputWithContext(context.Context) GetRegionFilterOutput
}

type GetRegionFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter regions by this key. This may be one of `code`, `country`, `default`, `name`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves `regions` which keys has value that matches one of the values provided here
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetRegionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionFilter)(nil)).Elem()
}

func (i GetRegionFilterArgs) ToGetRegionFilterOutput() GetRegionFilterOutput {
	return i.ToGetRegionFilterOutputWithContext(context.Background())
}

func (i GetRegionFilterArgs) ToGetRegionFilterOutputWithContext(ctx context.Context) GetRegionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionFilterOutput)
}

// GetRegionFilterArrayInput is an input type that accepts GetRegionFilterArray and GetRegionFilterArrayOutput values.
// You can construct a concrete instance of `GetRegionFilterArrayInput` via:
//
//	GetRegionFilterArray{ GetRegionFilterArgs{...} }
type GetRegionFilterArrayInput interface {
	pulumi.Input

	ToGetRegionFilterArrayOutput() GetRegionFilterArrayOutput
	ToGetRegionFilterArrayOutputWithContext(context.Context) GetRegionFilterArrayOutput
}

type GetRegionFilterArray []GetRegionFilterInput

func (GetRegionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionFilter)(nil)).Elem()
}

func (i GetRegionFilterArray) ToGetRegionFilterArrayOutput() GetRegionFilterArrayOutput {
	return i.ToGetRegionFilterArrayOutputWithContext(context.Background())
}

func (i GetRegionFilterArray) ToGetRegionFilterArrayOutputWithContext(ctx context.Context) GetRegionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionFilterArrayOutput)
}

type GetRegionFilterOutput struct{ *pulumi.OutputState }

func (GetRegionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionFilter)(nil)).Elem()
}

func (o GetRegionFilterOutput) ToGetRegionFilterOutput() GetRegionFilterOutput {
	return o
}

func (o GetRegionFilterOutput) ToGetRegionFilterOutputWithContext(ctx context.Context) GetRegionFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
func (o GetRegionFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegionFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter regions by this key. This may be one of `code`, `country`, `default`, `name`.
func (o GetRegionFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
func (o GetRegionFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves `regions` which keys has value that matches one of the values provided here
func (o GetRegionFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetRegionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetRegionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionFilter)(nil)).Elem()
}

func (o GetRegionFilterArrayOutput) ToGetRegionFilterArrayOutput() GetRegionFilterArrayOutput {
	return o
}

func (o GetRegionFilterArrayOutput) ToGetRegionFilterArrayOutputWithContext(ctx context.Context) GetRegionFilterArrayOutput {
	return o
}

func (o GetRegionFilterArrayOutput) Index(i pulumi.IntInput) GetRegionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionFilter {
		return vs[0].([]GetRegionFilter)[vs[1].(int)]
	}).(GetRegionFilterOutput)
}

type GetRegionRegion struct {
	// The code of the region
	Code string `pulumi:"code"`
	// The country of the region
	Country string `pulumi:"country"`
	// If the region is the default region, this will return `true`
	Default bool `pulumi:"default"`
	// A human name of the region
	Name string `pulumi:"name"`
}

// GetRegionRegionInput is an input type that accepts GetRegionRegionArgs and GetRegionRegionOutput values.
// You can construct a concrete instance of `GetRegionRegionInput` via:
//
//	GetRegionRegionArgs{...}
type GetRegionRegionInput interface {
	pulumi.Input

	ToGetRegionRegionOutput() GetRegionRegionOutput
	ToGetRegionRegionOutputWithContext(context.Context) GetRegionRegionOutput
}

type GetRegionRegionArgs struct {
	// The code of the region
	Code pulumi.StringInput `pulumi:"code"`
	// The country of the region
	Country pulumi.StringInput `pulumi:"country"`
	// If the region is the default region, this will return `true`
	Default pulumi.BoolInput `pulumi:"default"`
	// A human name of the region
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRegionRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionRegion)(nil)).Elem()
}

func (i GetRegionRegionArgs) ToGetRegionRegionOutput() GetRegionRegionOutput {
	return i.ToGetRegionRegionOutputWithContext(context.Background())
}

func (i GetRegionRegionArgs) ToGetRegionRegionOutputWithContext(ctx context.Context) GetRegionRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionRegionOutput)
}

// GetRegionRegionArrayInput is an input type that accepts GetRegionRegionArray and GetRegionRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionRegionArrayInput` via:
//
//	GetRegionRegionArray{ GetRegionRegionArgs{...} }
type GetRegionRegionArrayInput interface {
	pulumi.Input

	ToGetRegionRegionArrayOutput() GetRegionRegionArrayOutput
	ToGetRegionRegionArrayOutputWithContext(context.Context) GetRegionRegionArrayOutput
}

type GetRegionRegionArray []GetRegionRegionInput

func (GetRegionRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionRegion)(nil)).Elem()
}

func (i GetRegionRegionArray) ToGetRegionRegionArrayOutput() GetRegionRegionArrayOutput {
	return i.ToGetRegionRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionRegionArray) ToGetRegionRegionArrayOutputWithContext(ctx context.Context) GetRegionRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionRegionArrayOutput)
}

type GetRegionRegionOutput struct{ *pulumi.OutputState }

func (GetRegionRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionRegion)(nil)).Elem()
}

func (o GetRegionRegionOutput) ToGetRegionRegionOutput() GetRegionRegionOutput {
	return o
}

func (o GetRegionRegionOutput) ToGetRegionRegionOutputWithContext(ctx context.Context) GetRegionRegionOutput {
	return o
}

// The code of the region
func (o GetRegionRegionOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRegion) string { return v.Code }).(pulumi.StringOutput)
}

// The country of the region
func (o GetRegionRegionOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRegion) string { return v.Country }).(pulumi.StringOutput)
}

// If the region is the default region, this will return `true`
func (o GetRegionRegionOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRegionRegion) bool { return v.Default }).(pulumi.BoolOutput)
}

// A human name of the region
func (o GetRegionRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetRegionRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionRegion)(nil)).Elem()
}

func (o GetRegionRegionArrayOutput) ToGetRegionRegionArrayOutput() GetRegionRegionArrayOutput {
	return o
}

func (o GetRegionRegionArrayOutput) ToGetRegionRegionArrayOutputWithContext(ctx context.Context) GetRegionRegionArrayOutput {
	return o
}

func (o GetRegionRegionArrayOutput) Index(i pulumi.IntInput) GetRegionRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionRegion {
		return vs[0].([]GetRegionRegion)[vs[1].(int)]
	}).(GetRegionRegionOutput)
}

type GetRegionSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort regions by this key. This may be one of `code`, `country`, `default`, `name`.
	Key string `pulumi:"key"`
}

// GetRegionSortInput is an input type that accepts GetRegionSortArgs and GetRegionSortOutput values.
// You can construct a concrete instance of `GetRegionSortInput` via:
//
//	GetRegionSortArgs{...}
type GetRegionSortInput interface {
	pulumi.Input

	ToGetRegionSortOutput() GetRegionSortOutput
	ToGetRegionSortOutputWithContext(context.Context) GetRegionSortOutput
}

type GetRegionSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort regions by this key. This may be one of `code`, `country`, `default`, `name`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetRegionSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionSort)(nil)).Elem()
}

func (i GetRegionSortArgs) ToGetRegionSortOutput() GetRegionSortOutput {
	return i.ToGetRegionSortOutputWithContext(context.Background())
}

func (i GetRegionSortArgs) ToGetRegionSortOutputWithContext(ctx context.Context) GetRegionSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionSortOutput)
}

// GetRegionSortArrayInput is an input type that accepts GetRegionSortArray and GetRegionSortArrayOutput values.
// You can construct a concrete instance of `GetRegionSortArrayInput` via:
//
//	GetRegionSortArray{ GetRegionSortArgs{...} }
type GetRegionSortArrayInput interface {
	pulumi.Input

	ToGetRegionSortArrayOutput() GetRegionSortArrayOutput
	ToGetRegionSortArrayOutputWithContext(context.Context) GetRegionSortArrayOutput
}

type GetRegionSortArray []GetRegionSortInput

func (GetRegionSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionSort)(nil)).Elem()
}

func (i GetRegionSortArray) ToGetRegionSortArrayOutput() GetRegionSortArrayOutput {
	return i.ToGetRegionSortArrayOutputWithContext(context.Background())
}

func (i GetRegionSortArray) ToGetRegionSortArrayOutputWithContext(ctx context.Context) GetRegionSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionSortArrayOutput)
}

type GetRegionSortOutput struct{ *pulumi.OutputState }

func (GetRegionSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionSort)(nil)).Elem()
}

func (o GetRegionSortOutput) ToGetRegionSortOutput() GetRegionSortOutput {
	return o
}

func (o GetRegionSortOutput) ToGetRegionSortOutputWithContext(ctx context.Context) GetRegionSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetRegionSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort regions by this key. This may be one of `code`, `country`, `default`, `name`.
func (o GetRegionSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetRegionSortArrayOutput struct{ *pulumi.OutputState }

func (GetRegionSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionSort)(nil)).Elem()
}

func (o GetRegionSortArrayOutput) ToGetRegionSortArrayOutput() GetRegionSortArrayOutput {
	return o
}

func (o GetRegionSortArrayOutput) ToGetRegionSortArrayOutputWithContext(ctx context.Context) GetRegionSortArrayOutput {
	return o
}

func (o GetRegionSortArrayOutput) Index(i pulumi.IntInput) GetRegionSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionSort {
		return vs[0].([]GetRegionSort)[vs[1].(int)]
	}).(GetRegionSortOutput)
}

type GetSizeFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpuType`, `gpu`, `name`, `ram`, `selectable`, `type`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves `sizes` which keys has value that matches one of the values provided here
	Values []string `pulumi:"values"`
}

// GetSizeFilterInput is an input type that accepts GetSizeFilterArgs and GetSizeFilterOutput values.
// You can construct a concrete instance of `GetSizeFilterInput` via:
//
//	GetSizeFilterArgs{...}
type GetSizeFilterInput interface {
	pulumi.Input

	ToGetSizeFilterOutput() GetSizeFilterOutput
	ToGetSizeFilterOutputWithContext(context.Context) GetSizeFilterOutput
}

type GetSizeFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpuType`, `gpu`, `name`, `ram`, `selectable`, `type`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves `sizes` which keys has value that matches one of the values provided here
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSizeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizeFilter)(nil)).Elem()
}

func (i GetSizeFilterArgs) ToGetSizeFilterOutput() GetSizeFilterOutput {
	return i.ToGetSizeFilterOutputWithContext(context.Background())
}

func (i GetSizeFilterArgs) ToGetSizeFilterOutputWithContext(ctx context.Context) GetSizeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizeFilterOutput)
}

// GetSizeFilterArrayInput is an input type that accepts GetSizeFilterArray and GetSizeFilterArrayOutput values.
// You can construct a concrete instance of `GetSizeFilterArrayInput` via:
//
//	GetSizeFilterArray{ GetSizeFilterArgs{...} }
type GetSizeFilterArrayInput interface {
	pulumi.Input

	ToGetSizeFilterArrayOutput() GetSizeFilterArrayOutput
	ToGetSizeFilterArrayOutputWithContext(context.Context) GetSizeFilterArrayOutput
}

type GetSizeFilterArray []GetSizeFilterInput

func (GetSizeFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizeFilter)(nil)).Elem()
}

func (i GetSizeFilterArray) ToGetSizeFilterArrayOutput() GetSizeFilterArrayOutput {
	return i.ToGetSizeFilterArrayOutputWithContext(context.Background())
}

func (i GetSizeFilterArray) ToGetSizeFilterArrayOutputWithContext(ctx context.Context) GetSizeFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizeFilterArrayOutput)
}

type GetSizeFilterOutput struct{ *pulumi.OutputState }

func (GetSizeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizeFilter)(nil)).Elem()
}

func (o GetSizeFilterOutput) ToGetSizeFilterOutput() GetSizeFilterOutput {
	return o
}

func (o GetSizeFilterOutput) ToGetSizeFilterOutputWithContext(ctx context.Context) GetSizeFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
func (o GetSizeFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSizeFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpuType`, `gpu`, `name`, `ram`, `selectable`, `type`.
func (o GetSizeFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizeFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.
func (o GetSizeFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSizeFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves `sizes` which keys has value that matches one of the values provided here
func (o GetSizeFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSizeFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSizeFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSizeFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizeFilter)(nil)).Elem()
}

func (o GetSizeFilterArrayOutput) ToGetSizeFilterArrayOutput() GetSizeFilterArrayOutput {
	return o
}

func (o GetSizeFilterArrayOutput) ToGetSizeFilterArrayOutputWithContext(ctx context.Context) GetSizeFilterArrayOutput {
	return o
}

func (o GetSizeFilterArrayOutput) Index(i pulumi.IntInput) GetSizeFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSizeFilter {
		return vs[0].([]GetSizeFilter)[vs[1].(int)]
	}).(GetSizeFilterOutput)
}

type GetSizeSize struct {
	// Total of CPU
	Cpu int `pulumi:"cpu"`
	// A description of the instance size
	Description string `pulumi:"description"`
	// The size of SSD
	Disk int `pulumi:"disk"`
	// Total of GPU
	Gpu int `pulumi:"gpu"`
	// GPU type
	GpuType string `pulumi:"gpuType"`
	// The name of the size
	Name string `pulumi:"name"`
	// Total of RAM
	Ram int `pulumi:"ram"`
	// If can use the instance size
	Selectable bool `pulumi:"selectable"`
	// A human name of the size
	Type string `pulumi:"type"`
}

// GetSizeSizeInput is an input type that accepts GetSizeSizeArgs and GetSizeSizeOutput values.
// You can construct a concrete instance of `GetSizeSizeInput` via:
//
//	GetSizeSizeArgs{...}
type GetSizeSizeInput interface {
	pulumi.Input

	ToGetSizeSizeOutput() GetSizeSizeOutput
	ToGetSizeSizeOutputWithContext(context.Context) GetSizeSizeOutput
}

type GetSizeSizeArgs struct {
	// Total of CPU
	Cpu pulumi.IntInput `pulumi:"cpu"`
	// A description of the instance size
	Description pulumi.StringInput `pulumi:"description"`
	// The size of SSD
	Disk pulumi.IntInput `pulumi:"disk"`
	// Total of GPU
	Gpu pulumi.IntInput `pulumi:"gpu"`
	// GPU type
	GpuType pulumi.StringInput `pulumi:"gpuType"`
	// The name of the size
	Name pulumi.StringInput `pulumi:"name"`
	// Total of RAM
	Ram pulumi.IntInput `pulumi:"ram"`
	// If can use the instance size
	Selectable pulumi.BoolInput `pulumi:"selectable"`
	// A human name of the size
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetSizeSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizeSize)(nil)).Elem()
}

func (i GetSizeSizeArgs) ToGetSizeSizeOutput() GetSizeSizeOutput {
	return i.ToGetSizeSizeOutputWithContext(context.Background())
}

func (i GetSizeSizeArgs) ToGetSizeSizeOutputWithContext(ctx context.Context) GetSizeSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizeSizeOutput)
}

// GetSizeSizeArrayInput is an input type that accepts GetSizeSizeArray and GetSizeSizeArrayOutput values.
// You can construct a concrete instance of `GetSizeSizeArrayInput` via:
//
//	GetSizeSizeArray{ GetSizeSizeArgs{...} }
type GetSizeSizeArrayInput interface {
	pulumi.Input

	ToGetSizeSizeArrayOutput() GetSizeSizeArrayOutput
	ToGetSizeSizeArrayOutputWithContext(context.Context) GetSizeSizeArrayOutput
}

type GetSizeSizeArray []GetSizeSizeInput

func (GetSizeSizeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizeSize)(nil)).Elem()
}

func (i GetSizeSizeArray) ToGetSizeSizeArrayOutput() GetSizeSizeArrayOutput {
	return i.ToGetSizeSizeArrayOutputWithContext(context.Background())
}

func (i GetSizeSizeArray) ToGetSizeSizeArrayOutputWithContext(ctx context.Context) GetSizeSizeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizeSizeArrayOutput)
}

type GetSizeSizeOutput struct{ *pulumi.OutputState }

func (GetSizeSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizeSize)(nil)).Elem()
}

func (o GetSizeSizeOutput) ToGetSizeSizeOutput() GetSizeSizeOutput {
	return o
}

func (o GetSizeSizeOutput) ToGetSizeSizeOutputWithContext(ctx context.Context) GetSizeSizeOutput {
	return o
}

// Total of CPU
func (o GetSizeSizeOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizeSize) int { return v.Cpu }).(pulumi.IntOutput)
}

// A description of the instance size
func (o GetSizeSizeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizeSize) string { return v.Description }).(pulumi.StringOutput)
}

// The size of SSD
func (o GetSizeSizeOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizeSize) int { return v.Disk }).(pulumi.IntOutput)
}

// Total of GPU
func (o GetSizeSizeOutput) Gpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizeSize) int { return v.Gpu }).(pulumi.IntOutput)
}

// GPU type
func (o GetSizeSizeOutput) GpuType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizeSize) string { return v.GpuType }).(pulumi.StringOutput)
}

// The name of the size
func (o GetSizeSizeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizeSize) string { return v.Name }).(pulumi.StringOutput)
}

// Total of RAM
func (o GetSizeSizeOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizeSize) int { return v.Ram }).(pulumi.IntOutput)
}

// If can use the instance size
func (o GetSizeSizeOutput) Selectable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSizeSize) bool { return v.Selectable }).(pulumi.BoolOutput)
}

// A human name of the size
func (o GetSizeSizeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizeSize) string { return v.Type }).(pulumi.StringOutput)
}

type GetSizeSizeArrayOutput struct{ *pulumi.OutputState }

func (GetSizeSizeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizeSize)(nil)).Elem()
}

func (o GetSizeSizeArrayOutput) ToGetSizeSizeArrayOutput() GetSizeSizeArrayOutput {
	return o
}

func (o GetSizeSizeArrayOutput) ToGetSizeSizeArrayOutputWithContext(ctx context.Context) GetSizeSizeArrayOutput {
	return o
}

func (o GetSizeSizeArrayOutput) Index(i pulumi.IntInput) GetSizeSizeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSizeSize {
		return vs[0].([]GetSizeSize)[vs[1].(int)]
	}).(GetSizeSizeOutput)
}

type GetSizeSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpuType`, `gpu`, `name`, `ram`, `selectable`, `type`.
	Key string `pulumi:"key"`
}

// GetSizeSortInput is an input type that accepts GetSizeSortArgs and GetSizeSortOutput values.
// You can construct a concrete instance of `GetSizeSortInput` via:
//
//	GetSizeSortArgs{...}
type GetSizeSortInput interface {
	pulumi.Input

	ToGetSizeSortOutput() GetSizeSortOutput
	ToGetSizeSortOutputWithContext(context.Context) GetSizeSortOutput
}

type GetSizeSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpuType`, `gpu`, `name`, `ram`, `selectable`, `type`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetSizeSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizeSort)(nil)).Elem()
}

func (i GetSizeSortArgs) ToGetSizeSortOutput() GetSizeSortOutput {
	return i.ToGetSizeSortOutputWithContext(context.Background())
}

func (i GetSizeSortArgs) ToGetSizeSortOutputWithContext(ctx context.Context) GetSizeSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizeSortOutput)
}

// GetSizeSortArrayInput is an input type that accepts GetSizeSortArray and GetSizeSortArrayOutput values.
// You can construct a concrete instance of `GetSizeSortArrayInput` via:
//
//	GetSizeSortArray{ GetSizeSortArgs{...} }
type GetSizeSortArrayInput interface {
	pulumi.Input

	ToGetSizeSortArrayOutput() GetSizeSortArrayOutput
	ToGetSizeSortArrayOutputWithContext(context.Context) GetSizeSortArrayOutput
}

type GetSizeSortArray []GetSizeSortInput

func (GetSizeSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizeSort)(nil)).Elem()
}

func (i GetSizeSortArray) ToGetSizeSortArrayOutput() GetSizeSortArrayOutput {
	return i.ToGetSizeSortArrayOutputWithContext(context.Background())
}

func (i GetSizeSortArray) ToGetSizeSortArrayOutputWithContext(ctx context.Context) GetSizeSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizeSortArrayOutput)
}

type GetSizeSortOutput struct{ *pulumi.OutputState }

func (GetSizeSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizeSort)(nil)).Elem()
}

func (o GetSizeSortOutput) ToGetSizeSortOutput() GetSizeSortOutput {
	return o
}

func (o GetSizeSortOutput) ToGetSizeSortOutputWithContext(ctx context.Context) GetSizeSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetSizeSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSizeSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpuType`, `gpu`, `name`, `ram`, `selectable`, `type`.
func (o GetSizeSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizeSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetSizeSortArrayOutput struct{ *pulumi.OutputState }

func (GetSizeSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizeSort)(nil)).Elem()
}

func (o GetSizeSortArrayOutput) ToGetSizeSortArrayOutput() GetSizeSortArrayOutput {
	return o
}

func (o GetSizeSortArrayOutput) ToGetSizeSortArrayOutputWithContext(ctx context.Context) GetSizeSortArrayOutput {
	return o
}

func (o GetSizeSortArrayOutput) Index(i pulumi.IntInput) GetSizeSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSizeSort {
		return vs[0].([]GetSizeSort)[vs[1].(int)]
	}).(GetSizeSortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallEgressRuleInput)(nil)).Elem(), FirewallEgressRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallEgressRuleArrayInput)(nil)).Elem(), FirewallEgressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIngressRuleInput)(nil)).Elem(), FirewallIngressRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIngressRuleArrayInput)(nil)).Elem(), FirewallIngressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterInstalledApplicationInput)(nil)).Elem(), KubernetesClusterInstalledApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterInstalledApplicationArrayInput)(nil)).Elem(), KubernetesClusterInstalledApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterPoolsInput)(nil)).Elem(), KubernetesClusterPoolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterPoolsPtrInput)(nil)).Elem(), KubernetesClusterPoolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterPoolsTaintInput)(nil)).Elem(), KubernetesClusterPoolsTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterPoolsTaintArrayInput)(nil)).Elem(), KubernetesClusterPoolsTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolTaintInput)(nil)).Elem(), KubernetesNodePoolTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolTaintArrayInput)(nil)).Elem(), KubernetesNodePoolTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseVersionFilterInput)(nil)).Elem(), GetDatabaseVersionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseVersionFilterArrayInput)(nil)).Elem(), GetDatabaseVersionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseVersionSortInput)(nil)).Elem(), GetDatabaseVersionSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseVersionSortArrayInput)(nil)).Elem(), GetDatabaseVersionSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseVersionVersionInput)(nil)).Elem(), GetDatabaseVersionVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseVersionVersionArrayInput)(nil)).Elem(), GetDatabaseVersionVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDiskImageDiskimageInput)(nil)).Elem(), GetDiskImageDiskimageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDiskImageDiskimageArrayInput)(nil)).Elem(), GetDiskImageDiskimageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDiskImageFilterInput)(nil)).Elem(), GetDiskImageFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDiskImageFilterArrayInput)(nil)).Elem(), GetDiskImageFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDiskImageSortInput)(nil)).Elem(), GetDiskImageSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDiskImageSortArrayInput)(nil)).Elem(), GetDiskImageSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesFilterInput)(nil)).Elem(), GetInstancesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesFilterArrayInput)(nil)).Elem(), GetInstancesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesSortInput)(nil)).Elem(), GetInstancesSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesSortArrayInput)(nil)).Elem(), GetInstancesSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesClusterInstalledApplicationInput)(nil)).Elem(), GetKubernetesClusterInstalledApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesClusterInstalledApplicationArrayInput)(nil)).Elem(), GetKubernetesClusterInstalledApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesClusterPoolInput)(nil)).Elem(), GetKubernetesClusterPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesClusterPoolArrayInput)(nil)).Elem(), GetKubernetesClusterPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesClusterPoolTaintInput)(nil)).Elem(), GetKubernetesClusterPoolTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesClusterPoolTaintArrayInput)(nil)).Elem(), GetKubernetesClusterPoolTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesVersionFilterInput)(nil)).Elem(), GetKubernetesVersionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesVersionFilterArrayInput)(nil)).Elem(), GetKubernetesVersionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesVersionSortInput)(nil)).Elem(), GetKubernetesVersionSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesVersionSortArrayInput)(nil)).Elem(), GetKubernetesVersionSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesVersionVersionInput)(nil)).Elem(), GetKubernetesVersionVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesVersionVersionArrayInput)(nil)).Elem(), GetKubernetesVersionVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerBackendInput)(nil)).Elem(), GetLoadBalancerBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerBackendArrayInput)(nil)).Elem(), GetLoadBalancerBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionFilterInput)(nil)).Elem(), GetRegionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionFilterArrayInput)(nil)).Elem(), GetRegionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionRegionInput)(nil)).Elem(), GetRegionRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionRegionArrayInput)(nil)).Elem(), GetRegionRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionSortInput)(nil)).Elem(), GetRegionSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionSortArrayInput)(nil)).Elem(), GetRegionSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSizeFilterInput)(nil)).Elem(), GetSizeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSizeFilterArrayInput)(nil)).Elem(), GetSizeFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSizeSizeInput)(nil)).Elem(), GetSizeSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSizeSizeArrayInput)(nil)).Elem(), GetSizeSizeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSizeSortInput)(nil)).Elem(), GetSizeSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSizeSortArrayInput)(nil)).Elem(), GetSizeSortArray{})
	pulumi.RegisterOutputType(FirewallEgressRuleOutput{})
	pulumi.RegisterOutputType(FirewallEgressRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallIngressRuleOutput{})
	pulumi.RegisterOutputType(FirewallIngressRuleArrayOutput{})
	pulumi.RegisterOutputType(KubernetesClusterInstalledApplicationOutput{})
	pulumi.RegisterOutputType(KubernetesClusterInstalledApplicationArrayOutput{})
	pulumi.RegisterOutputType(KubernetesClusterPoolsOutput{})
	pulumi.RegisterOutputType(KubernetesClusterPoolsPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterPoolsTaintOutput{})
	pulumi.RegisterOutputType(KubernetesClusterPoolsTaintArrayOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolTaintOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolTaintArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseVersionFilterOutput{})
	pulumi.RegisterOutputType(GetDatabaseVersionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseVersionSortOutput{})
	pulumi.RegisterOutputType(GetDatabaseVersionSortArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseVersionVersionOutput{})
	pulumi.RegisterOutputType(GetDatabaseVersionVersionArrayOutput{})
	pulumi.RegisterOutputType(GetDiskImageDiskimageOutput{})
	pulumi.RegisterOutputType(GetDiskImageDiskimageArrayOutput{})
	pulumi.RegisterOutputType(GetDiskImageFilterOutput{})
	pulumi.RegisterOutputType(GetDiskImageFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDiskImageSortOutput{})
	pulumi.RegisterOutputType(GetDiskImageSortArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesFilterOutput{})
	pulumi.RegisterOutputType(GetInstancesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesSortOutput{})
	pulumi.RegisterOutputType(GetInstancesSortArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterInstalledApplicationOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterInstalledApplicationArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterPoolOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterPoolArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterPoolTaintOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterPoolTaintArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesVersionFilterOutput{})
	pulumi.RegisterOutputType(GetKubernetesVersionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesVersionSortOutput{})
	pulumi.RegisterOutputType(GetKubernetesVersionSortArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesVersionVersionOutput{})
	pulumi.RegisterOutputType(GetKubernetesVersionVersionArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerBackendOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerBackendArrayOutput{})
	pulumi.RegisterOutputType(GetRegionFilterOutput{})
	pulumi.RegisterOutputType(GetRegionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRegionRegionOutput{})
	pulumi.RegisterOutputType(GetRegionRegionArrayOutput{})
	pulumi.RegisterOutputType(GetRegionSortOutput{})
	pulumi.RegisterOutputType(GetRegionSortArrayOutput{})
	pulumi.RegisterOutputType(GetSizeFilterOutput{})
	pulumi.RegisterOutputType(GetSizeFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSizeSizeOutput{})
	pulumi.RegisterOutputType(GetSizeSizeArrayOutput{})
	pulumi.RegisterOutputType(GetSizeSortOutput{})
	pulumi.RegisterOutputType(GetSizeSortArrayOutput{})
}
