// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package civo

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Snapshot struct {
	pulumi.CustomResourceState

	CompletedAt pulumi.StringOutput `pulumi:"completedAt"`
	// If a valid cron string is passed, the snapshot will be saved as an automated snapshot,continuing to automatically update
	// based on the schedule of the cron sequence provided.The default is nil meaning the snapshot will be saved as a one-off
	// snapshot.
	CronTiming pulumi.StringPtrOutput `pulumi:"cronTiming"`
	Hostname   pulumi.StringOutput    `pulumi:"hostname"`
	// The ID of the instance to snapshot
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// This is a unqiue, alphanumerical, short, human readable code for the snapshot
	Name          pulumi.StringOutput `pulumi:"name"`
	NextExecution pulumi.StringOutput `pulumi:"nextExecution"`
	Region        pulumi.StringOutput `pulumi:"region"`
	RequestedAt   pulumi.StringOutput `pulumi:"requestedAt"`
	// If true the instance will be shut down during the snapshot to ensure all filesare in a consistent state (e.g. database
	// tables aren't in the middle of being optimisedand hence risking corruption). The default is false so you experience no
	// interruptionof service, but a small risk of corruption.
	Safe       pulumi.BoolPtrOutput `pulumi:"safe"`
	SizeGb     pulumi.IntOutput     `pulumi:"sizeGb"`
	State      pulumi.StringOutput  `pulumi:"state"`
	TemplateId pulumi.StringOutput  `pulumi:"templateId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil {
		args = &SnapshotArgs{}
	}
	var resource Snapshot
	err := ctx.RegisterResource("civo:index/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("civo:index/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	CompletedAt *string `pulumi:"completedAt"`
	// If a valid cron string is passed, the snapshot will be saved as an automated snapshot,continuing to automatically update
	// based on the schedule of the cron sequence provided.The default is nil meaning the snapshot will be saved as a one-off
	// snapshot.
	CronTiming *string `pulumi:"cronTiming"`
	Hostname   *string `pulumi:"hostname"`
	// The ID of the instance to snapshot
	InstanceId *string `pulumi:"instanceId"`
	// This is a unqiue, alphanumerical, short, human readable code for the snapshot
	Name          *string `pulumi:"name"`
	NextExecution *string `pulumi:"nextExecution"`
	Region        *string `pulumi:"region"`
	RequestedAt   *string `pulumi:"requestedAt"`
	// If true the instance will be shut down during the snapshot to ensure all filesare in a consistent state (e.g. database
	// tables aren't in the middle of being optimisedand hence risking corruption). The default is false so you experience no
	// interruptionof service, but a small risk of corruption.
	Safe       *bool   `pulumi:"safe"`
	SizeGb     *int    `pulumi:"sizeGb"`
	State      *string `pulumi:"state"`
	TemplateId *string `pulumi:"templateId"`
}

type SnapshotState struct {
	CompletedAt pulumi.StringPtrInput
	// If a valid cron string is passed, the snapshot will be saved as an automated snapshot,continuing to automatically update
	// based on the schedule of the cron sequence provided.The default is nil meaning the snapshot will be saved as a one-off
	// snapshot.
	CronTiming pulumi.StringPtrInput
	Hostname   pulumi.StringPtrInput
	// The ID of the instance to snapshot
	InstanceId pulumi.StringPtrInput
	// This is a unqiue, alphanumerical, short, human readable code for the snapshot
	Name          pulumi.StringPtrInput
	NextExecution pulumi.StringPtrInput
	Region        pulumi.StringPtrInput
	RequestedAt   pulumi.StringPtrInput
	// If true the instance will be shut down during the snapshot to ensure all filesare in a consistent state (e.g. database
	// tables aren't in the middle of being optimisedand hence risking corruption). The default is false so you experience no
	// interruptionof service, but a small risk of corruption.
	Safe       pulumi.BoolPtrInput
	SizeGb     pulumi.IntPtrInput
	State      pulumi.StringPtrInput
	TemplateId pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// If a valid cron string is passed, the snapshot will be saved as an automated snapshot,continuing to automatically update
	// based on the schedule of the cron sequence provided.The default is nil meaning the snapshot will be saved as a one-off
	// snapshot.
	CronTiming *string `pulumi:"cronTiming"`
	// The ID of the instance to snapshot
	InstanceId string `pulumi:"instanceId"`
	// This is a unqiue, alphanumerical, short, human readable code for the snapshot
	Name *string `pulumi:"name"`
	// If true the instance will be shut down during the snapshot to ensure all filesare in a consistent state (e.g. database
	// tables aren't in the middle of being optimisedand hence risking corruption). The default is false so you experience no
	// interruptionof service, but a small risk of corruption.
	Safe *bool `pulumi:"safe"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// If a valid cron string is passed, the snapshot will be saved as an automated snapshot,continuing to automatically update
	// based on the schedule of the cron sequence provided.The default is nil meaning the snapshot will be saved as a one-off
	// snapshot.
	CronTiming pulumi.StringPtrInput
	// The ID of the instance to snapshot
	InstanceId pulumi.StringInput
	// This is a unqiue, alphanumerical, short, human readable code for the snapshot
	Name pulumi.StringPtrInput
	// If true the instance will be shut down during the snapshot to ensure all filesare in a consistent state (e.g. database
	// tables aren't in the middle of being optimisedand hence risking corruption). The default is false so you experience no
	// interruptionof service, but a small risk of corruption.
	Safe pulumi.BoolPtrInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}
