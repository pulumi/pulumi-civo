// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    /// <summary>
    /// Provides a Civo network resource. This can be used to create, modify, and delete networks.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Civo = Pulumi.Civo;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customNet = new Civo.Network("custom_net", new()
    ///     {
    ///         Label = "test_network",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using ID
    /// 
    /// ```sh
    /// $ pulumi import civo:index/network:Network custom_net b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
    /// ```
    /// </summary>
    [CivoResourceType("civo:index/network:Network")]
    public partial class Network : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The CIDR block for the network
        /// </summary>
        [Output("cidrV4")]
        public Output<string?> CidrV4 { get; private set; } = null!;

        /// <summary>
        /// If the network is default, this will be `true`
        /// </summary>
        [Output("default")]
        public Output<bool> Default { get; private set; } = null!;

        /// <summary>
        /// Name for the network
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The name of the network
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of nameservers for the network
        /// </summary>
        [Output("nameserversV4s")]
        public Output<ImmutableArray<string>> NameserversV4s { get; private set; } = null!;

        /// <summary>
        /// The region of the network
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// End of the IPv4 allocation pool for VLAN
        /// </summary>
        [Output("vlanAllocationPoolV4End")]
        public Output<string?> VlanAllocationPoolV4End { get; private set; } = null!;

        /// <summary>
        /// Start of the IPv4 allocation pool for VLAN
        /// </summary>
        [Output("vlanAllocationPoolV4Start")]
        public Output<string?> VlanAllocationPoolV4Start { get; private set; } = null!;

        /// <summary>
        /// CIDR for VLAN IPv4
        /// </summary>
        [Output("vlanCidrV4")]
        public Output<string?> VlanCidrV4 { get; private set; } = null!;

        /// <summary>
        /// Gateway IP for VLAN IPv4
        /// </summary>
        [Output("vlanGatewayIpV4")]
        public Output<string?> VlanGatewayIpV4 { get; private set; } = null!;

        /// <summary>
        /// VLAN ID for the network
        /// </summary>
        [Output("vlanId")]
        public Output<int?> VlanId { get; private set; } = null!;

        /// <summary>
        /// Physical interface for VLAN
        /// </summary>
        [Output("vlanPhysicalInterface")]
        public Output<string?> VlanPhysicalInterface { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs args, CustomResourceOptions? options = null)
            : base("civo:index/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("civo:index/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block for the network
        /// </summary>
        [Input("cidrV4")]
        public Input<string>? CidrV4 { get; set; }

        /// <summary>
        /// Name for the network
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("nameserversV4s")]
        private InputList<string>? _nameserversV4s;

        /// <summary>
        /// List of nameservers for the network
        /// </summary>
        public InputList<string> NameserversV4s
        {
            get => _nameserversV4s ?? (_nameserversV4s = new InputList<string>());
            set => _nameserversV4s = value;
        }

        /// <summary>
        /// The region of the network
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// End of the IPv4 allocation pool for VLAN
        /// </summary>
        [Input("vlanAllocationPoolV4End")]
        public Input<string>? VlanAllocationPoolV4End { get; set; }

        /// <summary>
        /// Start of the IPv4 allocation pool for VLAN
        /// </summary>
        [Input("vlanAllocationPoolV4Start")]
        public Input<string>? VlanAllocationPoolV4Start { get; set; }

        /// <summary>
        /// CIDR for VLAN IPv4
        /// </summary>
        [Input("vlanCidrV4")]
        public Input<string>? VlanCidrV4 { get; set; }

        /// <summary>
        /// Gateway IP for VLAN IPv4
        /// </summary>
        [Input("vlanGatewayIpV4")]
        public Input<string>? VlanGatewayIpV4 { get; set; }

        /// <summary>
        /// VLAN ID for the network
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// Physical interface for VLAN
        /// </summary>
        [Input("vlanPhysicalInterface")]
        public Input<string>? VlanPhysicalInterface { get; set; }

        public NetworkArgs()
        {
        }
        public static new NetworkArgs Empty => new NetworkArgs();
    }

    public sealed class NetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block for the network
        /// </summary>
        [Input("cidrV4")]
        public Input<string>? CidrV4 { get; set; }

        /// <summary>
        /// If the network is default, this will be `true`
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// Name for the network
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The name of the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameserversV4s")]
        private InputList<string>? _nameserversV4s;

        /// <summary>
        /// List of nameservers for the network
        /// </summary>
        public InputList<string> NameserversV4s
        {
            get => _nameserversV4s ?? (_nameserversV4s = new InputList<string>());
            set => _nameserversV4s = value;
        }

        /// <summary>
        /// The region of the network
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// End of the IPv4 allocation pool for VLAN
        /// </summary>
        [Input("vlanAllocationPoolV4End")]
        public Input<string>? VlanAllocationPoolV4End { get; set; }

        /// <summary>
        /// Start of the IPv4 allocation pool for VLAN
        /// </summary>
        [Input("vlanAllocationPoolV4Start")]
        public Input<string>? VlanAllocationPoolV4Start { get; set; }

        /// <summary>
        /// CIDR for VLAN IPv4
        /// </summary>
        [Input("vlanCidrV4")]
        public Input<string>? VlanCidrV4 { get; set; }

        /// <summary>
        /// Gateway IP for VLAN IPv4
        /// </summary>
        [Input("vlanGatewayIpV4")]
        public Input<string>? VlanGatewayIpV4 { get; set; }

        /// <summary>
        /// VLAN ID for the network
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// Physical interface for VLAN
        /// </summary>
        [Input("vlanPhysicalInterface")]
        public Input<string>? VlanPhysicalInterface { get; set; }

        public NetworkState()
        {
        }
        public static new NetworkState Empty => new NetworkState();
    }
}
