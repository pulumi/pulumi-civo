// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    public static class GetObjectStore
    {
        /// <summary>
        /// Get information of an Object Store for use in other resources. This data source provides all of the Object Store's properties as configured on your Civo account.
        /// 
        /// Note: This data source returns a single Object Store. When specifying a name, an error will be raised if more than one Object Stores with the same name found.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var backup = Output.Create(Civo.GetObjectStore.InvokeAsync(new Civo.GetObjectStoreArgs
        ///         {
        ///             Name = "backup-server",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetObjectStoreResult> InvokeAsync(GetObjectStoreArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetObjectStoreResult>("civo:index/getObjectStore:getObjectStore", args ?? new GetObjectStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Get information of an Object Store for use in other resources. This data source provides all of the Object Store's properties as configured on your Civo account.
        /// 
        /// Note: This data source returns a single Object Store. When specifying a name, an error will be raised if more than one Object Stores with the same name found.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var backup = Output.Create(Civo.GetObjectStore.InvokeAsync(new Civo.GetObjectStoreArgs
        ///         {
        ///             Name = "backup-server",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetObjectStoreResult> Invoke(GetObjectStoreInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetObjectStoreResult>("civo:index/getObjectStore:getObjectStore", args ?? new GetObjectStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObjectStoreArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetObjectStoreArgs()
        {
        }
    }

    public sealed class GetObjectStoreInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetObjectStoreInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetObjectStoreResult
    {
        public readonly string AccessKeyId;
        public readonly string BucketUrl;
        public readonly string? Id;
        public readonly int MaxSizeGb;
        public readonly string? Name;
        public readonly string? Region;
        public readonly string Status;

        [OutputConstructor]
        private GetObjectStoreResult(
            string accessKeyId,

            string bucketUrl,

            string? id,

            int maxSizeGb,

            string? name,

            string? region,

            string status)
        {
            AccessKeyId = accessKeyId;
            BucketUrl = bucketUrl;
            Id = id;
            MaxSizeGb = maxSizeGb;
            Name = name;
            Region = region;
            Status = status;
        }
    }
}
