// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import civo:index/kubernetesNodePool:KubernetesNodePool my-pool 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af:502c1130-cb9b-4a88-b6d2-307bd96d946a
    /// ```
    /// </summary>
    [CivoResourceType("civo:index/kubernetesNodePool:KubernetesNodePool")]
    public partial class KubernetesNodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of your cluster
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Instance names in the nodepool
        /// </summary>
        [Output("instanceNames")]
        public Output<ImmutableArray<string>> InstanceNames { get; private set; } = null!;

        /// <summary>
        /// Node pool label, if you don't provide one, we will generate one for you
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Number of nodes in the nodepool
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// Node pool belongs to the public ip node pool
        /// </summary>
        [Output("publicIpNodePool")]
        public Output<bool> PublicIpNodePool { get; private set; } = null!;

        /// <summary>
        /// Size of the nodes in the nodepool
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        [Output("taints")]
        public Output<ImmutableArray<Outputs.KubernetesNodePoolTaint>> Taints { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesNodePool(string name, KubernetesNodePoolArgs args, CustomResourceOptions? options = null)
            : base("civo:index/kubernetesNodePool:KubernetesNodePool", name, args ?? new KubernetesNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesNodePool(string name, Input<string> id, KubernetesNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("civo:index/kubernetesNodePool:KubernetesNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesNodePool Get(string name, Input<string> id, KubernetesNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesNodePool(name, id, state, options);
        }
    }

    public sealed class KubernetesNodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of your cluster
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Node pool label, if you don't provide one, we will generate one for you
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Number of nodes in the nodepool
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        /// <summary>
        /// Node pool belongs to the public ip node pool
        /// </summary>
        [Input("publicIpNodePool")]
        public Input<bool>? PublicIpNodePool { get; set; }

        /// <summary>
        /// Size of the nodes in the nodepool
        /// </summary>
        [Input("size", required: true)]
        public Input<string> Size { get; set; } = null!;

        [Input("taints")]
        private InputList<Inputs.KubernetesNodePoolTaintArgs>? _taints;
        public InputList<Inputs.KubernetesNodePoolTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.KubernetesNodePoolTaintArgs>());
            set => _taints = value;
        }

        public KubernetesNodePoolArgs()
        {
        }
        public static new KubernetesNodePoolArgs Empty => new KubernetesNodePoolArgs();
    }

    public sealed class KubernetesNodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of your cluster
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("instanceNames")]
        private InputList<string>? _instanceNames;

        /// <summary>
        /// Instance names in the nodepool
        /// </summary>
        public InputList<string> InstanceNames
        {
            get => _instanceNames ?? (_instanceNames = new InputList<string>());
            set => _instanceNames = value;
        }

        /// <summary>
        /// Node pool label, if you don't provide one, we will generate one for you
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Number of nodes in the nodepool
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// Node pool belongs to the public ip node pool
        /// </summary>
        [Input("publicIpNodePool")]
        public Input<bool>? PublicIpNodePool { get; set; }

        /// <summary>
        /// Size of the nodes in the nodepool
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("taints")]
        private InputList<Inputs.KubernetesNodePoolTaintGetArgs>? _taints;
        public InputList<Inputs.KubernetesNodePoolTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.KubernetesNodePoolTaintGetArgs>());
            set => _taints = value;
        }

        public KubernetesNodePoolState()
        {
        }
        public static new KubernetesNodePoolState Empty => new KubernetesNodePoolState();
    }
}
