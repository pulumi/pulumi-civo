// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    /// <summary>
    /// Provides an Object Store resource. This can be used to create, modify, and delete object stores.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Civo = Pulumi.Civo;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var backupObjectStore = new Civo.ObjectStore("backupObjectStore", new()
    ///     {
    ///         MaxSizeGb = 500,
    ///         Region = "LON1",
    ///     });
    /// 
    ///     var backupObjectStoreCredential = Civo.GetObjectStoreCredential.Invoke(new()
    ///     {
    ///         Id = backupObjectStore.AccessKeyId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using ID
    /// 
    /// ```sh
    /// $ pulumi import civo:index/objectStore:ObjectStore custom_object b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
    /// ```
    /// </summary>
    [CivoResourceType("civo:index/objectStore:ObjectStore")]
    public partial class ObjectStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key ID from the Object Store credential. If this is not set, a new credential will be created.
        /// </summary>
        [Output("accessKeyId")]
        public Output<string> AccessKeyId { get; private set; } = null!;

        /// <summary>
        /// The endpoint of the Object Store. It is generated by the provider.
        /// </summary>
        [Output("bucketUrl")]
        public Output<string> BucketUrl { get; private set; } = null!;

        /// <summary>
        /// The maximum size of the Object Store. Default is 500GB.
        /// </summary>
        [Output("maxSizeGb")]
        public Output<int?> MaxSizeGb { get; private set; } = null!;

        /// <summary>
        /// The name of the Object Store. Must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The status of the Object Store.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectStore(string name, ObjectStoreArgs? args = null, CustomResourceOptions? options = null)
            : base("civo:index/objectStore:ObjectStore", name, args ?? new ObjectStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectStore(string name, Input<string> id, ObjectStoreState? state = null, CustomResourceOptions? options = null)
            : base("civo:index/objectStore:ObjectStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectStore Get(string name, Input<string> id, ObjectStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectStore(name, id, state, options);
        }
    }

    public sealed class ObjectStoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key ID from the Object Store credential. If this is not set, a new credential will be created.
        /// </summary>
        [Input("accessKeyId")]
        public Input<string>? AccessKeyId { get; set; }

        /// <summary>
        /// The maximum size of the Object Store. Default is 500GB.
        /// </summary>
        [Input("maxSizeGb")]
        public Input<int>? MaxSizeGb { get; set; }

        /// <summary>
        /// The name of the Object Store. Must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public ObjectStoreArgs()
        {
        }
        public static new ObjectStoreArgs Empty => new ObjectStoreArgs();
    }

    public sealed class ObjectStoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key ID from the Object Store credential. If this is not set, a new credential will be created.
        /// </summary>
        [Input("accessKeyId")]
        public Input<string>? AccessKeyId { get; set; }

        /// <summary>
        /// The endpoint of the Object Store. It is generated by the provider.
        /// </summary>
        [Input("bucketUrl")]
        public Input<string>? BucketUrl { get; set; }

        /// <summary>
        /// The maximum size of the Object Store. Default is 500GB.
        /// </summary>
        [Input("maxSizeGb")]
        public Input<int>? MaxSizeGb { get; set; }

        /// <summary>
        /// The name of the Object Store. Must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The status of the Object Store.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ObjectStoreState()
        {
        }
        public static new ObjectStoreState Empty => new ObjectStoreState();
    }
}
