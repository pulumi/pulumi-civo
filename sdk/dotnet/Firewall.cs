// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    /// <summary>
    /// Provides a Civo firewall resource. This can be used to create, modify, and delete firewalls.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Civo = Pulumi.Civo;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a network
    ///     var customNet = new Civo.Network("customNet", new()
    ///     {
    ///         Label = "my-custom-network",
    ///     });
    /// 
    ///     // Create a firewall
    ///     var wwwFirewall = new Civo.Firewall("wwwFirewall", new()
    ///     {
    ///         NetworkId = customNet.Id,
    ///     });
    /// 
    ///     // Create a firewall with the default rules
    ///     var wwwIndex_firewallFirewall = new Civo.Firewall("wwwIndex/firewallFirewall", new()
    ///     {
    ///         NetworkId = customNet.Id,
    ///         CreateDefaultRules = true,
    ///     });
    /// 
    ///     // Create a firewall withouth the default rules but with a custom rule
    ///     var wwwCivoIndex_firewallFirewall = new Civo.Firewall("wwwCivoIndex/firewallFirewall", new()
    ///     {
    ///         NetworkId = customNet.Id,
    ///         CreateDefaultRules = false,
    ///         IngressRules = new[]
    ///         {
    ///             new Civo.Inputs.FirewallIngressRuleArgs
    ///             {
    ///                 Label = "k8s",
    ///                 Protocol = "tcp",
    ///                 PortRange = "6443",
    ///                 Cidrs = new[]
    ///                 {
    ///                     "192.168.1.1/32",
    ///                     "192.168.10.4/32",
    ///                     "192.168.10.10/32",
    ///                 },
    ///                 Action = "allow",
    ///             },
    ///             new Civo.Inputs.FirewallIngressRuleArgs
    ///             {
    ///                 Label = "ssh",
    ///                 Protocol = "tcp",
    ///                 PortRange = "22",
    ///                 Cidrs = new[]
    ///                 {
    ///                     "192.168.1.1/32",
    ///                     "192.168.10.4/32",
    ///                     "192.168.10.10/32",
    ///                 },
    ///                 Action = "allow",
    ///             },
    ///         },
    ///         EgressRules = new[]
    ///         {
    ///             new Civo.Inputs.FirewallEgressRuleArgs
    ///             {
    ///                 Label = "all",
    ///                 Protocol = "tcp",
    ///                 PortRange = "1-65535",
    ///                 Cidrs = new[]
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 Action = "allow",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// using ID
    /// 
    /// ```sh
    ///  $ pulumi import civo:index/firewall:Firewall www b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
    /// ```
    /// </summary>
    [CivoResourceType("civo:index/firewall:Firewall")]
    public partial class Firewall : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you set to false you need to define at least one ingress or egress rule
        /// </summary>
        [Output("createDefaultRules")]
        public Output<bool?> CreateDefaultRules { get; private set; } = null!;

        /// <summary>
        /// The egress rules, this is a list of rules that will be applied to the firewall
        /// </summary>
        [Output("egressRules")]
        public Output<ImmutableArray<Outputs.FirewallEgressRule>> EgressRules { get; private set; } = null!;

        /// <summary>
        /// The ingress rules, this is a list of rules that will be applied to the firewall
        /// </summary>
        [Output("ingressRules")]
        public Output<ImmutableArray<Outputs.FirewallIngressRule>> IngressRules { get; private set; } = null!;

        /// <summary>
        /// The firewall name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The firewall network, if is not defined we use the default network
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The firewall region, if is not defined we use the global defined in the provider
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a Firewall resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Firewall(string name, FirewallArgs? args = null, CustomResourceOptions? options = null)
            : base("civo:index/firewall:Firewall", name, args ?? new FirewallArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Firewall(string name, Input<string> id, FirewallState? state = null, CustomResourceOptions? options = null)
            : base("civo:index/firewall:Firewall", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Firewall resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Firewall Get(string name, Input<string> id, FirewallState? state = null, CustomResourceOptions? options = null)
        {
            return new Firewall(name, id, state, options);
        }
    }

    public sealed class FirewallArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you set to false you need to define at least one ingress or egress rule
        /// </summary>
        [Input("createDefaultRules")]
        public Input<bool>? CreateDefaultRules { get; set; }

        [Input("egressRules")]
        private InputList<Inputs.FirewallEgressRuleArgs>? _egressRules;

        /// <summary>
        /// The egress rules, this is a list of rules that will be applied to the firewall
        /// </summary>
        public InputList<Inputs.FirewallEgressRuleArgs> EgressRules
        {
            get => _egressRules ?? (_egressRules = new InputList<Inputs.FirewallEgressRuleArgs>());
            set => _egressRules = value;
        }

        [Input("ingressRules")]
        private InputList<Inputs.FirewallIngressRuleArgs>? _ingressRules;

        /// <summary>
        /// The ingress rules, this is a list of rules that will be applied to the firewall
        /// </summary>
        public InputList<Inputs.FirewallIngressRuleArgs> IngressRules
        {
            get => _ingressRules ?? (_ingressRules = new InputList<Inputs.FirewallIngressRuleArgs>());
            set => _ingressRules = value;
        }

        /// <summary>
        /// The firewall name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The firewall network, if is not defined we use the default network
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The firewall region, if is not defined we use the global defined in the provider
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public FirewallArgs()
        {
        }
        public static new FirewallArgs Empty => new FirewallArgs();
    }

    public sealed class FirewallState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you set to false you need to define at least one ingress or egress rule
        /// </summary>
        [Input("createDefaultRules")]
        public Input<bool>? CreateDefaultRules { get; set; }

        [Input("egressRules")]
        private InputList<Inputs.FirewallEgressRuleGetArgs>? _egressRules;

        /// <summary>
        /// The egress rules, this is a list of rules that will be applied to the firewall
        /// </summary>
        public InputList<Inputs.FirewallEgressRuleGetArgs> EgressRules
        {
            get => _egressRules ?? (_egressRules = new InputList<Inputs.FirewallEgressRuleGetArgs>());
            set => _egressRules = value;
        }

        [Input("ingressRules")]
        private InputList<Inputs.FirewallIngressRuleGetArgs>? _ingressRules;

        /// <summary>
        /// The ingress rules, this is a list of rules that will be applied to the firewall
        /// </summary>
        public InputList<Inputs.FirewallIngressRuleGetArgs> IngressRules
        {
            get => _ingressRules ?? (_ingressRules = new InputList<Inputs.FirewallIngressRuleGetArgs>());
            set => _ingressRules = value;
        }

        /// <summary>
        /// The firewall name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The firewall network, if is not defined we use the default network
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The firewall region, if is not defined we use the global defined in the provider
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public FirewallState()
        {
        }
        public static new FirewallState Empty => new FirewallState();
    }
}
