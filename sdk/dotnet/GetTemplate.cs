// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Civo
{
    public static class GetTemplate
    {
        /// <summary>
        /// `civo.getTemplate` data source is deprecated. Moving forward, please use `civo.getDiskImage` data source.
        /// 
        /// Get information on an template for use in other resources (e.g. creating a instance) with the ability to filter the results.
        /// </summary>
        public static Task<GetTemplateResult> InvokeAsync(GetTemplateArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTemplateResult>("civo:index/getTemplate:getTemplate", args ?? new GetTemplateArgs(), options.WithVersion());

        /// <summary>
        /// `civo.getTemplate` data source is deprecated. Moving forward, please use `civo.getDiskImage` data source.
        /// 
        /// Get information on an template for use in other resources (e.g. creating a instance) with the ability to filter the results.
        /// </summary>
        public static Output<GetTemplateResult> Invoke(GetTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTemplateResult>("civo:index/getTemplate:getTemplate", args ?? new GetTemplateInvokeArgs(), options.WithVersion());
    }


    public sealed class GetTemplateArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetTemplateFilterArgs>? _filters;

        /// <summary>
        /// One or more key/value pairs on which to filter results
        /// </summary>
        public List<Inputs.GetTemplateFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTemplateFilterArgs>());
            set => _filters = value;
        }

        [Input("region")]
        public string? Region { get; set; }

        [Input("sorts")]
        private List<Inputs.GetTemplateSortArgs>? _sorts;

        /// <summary>
        /// One or more key/direction pairs on which to sort results
        /// </summary>
        public List<Inputs.GetTemplateSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetTemplateSortArgs>());
            set => _sorts = value;
        }

        public GetTemplateArgs()
        {
        }
    }

    public sealed class GetTemplateInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetTemplateFilterInputArgs>? _filters;

        /// <summary>
        /// One or more key/value pairs on which to filter results
        /// </summary>
        public InputList<Inputs.GetTemplateFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTemplateFilterInputArgs>());
            set => _filters = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("sorts")]
        private InputList<Inputs.GetTemplateSortInputArgs>? _sorts;

        /// <summary>
        /// One or more key/direction pairs on which to sort results
        /// </summary>
        public InputList<Inputs.GetTemplateSortInputArgs> Sorts
        {
            get => _sorts ?? (_sorts = new InputList<Inputs.GetTemplateSortInputArgs>());
            set => _sorts = value;
        }

        public GetTemplateInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTemplateResult
    {
        /// <summary>
        /// One or more key/value pairs on which to filter results
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTemplateFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Region;
        /// <summary>
        /// One or more key/direction pairs on which to sort results
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTemplateSortResult> Sorts;
        public readonly ImmutableArray<Outputs.GetTemplateTemplateResult> Templates;

        [OutputConstructor]
        private GetTemplateResult(
            ImmutableArray<Outputs.GetTemplateFilterResult> filters,

            string id,

            string? region,

            ImmutableArray<Outputs.GetTemplateSortResult> sorts,

            ImmutableArray<Outputs.GetTemplateTemplateResult> templates)
        {
            Filters = filters;
            Id = id;
            Region = region;
            Sorts = sorts;
            Templates = templates;
        }
    }
}
