// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    [CivoResourceType("civo:index/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : Pulumi.CustomResource
    {
        /// <summary>
        /// a list of backend instances, each containing an instance_id, protocol (http or https) and port
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.LoadBalancerBackend>> Backends { get; private set; } = null!;

        /// <summary>
        /// how long to wait in seconds before determining a backend has failed, defaults to 30
        /// </summary>
        [Output("failTimeout")]
        public Output<int> FailTimeout { get; private set; } = null!;

        /// <summary>
        /// what URL should be used on the backends to determine if it's OK (2xx/3xx status), defaults to /
        /// </summary>
        [Output("healthCheckPath")]
        public Output<string?> HealthCheckPath { get; private set; } = null!;

        /// <summary>
        /// the hostname to receive traffic for, e.g. www.example.com (optional: sets hostname to loadbalancer-uuid.civo.com if
        /// blank)
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// should self-signed/invalid certificates be ignored from the backend servers, defaults to true
        /// </summary>
        [Output("ignoreInvalidBackendTls")]
        public Output<bool?> IgnoreInvalidBackendTls { get; private set; } = null!;

        /// <summary>
        /// how many concurrent connections can each backend handle, defaults to 10
        /// </summary>
        [Output("maxConns")]
        public Output<int> MaxConns { get; private set; } = null!;

        /// <summary>
        /// the size in megabytes of the maximum request content that will be accepted, defaults to 20
        /// </summary>
        [Output("maxRequestSize")]
        public Output<int> MaxRequestSize { get; private set; } = null!;

        /// <summary>
        /// one of: least_conn (sends new requests to the least busy server), random (sends new requests to a random backend),
        /// round_robin (sends new requests to the next backend in order), ip_hash (sends requests from a given IP address to the
        /// same backend), default is random
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// you can listen on any port, the default is 80 to match the default protocol of http,if not you must specify it here
        /// (commonly 80 for HTTP or 443 for HTTPS)
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// either http or https. If you specify https then you must also provide the next two fields, the default is http
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// if your protocol is https then you should send the TLS certificate in Base64-encoded PEM format
        /// </summary>
        [Output("tlsCertificate")]
        public Output<string?> TlsCertificate { get; private set; } = null!;

        /// <summary>
        /// if your protocol is https then you should send the TLS private key in Base64-encoded PEM format
        /// </summary>
        [Output("tlsKey")]
        public Output<string?> TlsKey { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("civo:index/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("civo:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<Inputs.LoadBalancerBackendArgs>? _backends;

        /// <summary>
        /// a list of backend instances, each containing an instance_id, protocol (http or https) and port
        /// </summary>
        public InputList<Inputs.LoadBalancerBackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.LoadBalancerBackendArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// how long to wait in seconds before determining a backend has failed, defaults to 30
        /// </summary>
        [Input("failTimeout", required: true)]
        public Input<int> FailTimeout { get; set; } = null!;

        /// <summary>
        /// what URL should be used on the backends to determine if it's OK (2xx/3xx status), defaults to /
        /// </summary>
        [Input("healthCheckPath")]
        public Input<string>? HealthCheckPath { get; set; }

        /// <summary>
        /// the hostname to receive traffic for, e.g. www.example.com (optional: sets hostname to loadbalancer-uuid.civo.com if
        /// blank)
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// should self-signed/invalid certificates be ignored from the backend servers, defaults to true
        /// </summary>
        [Input("ignoreInvalidBackendTls")]
        public Input<bool>? IgnoreInvalidBackendTls { get; set; }

        /// <summary>
        /// how many concurrent connections can each backend handle, defaults to 10
        /// </summary>
        [Input("maxConns", required: true)]
        public Input<int> MaxConns { get; set; } = null!;

        /// <summary>
        /// the size in megabytes of the maximum request content that will be accepted, defaults to 20
        /// </summary>
        [Input("maxRequestSize", required: true)]
        public Input<int> MaxRequestSize { get; set; } = null!;

        /// <summary>
        /// one of: least_conn (sends new requests to the least busy server), random (sends new requests to a random backend),
        /// round_robin (sends new requests to the next backend in order), ip_hash (sends requests from a given IP address to the
        /// same backend), default is random
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        /// <summary>
        /// you can listen on any port, the default is 80 to match the default protocol of http,if not you must specify it here
        /// (commonly 80 for HTTP or 443 for HTTPS)
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// either http or https. If you specify https then you must also provide the next two fields, the default is http
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// if your protocol is https then you should send the TLS certificate in Base64-encoded PEM format
        /// </summary>
        [Input("tlsCertificate")]
        public Input<string>? TlsCertificate { get; set; }

        /// <summary>
        /// if your protocol is https then you should send the TLS private key in Base64-encoded PEM format
        /// </summary>
        [Input("tlsKey")]
        public Input<string>? TlsKey { get; set; }

        public LoadBalancerArgs()
        {
        }
    }

    public sealed class LoadBalancerState : Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<Inputs.LoadBalancerBackendGetArgs>? _backends;

        /// <summary>
        /// a list of backend instances, each containing an instance_id, protocol (http or https) and port
        /// </summary>
        public InputList<Inputs.LoadBalancerBackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.LoadBalancerBackendGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// how long to wait in seconds before determining a backend has failed, defaults to 30
        /// </summary>
        [Input("failTimeout")]
        public Input<int>? FailTimeout { get; set; }

        /// <summary>
        /// what URL should be used on the backends to determine if it's OK (2xx/3xx status), defaults to /
        /// </summary>
        [Input("healthCheckPath")]
        public Input<string>? HealthCheckPath { get; set; }

        /// <summary>
        /// the hostname to receive traffic for, e.g. www.example.com (optional: sets hostname to loadbalancer-uuid.civo.com if
        /// blank)
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// should self-signed/invalid certificates be ignored from the backend servers, defaults to true
        /// </summary>
        [Input("ignoreInvalidBackendTls")]
        public Input<bool>? IgnoreInvalidBackendTls { get; set; }

        /// <summary>
        /// how many concurrent connections can each backend handle, defaults to 10
        /// </summary>
        [Input("maxConns")]
        public Input<int>? MaxConns { get; set; }

        /// <summary>
        /// the size in megabytes of the maximum request content that will be accepted, defaults to 20
        /// </summary>
        [Input("maxRequestSize")]
        public Input<int>? MaxRequestSize { get; set; }

        /// <summary>
        /// one of: least_conn (sends new requests to the least busy server), random (sends new requests to a random backend),
        /// round_robin (sends new requests to the next backend in order), ip_hash (sends requests from a given IP address to the
        /// same backend), default is random
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// you can listen on any port, the default is 80 to match the default protocol of http,if not you must specify it here
        /// (commonly 80 for HTTP or 443 for HTTPS)
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// either http or https. If you specify https then you must also provide the next two fields, the default is http
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// if your protocol is https then you should send the TLS certificate in Base64-encoded PEM format
        /// </summary>
        [Input("tlsCertificate")]
        public Input<string>? TlsCertificate { get; set; }

        /// <summary>
        /// if your protocol is https then you should send the TLS private key in Base64-encoded PEM format
        /// </summary>
        [Input("tlsKey")]
        public Input<string>? TlsKey { get; set; }

        public LoadBalancerState()
        {
        }
    }
}
