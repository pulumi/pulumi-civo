// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    public static class GetLoadBalancer
    {
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("civo:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithVersion());
    }


    public sealed class GetLoadBalancerArgs : Pulumi.InvokeArgs
    {
        [Input("hostname")]
        public string? Hostname { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        public GetLoadBalancerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        public readonly ImmutableArray<Outputs.GetLoadBalancerBackendResult> Backends;
        public readonly int FailTimeout;
        public readonly string HealthCheckPath;
        public readonly string? Hostname;
        public readonly string? Id;
        public readonly bool IgnoreInvalidBackendTls;
        public readonly int MaxConns;
        public readonly int MaxRequestSize;
        public readonly string Policy;
        public readonly int Port;
        public readonly string Protocol;
        public readonly string TlsCertificate;
        public readonly string TlsKey;

        [OutputConstructor]
        private GetLoadBalancerResult(
            ImmutableArray<Outputs.GetLoadBalancerBackendResult> backends,

            int failTimeout,

            string healthCheckPath,

            string? hostname,

            string? id,

            bool ignoreInvalidBackendTls,

            int maxConns,

            int maxRequestSize,

            string policy,

            int port,

            string protocol,

            string tlsCertificate,

            string tlsKey)
        {
            Backends = backends;
            FailTimeout = failTimeout;
            HealthCheckPath = healthCheckPath;
            Hostname = hostname;
            Id = id;
            IgnoreInvalidBackendTls = ignoreInvalidBackendTls;
            MaxConns = maxConns;
            MaxRequestSize = maxRequestSize;
            Policy = policy;
            Port = port;
            Protocol = protocol;
            TlsCertificate = tlsCertificate;
            TlsKey = tlsKey;
        }
    }
}
