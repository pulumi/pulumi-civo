// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    public static class GetKubernetesCluster
    {
        /// <summary>
        /// Provides a Civo Kubernetes cluster data source.
        /// 
        /// Note: This data source returns a single Kubernetes cluster. When specifying a name, an error will be raised if more than one Kubernetes cluster found.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_cluster = Output.Create(Civo.GetKubernetesCluster.InvokeAsync(new Civo.GetKubernetesClusterArgs
        ///         {
        ///             Name = "my-super-cluster",
        ///         }));
        ///         this.KubernetesClusterOutput = my_cluster.Apply(my_cluster =&gt; my_cluster.MasterIp);
        ///     }
        /// 
        ///     [Output("kubernetesClusterOutput")]
        ///     public Output&lt;string&gt; KubernetesClusterOutput { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKubernetesClusterResult> InvokeAsync(GetKubernetesClusterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesClusterResult>("civo:index/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a Civo Kubernetes cluster data source.
        /// 
        /// Note: This data source returns a single Kubernetes cluster. When specifying a name, an error will be raised if more than one Kubernetes cluster found.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_cluster = Output.Create(Civo.GetKubernetesCluster.InvokeAsync(new Civo.GetKubernetesClusterArgs
        ///         {
        ///             Name = "my-super-cluster",
        ///         }));
        ///         this.KubernetesClusterOutput = my_cluster.Apply(my_cluster =&gt; my_cluster.MasterIp);
        ///     }
        /// 
        ///     [Output("kubernetesClusterOutput")]
        ///     public Output&lt;string&gt; KubernetesClusterOutput { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKubernetesClusterResult> Invoke(GetKubernetesClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKubernetesClusterResult>("civo:index/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesClusterArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetKubernetesClusterArgs()
        {
        }
    }

    public sealed class GetKubernetesClusterInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetKubernetesClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKubernetesClusterResult
    {
        public readonly string ApiEndpoint;
        public readonly string Applications;
        public readonly string Cni;
        public readonly string CreatedAt;
        public readonly string DnsEntry;
        public readonly string? Id;
        public readonly ImmutableArray<Outputs.GetKubernetesClusterInstalledApplicationResult> InstalledApplications;
        public readonly string Kubeconfig;
        public readonly string KubernetesVersion;
        public readonly string MasterIp;
        public readonly string? Name;
        public readonly int NumTargetNodes;
        public readonly ImmutableArray<Outputs.GetKubernetesClusterPoolResult> Pools;
        public readonly bool Ready;
        public readonly string? Region;
        public readonly string Status;
        public readonly ImmutableArray<string> Tags;
        public readonly string TargetNodesSize;

        [OutputConstructor]
        private GetKubernetesClusterResult(
            string apiEndpoint,

            string applications,

            string cni,

            string createdAt,

            string dnsEntry,

            string? id,

            ImmutableArray<Outputs.GetKubernetesClusterInstalledApplicationResult> installedApplications,

            string kubeconfig,

            string kubernetesVersion,

            string masterIp,

            string? name,

            int numTargetNodes,

            ImmutableArray<Outputs.GetKubernetesClusterPoolResult> pools,

            bool ready,

            string? region,

            string status,

            ImmutableArray<string> tags,

            string targetNodesSize)
        {
            ApiEndpoint = apiEndpoint;
            Applications = applications;
            Cni = cni;
            CreatedAt = createdAt;
            DnsEntry = dnsEntry;
            Id = id;
            InstalledApplications = installedApplications;
            Kubeconfig = kubeconfig;
            KubernetesVersion = kubernetesVersion;
            MasterIp = masterIp;
            Name = name;
            NumTargetNodes = numTargetNodes;
            Pools = pools;
            Ready = ready;
            Region = region;
            Status = status;
            Tags = tags;
            TargetNodesSize = targetNodesSize;
        }
    }
}
