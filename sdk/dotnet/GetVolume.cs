// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    public static class GetVolume
    {
        /// <summary>
        /// Get information on a volume for use in other resources. This data source provides all of the volumes properties as configured on your Civo account.
        /// 
        /// An error will be raised if the provided volume name does not exist in your Civo account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mysql = Output.Create(Civo.GetVolume.InvokeAsync(new Civo.GetVolumeArgs
        ///         {
        ///             Name = "database-mysql",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("civo:index/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a volume for use in other resources. This data source provides all of the volumes properties as configured on your Civo account.
        /// 
        /// An error will be raised if the provided volume name does not exist in your Civo account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mysql = Output.Create(Civo.GetVolume.InvokeAsync(new Civo.GetVolumeArgs
        ///         {
        ///             Name = "database-mysql",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("civo:index/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetVolumeArgs()
        {
        }
    }

    public sealed class GetVolumeInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetVolumeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        public readonly string CreatedAt;
        public readonly string? Id;
        public readonly string MountPoint;
        public readonly string? Name;
        public readonly string? Region;
        public readonly int SizeGb;

        [OutputConstructor]
        private GetVolumeResult(
            string createdAt,

            string? id,

            string mountPoint,

            string? name,

            string? region,

            int sizeGb)
        {
            CreatedAt = createdAt;
            Id = id;
            MountPoint = mountPoint;
            Name = name;
            Region = region;
            SizeGb = sizeGb;
        }
    }
}
