// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Civo
{
    public static class GetFirewall
    {
        /// <summary>
        /// Retrieve information about a firewall for use in other resources.
        /// 
        /// This data source provides all of the firewall's properties as configured on your Civo account.
        /// 
        /// Firewalls may be looked up by id or name, and you can optionally pass region if you want to make a lookup for an expecific firewall inside that region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Civo.GetFirewall.InvokeAsync(new Civo.GetFirewallArgs
        ///         {
        ///             Name = "test-firewall",
        ///             Region = "NYC1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFirewallResult> InvokeAsync(GetFirewallArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFirewallResult>("civo:index/getFirewall:getFirewall", args ?? new GetFirewallArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about a firewall for use in other resources.
        /// 
        /// This data source provides all of the firewall's properties as configured on your Civo account.
        /// 
        /// Firewalls may be looked up by id or name, and you can optionally pass region if you want to make a lookup for an expecific firewall inside that region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Civo = Pulumi.Civo;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Civo.GetFirewall.InvokeAsync(new Civo.GetFirewallArgs
        ///         {
        ///             Name = "test-firewall",
        ///             Region = "NYC1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFirewallResult> Invoke(GetFirewallInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFirewallResult>("civo:index/getFirewall:getFirewall", args ?? new GetFirewallInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetFirewallArgs()
        {
        }
    }

    public sealed class GetFirewallInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetFirewallInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFirewallResult
    {
        public readonly string? Id;
        public readonly string? Name;
        public readonly string NetworkId;
        public readonly string? Region;

        [OutputConstructor]
        private GetFirewallResult(
            string? id,

            string? name,

            string networkId,

            string? region)
        {
            Id = id;
            Name = name;
            NetworkId = networkId;
            Region = region;
        }
    }
}
