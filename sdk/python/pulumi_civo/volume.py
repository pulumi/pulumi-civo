# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Volume']


class Volume(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bootable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size_gb: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Civo volume which can be attached to a Instance in order to provide expanded storage.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_civo as civo

        db = civo.Volume("db",
            bootable=False,
            size_gb=60)
        ```

        ## Import

        Volumes can be imported using the `volume id`, e.g.

        ```sh
         $ pulumi import civo:index/volume:Volume db 506f78a4-e098-11e5-ad9f-000f53306ae1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] bootable: Mark the volume as bootable.
        :param pulumi.Input[str] name: A name that you wish to use to refer to this volume .
        :param pulumi.Input[int] size_gb: A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes .
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if bootable is None and not opts.urn:
                raise TypeError("Missing required property 'bootable'")
            __props__['bootable'] = bootable
            __props__['name'] = name
            if size_gb is None and not opts.urn:
                raise TypeError("Missing required property 'size_gb'")
            __props__['size_gb'] = size_gb
            __props__['created_at'] = None
            __props__['mount_point'] = None
        super(Volume, __self__).__init__(
            'civo:index/volume:Volume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bootable: Optional[pulumi.Input[bool]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            mount_point: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            size_gb: Optional[pulumi.Input[int]] = None) -> 'Volume':
        """
        Get an existing Volume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] bootable: Mark the volume as bootable.
        :param pulumi.Input[str] created_at: The date of the creation of the volume.
        :param pulumi.Input[str] mount_point: The mount point of the volume.
        :param pulumi.Input[str] name: A name that you wish to use to refer to this volume .
        :param pulumi.Input[int] size_gb: A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes .
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["bootable"] = bootable
        __props__["created_at"] = created_at
        __props__["mount_point"] = mount_point
        __props__["name"] = name
        __props__["size_gb"] = size_gb
        return Volume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bootable(self) -> pulumi.Output[bool]:
        """
        Mark the volume as bootable.
        """
        return pulumi.get(self, "bootable")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The date of the creation of the volume.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> pulumi.Output[str]:
        """
        The mount point of the volume.
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name that you wish to use to refer to this volume .
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> pulumi.Output[int]:
        """
        A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes .
        """
        return pulumi.get(self, "size_gb")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

