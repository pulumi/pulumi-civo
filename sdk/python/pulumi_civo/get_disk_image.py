# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDiskImageResult',
    'AwaitableGetDiskImageResult',
    'get_disk_image',
]

@pulumi.output_type
class GetDiskImageResult:
    """
    A collection of values returned by getDiskImage.
    """
    def __init__(__self__, diskimages=None, filters=None, id=None, region=None, sorts=None):
        if diskimages and not isinstance(diskimages, list):
            raise TypeError("Expected argument 'diskimages' to be a list")
        pulumi.set(__self__, "diskimages", diskimages)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def diskimages(self) -> Sequence['outputs.GetDiskImageDiskimageResult']:
        return pulumi.get(self, "diskimages")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDiskImageFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetDiskImageSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetDiskImageResult(GetDiskImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiskImageResult(
            diskimages=self.diskimages,
            filters=self.filters,
            id=self.id,
            region=self.region,
            sorts=self.sorts)


def get_disk_image(filters: Optional[Sequence[pulumi.InputType['GetDiskImageFilterArgs']]] = None,
                   region: Optional[str] = None,
                   sorts: Optional[Sequence[pulumi.InputType['GetDiskImageSortArgs']]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiskImageResult:
    """
    Get information on an disk image for use in other resources (e.g. creating a instance) with the ability to filter the results.

    ## Schema

    ### Optional

    - **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)
    - **id** (String) The ID of this resource.
    - **region** (String) If is used, all disk image will be from this region. Required if no region is set in provider.
    - **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)

    ### Read-Only

    - **diskimages** (List of Object) (see below for nested schema)

    <a id="nestedblock--filter"></a>
    ### Nested Schema for `filter`

    Required:

    - **key** (String) Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.
    - **values** (List of String) Only retrieves `diskimages` which keys has value that matches one of the values provided here

    Optional:

    - **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
    - **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.

    <a id="nestedblock--sort"></a>
    ### Nested Schema for `sort`

    Required:

    - **key** (String) Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.

    Optional:

    - **direction** (String) The sort direction. This may be either `asc` or `desc`.

    <a id="nestedatt--diskimages"></a>
    ### Nested Schema for `diskimages`

    Read-Only:

    - **id** (String)
    - **label** (String)
    - **name** (String)
    - **version** (String)
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['region'] = region
    __args__['sorts'] = sorts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getDiskImage:getDiskImage', __args__, opts=opts, typ=GetDiskImageResult).value

    return AwaitableGetDiskImageResult(
        diskimages=__ret__.diskimages,
        filters=__ret__.filters,
        id=__ret__.id,
        region=__ret__.region,
        sorts=__ret__.sorts)
