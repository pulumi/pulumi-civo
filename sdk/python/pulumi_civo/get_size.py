# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSizeResult',
    'AwaitableGetSizeResult',
    'get_size',
    'get_size_output',
]

@pulumi.output_type
class GetSizeResult:
    """
    A collection of values returned by getSize.
    """
    def __init__(__self__, filters=None, id=None, sizes=None, sorts=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sizes and not isinstance(sizes, list):
            raise TypeError("Expected argument 'sizes' to be a list")
        pulumi.set(__self__, "sizes", sizes)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSizeFilterResult']]:
        """
        One or more key/value pairs on which to filter results
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def sizes(self) -> Sequence['outputs.GetSizeSizeResult']:
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetSizeSortResult']]:
        """
        One or more key/direction pairs on which to sort results
        """
        return pulumi.get(self, "sorts")


class AwaitableGetSizeResult(GetSizeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSizeResult(
            filters=self.filters,
            id=self.id,
            sizes=self.sizes,
            sorts=self.sorts)


def get_size(filters: Optional[Sequence[pulumi.InputType['GetSizeFilterArgs']]] = None,
             sorts: Optional[Sequence[pulumi.InputType['GetSizeSortArgs']]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSizeResult:
    """
    Retrieves information about the sizes that Civo supports, with the ability to filter the results.


    :param Sequence[pulumi.InputType['GetSizeFilterArgs']] filters: One or more key/value pairs on which to filter results
    :param Sequence[pulumi.InputType['GetSizeSortArgs']] sorts: One or more key/direction pairs on which to sort results
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getSize:getSize', __args__, opts=opts, typ=GetSizeResult).value

    return AwaitableGetSizeResult(
        filters=__ret__.filters,
        id=__ret__.id,
        sizes=__ret__.sizes,
        sorts=__ret__.sorts)


@_utilities.lift_output_func(get_size)
def get_size_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSizeFilterArgs']]]]] = None,
                    sorts: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSizeSortArgs']]]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSizeResult]:
    """
    Retrieves information about the sizes that Civo supports, with the ability to filter the results.


    :param Sequence[pulumi.InputType['GetSizeFilterArgs']] filters: One or more key/value pairs on which to filter results
    :param Sequence[pulumi.InputType['GetSizeSortArgs']] sorts: One or more key/direction pairs on which to sort results
    """
    ...
