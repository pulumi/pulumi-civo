# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['KubernetesCluster']


class KubernetesCluster(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 num_target_nodes: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 target_nodes_size: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        ## Import

        Then the Kubernetes cluster can be imported using the cluster's `id`, e.g.

        ```sh
         $ pulumi import civo:index/kubernetesCluster:KubernetesCluster my-cluster 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] applications: A comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. If you want to remove a default installed application, prefix it with a '-', e.g. -traefik
        :param pulumi.Input[str] kubernetes_version: The version of k3s to install (The default is currently the latest available).
        :param pulumi.Input[str] name: A name for the Kubernetes cluster.
        :param pulumi.Input[int] num_target_nodes: The number of instances to create (The default at the time of writing is 3).
        :param pulumi.Input[str] tags: A space separated list of tags, to be used freely as required.
        :param pulumi.Input[str] target_nodes_size: The size of each node (The default is currently g2.small)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['applications'] = applications
            __props__['kubernetes_version'] = kubernetes_version
            __props__['name'] = name
            __props__['num_target_nodes'] = num_target_nodes
            __props__['tags'] = tags
            __props__['target_nodes_size'] = target_nodes_size
            __props__['api_endpoint'] = None
            __props__['built_at'] = None
            __props__['created_at'] = None
            __props__['dns_entry'] = None
            __props__['installed_applications'] = None
            __props__['instances'] = None
            __props__['kubeconfig'] = None
            __props__['master_ip'] = None
            __props__['ready'] = None
            __props__['status'] = None
        super(KubernetesCluster, __self__).__init__(
            'civo:index/kubernetesCluster:KubernetesCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_endpoint: Optional[pulumi.Input[str]] = None,
            applications: Optional[pulumi.Input[str]] = None,
            built_at: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            dns_entry: Optional[pulumi.Input[str]] = None,
            installed_applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KubernetesClusterInstalledApplicationArgs']]]]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KubernetesClusterInstanceArgs']]]]] = None,
            kubeconfig: Optional[pulumi.Input[str]] = None,
            kubernetes_version: Optional[pulumi.Input[str]] = None,
            master_ip: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            num_target_nodes: Optional[pulumi.Input[int]] = None,
            ready: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[str]] = None,
            target_nodes_size: Optional[pulumi.Input[str]] = None) -> 'KubernetesCluster':
        """
        Get an existing KubernetesCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_endpoint: The base URL of the API server on the Kubernetes master node.
        :param pulumi.Input[str] applications: A comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. If you want to remove a default installed application, prefix it with a '-', e.g. -traefik
        :param pulumi.Input[str] built_at: The date where the Kubernetes cluster was build.
        :param pulumi.Input[str] created_at: The date where the Kubernetes cluster was create.
        :param pulumi.Input[str] dns_entry: The unique dns entry for the cluster in this case point to the master.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KubernetesClusterInstalledApplicationArgs']]]] installed_applications: A unique ID that can be used to identify and reference a Kubernetes cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KubernetesClusterInstanceArgs']]]] instances: In addition to the arguments provided, these additional attributes about the cluster's default node instance are exported.
        :param pulumi.Input[str] kubeconfig: A representation of the Kubernetes cluster's kubeconfig in yaml format.
        :param pulumi.Input[str] kubernetes_version: The version of k3s to install (The default is currently the latest available).
        :param pulumi.Input[str] master_ip: The Ip of the Kubernetes master node.
        :param pulumi.Input[str] name: A name for the Kubernetes cluster.
        :param pulumi.Input[int] num_target_nodes: The number of instances to create (The default at the time of writing is 3).
        :param pulumi.Input[str] status: The status of Kubernetes cluster.
               * `ready` -If the Kubernetes cluster is ready.
        :param pulumi.Input[str] tags: A space separated list of tags, to be used freely as required.
        :param pulumi.Input[str] target_nodes_size: The size of each node (The default is currently g2.small)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["api_endpoint"] = api_endpoint
        __props__["applications"] = applications
        __props__["built_at"] = built_at
        __props__["created_at"] = created_at
        __props__["dns_entry"] = dns_entry
        __props__["installed_applications"] = installed_applications
        __props__["instances"] = instances
        __props__["kubeconfig"] = kubeconfig
        __props__["kubernetes_version"] = kubernetes_version
        __props__["master_ip"] = master_ip
        __props__["name"] = name
        __props__["num_target_nodes"] = num_target_nodes
        __props__["ready"] = ready
        __props__["status"] = status
        __props__["tags"] = tags
        __props__["target_nodes_size"] = target_nodes_size
        return KubernetesCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiEndpoint")
    def api_endpoint(self) -> pulumi.Output[str]:
        """
        The base URL of the API server on the Kubernetes master node.
        """
        return pulumi.get(self, "api_endpoint")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[str]]:
        """
        A comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. If you want to remove a default installed application, prefix it with a '-', e.g. -traefik
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="builtAt")
    def built_at(self) -> pulumi.Output[str]:
        """
        The date where the Kubernetes cluster was build.
        """
        return pulumi.get(self, "built_at")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The date where the Kubernetes cluster was create.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dnsEntry")
    def dns_entry(self) -> pulumi.Output[str]:
        """
        The unique dns entry for the cluster in this case point to the master.
        """
        return pulumi.get(self, "dns_entry")

    @property
    @pulumi.getter(name="installedApplications")
    def installed_applications(self) -> pulumi.Output[Sequence['outputs.KubernetesClusterInstalledApplication']]:
        """
        A unique ID that can be used to identify and reference a Kubernetes cluster.
        """
        return pulumi.get(self, "installed_applications")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.KubernetesClusterInstance']]:
        """
        In addition to the arguments provided, these additional attributes about the cluster's default node instance are exported.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Output[str]:
        """
        A representation of the Kubernetes cluster's kubeconfig in yaml format.
        """
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[str]:
        """
        The version of k3s to install (The default is currently the latest available).
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="masterIp")
    def master_ip(self) -> pulumi.Output[str]:
        """
        The Ip of the Kubernetes master node.
        """
        return pulumi.get(self, "master_ip")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A name for the Kubernetes cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numTargetNodes")
    def num_target_nodes(self) -> pulumi.Output[Optional[int]]:
        """
        The number of instances to create (The default at the time of writing is 3).
        """
        return pulumi.get(self, "num_target_nodes")

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[str]]:
        """
        A space separated list of tags, to be used freely as required.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetNodesSize")
    def target_nodes_size(self) -> pulumi.Output[Optional[str]]:
        """
        The size of each node (The default is currently g2.small)
        """
        return pulumi.get(self, "target_nodes_size")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

