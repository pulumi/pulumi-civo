# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetInstancesSizeResult',
    'AwaitableGetInstancesSizeResult',
    'get_instances_size',
]

@pulumi.output_type
class GetInstancesSizeResult:
    """
    A collection of values returned by getInstancesSize.
    """
    def __init__(__self__, filters=None, id=None, sizes=None, sorts=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sizes and not isinstance(sizes, list):
            raise TypeError("Expected argument 'sizes' to be a list")
        pulumi.set(__self__, "sizes", sizes)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetInstancesSizeFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def sizes(self) -> Sequence['outputs.GetInstancesSizeSizeResult']:
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetInstancesSizeSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetInstancesSizeResult(GetInstancesSizeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesSizeResult(
            filters=self.filters,
            id=self.id,
            sizes=self.sizes,
            sorts=self.sorts)


def get_instances_size(filters: Optional[Sequence[pulumi.InputType['GetInstancesSizeFilterArgs']]] = None,
                       sorts: Optional[Sequence[pulumi.InputType['GetInstancesSizeSortArgs']]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesSizeResult:
    """
    Retrieves information about the instance sizes that Civo supports, with the ability to filter the results.

    ## Schema

    ### Optional

    - **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)
    - **id** (String) The ID of this resource.
    - **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)

    ### Read-Only

    - **sizes** (List of Object) (see below for nested schema)

    <a id="nestedblock--filter"></a>
    ### Nested Schema for `filter`

    Required:

    - **key** (String) Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `name`, `ram`, `selectable`, `type`.
    - **values** (List of String) Only retrieves `sizes` which keys has value that matches one of the values provided here

    Optional:

    - **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.
    - **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.

    <a id="nestedblock--sort"></a>
    ### Nested Schema for `sort`

    Required:

    - **key** (String) Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `name`, `ram`, `selectable`, `type`.

    Optional:

    - **direction** (String) The sort direction. This may be either `asc` or `desc`.

    <a id="nestedatt--sizes"></a>
    ### Nested Schema for `sizes`

    Read-Only:

    - **cpu** (Number)
    - **description** (String)
    - **disk** (Number)
    - **name** (String)
    - **ram** (Number)
    - **selectable** (Boolean)
    - **type** (String)
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getInstancesSize:getInstancesSize', __args__, opts=opts, typ=GetInstancesSizeResult).value

    return AwaitableGetInstancesSizeResult(
        filters=__ret__.filters,
        id=__ret__.id,
        sizes=__ret__.sizes,
        sorts=__ret__.sorts)
