# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NetworkArgs', 'Network']

@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 cidr_v4: Optional[pulumi.Input[str]] = None,
                 nameservers_v4s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_end: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_start: Optional[pulumi.Input[str]] = None,
                 vlan_cidr_v4: Optional[pulumi.Input[str]] = None,
                 vlan_gateway_ip_v4: Optional[pulumi.Input[str]] = None,
                 vlan_hardware_addr: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Network resource.
        :param pulumi.Input[str] label: Name for the network
        :param pulumi.Input[str] cidr_v4: The CIDR block for the network
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers_v4s: List of nameservers for the network
        :param pulumi.Input[str] region: The region of the network
        :param pulumi.Input[str] vlan_allocation_pool_v4_end: End of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_allocation_pool_v4_start: Start of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_cidr_v4: CIDR for VLAN IPv4
        :param pulumi.Input[str] vlan_gateway_ip_v4: Gateway IP for VLAN IPv4
        :param pulumi.Input[str] vlan_hardware_addr: Hardware address for VLAN
        :param pulumi.Input[int] vlan_id: VLAN ID for the network
        """
        pulumi.set(__self__, "label", label)
        if cidr_v4 is not None:
            pulumi.set(__self__, "cidr_v4", cidr_v4)
        if nameservers_v4s is not None:
            pulumi.set(__self__, "nameservers_v4s", nameservers_v4s)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vlan_allocation_pool_v4_end is not None:
            pulumi.set(__self__, "vlan_allocation_pool_v4_end", vlan_allocation_pool_v4_end)
        if vlan_allocation_pool_v4_start is not None:
            pulumi.set(__self__, "vlan_allocation_pool_v4_start", vlan_allocation_pool_v4_start)
        if vlan_cidr_v4 is not None:
            pulumi.set(__self__, "vlan_cidr_v4", vlan_cidr_v4)
        if vlan_gateway_ip_v4 is not None:
            pulumi.set(__self__, "vlan_gateway_ip_v4", vlan_gateway_ip_v4)
        if vlan_hardware_addr is not None:
            pulumi.set(__self__, "vlan_hardware_addr", vlan_hardware_addr)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Name for the network
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="cidrV4")
    def cidr_v4(self) -> Optional[pulumi.Input[str]]:
        """
        The CIDR block for the network
        """
        return pulumi.get(self, "cidr_v4")

    @cidr_v4.setter
    def cidr_v4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_v4", value)

    @property
    @pulumi.getter(name="nameserversV4s")
    def nameservers_v4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of nameservers for the network
        """
        return pulumi.get(self, "nameservers_v4s")

    @nameservers_v4s.setter
    def nameservers_v4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers_v4s", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the network
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="vlanAllocationPoolV4End")
    def vlan_allocation_pool_v4_end(self) -> Optional[pulumi.Input[str]]:
        """
        End of the IPv4 allocation pool for VLAN
        """
        return pulumi.get(self, "vlan_allocation_pool_v4_end")

    @vlan_allocation_pool_v4_end.setter
    def vlan_allocation_pool_v4_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_allocation_pool_v4_end", value)

    @property
    @pulumi.getter(name="vlanAllocationPoolV4Start")
    def vlan_allocation_pool_v4_start(self) -> Optional[pulumi.Input[str]]:
        """
        Start of the IPv4 allocation pool for VLAN
        """
        return pulumi.get(self, "vlan_allocation_pool_v4_start")

    @vlan_allocation_pool_v4_start.setter
    def vlan_allocation_pool_v4_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_allocation_pool_v4_start", value)

    @property
    @pulumi.getter(name="vlanCidrV4")
    def vlan_cidr_v4(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR for VLAN IPv4
        """
        return pulumi.get(self, "vlan_cidr_v4")

    @vlan_cidr_v4.setter
    def vlan_cidr_v4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_cidr_v4", value)

    @property
    @pulumi.getter(name="vlanGatewayIpV4")
    def vlan_gateway_ip_v4(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IP for VLAN IPv4
        """
        return pulumi.get(self, "vlan_gateway_ip_v4")

    @vlan_gateway_ip_v4.setter
    def vlan_gateway_ip_v4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_gateway_ip_v4", value)

    @property
    @pulumi.getter(name="vlanHardwareAddr")
    def vlan_hardware_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Hardware address for VLAN
        """
        return pulumi.get(self, "vlan_hardware_addr")

    @vlan_hardware_addr.setter
    def vlan_hardware_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_hardware_addr", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID for the network
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class _NetworkState:
    def __init__(__self__, *,
                 cidr_v4: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameservers_v4s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_end: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_start: Optional[pulumi.Input[str]] = None,
                 vlan_cidr_v4: Optional[pulumi.Input[str]] = None,
                 vlan_gateway_ip_v4: Optional[pulumi.Input[str]] = None,
                 vlan_hardware_addr: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Network resources.
        :param pulumi.Input[str] cidr_v4: The CIDR block for the network
        :param pulumi.Input[bool] default: If the network is default, this will be `true`
        :param pulumi.Input[str] label: Name for the network
        :param pulumi.Input[str] name: The name of the network
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers_v4s: List of nameservers for the network
        :param pulumi.Input[str] region: The region of the network
        :param pulumi.Input[str] vlan_allocation_pool_v4_end: End of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_allocation_pool_v4_start: Start of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_cidr_v4: CIDR for VLAN IPv4
        :param pulumi.Input[str] vlan_gateway_ip_v4: Gateway IP for VLAN IPv4
        :param pulumi.Input[str] vlan_hardware_addr: Hardware address for VLAN
        :param pulumi.Input[int] vlan_id: VLAN ID for the network
        """
        if cidr_v4 is not None:
            pulumi.set(__self__, "cidr_v4", cidr_v4)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nameservers_v4s is not None:
            pulumi.set(__self__, "nameservers_v4s", nameservers_v4s)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if vlan_allocation_pool_v4_end is not None:
            pulumi.set(__self__, "vlan_allocation_pool_v4_end", vlan_allocation_pool_v4_end)
        if vlan_allocation_pool_v4_start is not None:
            pulumi.set(__self__, "vlan_allocation_pool_v4_start", vlan_allocation_pool_v4_start)
        if vlan_cidr_v4 is not None:
            pulumi.set(__self__, "vlan_cidr_v4", vlan_cidr_v4)
        if vlan_gateway_ip_v4 is not None:
            pulumi.set(__self__, "vlan_gateway_ip_v4", vlan_gateway_ip_v4)
        if vlan_hardware_addr is not None:
            pulumi.set(__self__, "vlan_hardware_addr", vlan_hardware_addr)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="cidrV4")
    def cidr_v4(self) -> Optional[pulumi.Input[str]]:
        """
        The CIDR block for the network
        """
        return pulumi.get(self, "cidr_v4")

    @cidr_v4.setter
    def cidr_v4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_v4", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        If the network is default, this will be `true`
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the network
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameserversV4s")
    def nameservers_v4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of nameservers for the network
        """
        return pulumi.get(self, "nameservers_v4s")

    @nameservers_v4s.setter
    def nameservers_v4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers_v4s", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the network
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="vlanAllocationPoolV4End")
    def vlan_allocation_pool_v4_end(self) -> Optional[pulumi.Input[str]]:
        """
        End of the IPv4 allocation pool for VLAN
        """
        return pulumi.get(self, "vlan_allocation_pool_v4_end")

    @vlan_allocation_pool_v4_end.setter
    def vlan_allocation_pool_v4_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_allocation_pool_v4_end", value)

    @property
    @pulumi.getter(name="vlanAllocationPoolV4Start")
    def vlan_allocation_pool_v4_start(self) -> Optional[pulumi.Input[str]]:
        """
        Start of the IPv4 allocation pool for VLAN
        """
        return pulumi.get(self, "vlan_allocation_pool_v4_start")

    @vlan_allocation_pool_v4_start.setter
    def vlan_allocation_pool_v4_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_allocation_pool_v4_start", value)

    @property
    @pulumi.getter(name="vlanCidrV4")
    def vlan_cidr_v4(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR for VLAN IPv4
        """
        return pulumi.get(self, "vlan_cidr_v4")

    @vlan_cidr_v4.setter
    def vlan_cidr_v4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_cidr_v4", value)

    @property
    @pulumi.getter(name="vlanGatewayIpV4")
    def vlan_gateway_ip_v4(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IP for VLAN IPv4
        """
        return pulumi.get(self, "vlan_gateway_ip_v4")

    @vlan_gateway_ip_v4.setter
    def vlan_gateway_ip_v4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_gateway_ip_v4", value)

    @property
    @pulumi.getter(name="vlanHardwareAddr")
    def vlan_hardware_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Hardware address for VLAN
        """
        return pulumi.get(self, "vlan_hardware_addr")

    @vlan_hardware_addr.setter
    def vlan_hardware_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_hardware_addr", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID for the network
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


class Network(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_v4: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 nameservers_v4s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_end: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_start: Optional[pulumi.Input[str]] = None,
                 vlan_cidr_v4: Optional[pulumi.Input[str]] = None,
                 vlan_gateway_ip_v4: Optional[pulumi.Input[str]] = None,
                 vlan_hardware_addr: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a Civo network resource. This can be used to create, modify, and delete networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_civo as civo

        custom_net = civo.Network("custom_net", label="test_network")
        ```

        ## Import

        using ID

        ```sh
        $ pulumi import civo:index/network:Network custom_net b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr_v4: The CIDR block for the network
        :param pulumi.Input[str] label: Name for the network
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers_v4s: List of nameservers for the network
        :param pulumi.Input[str] region: The region of the network
        :param pulumi.Input[str] vlan_allocation_pool_v4_end: End of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_allocation_pool_v4_start: Start of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_cidr_v4: CIDR for VLAN IPv4
        :param pulumi.Input[str] vlan_gateway_ip_v4: Gateway IP for VLAN IPv4
        :param pulumi.Input[str] vlan_hardware_addr: Hardware address for VLAN
        :param pulumi.Input[int] vlan_id: VLAN ID for the network
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Civo network resource. This can be used to create, modify, and delete networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_civo as civo

        custom_net = civo.Network("custom_net", label="test_network")
        ```

        ## Import

        using ID

        ```sh
        $ pulumi import civo:index/network:Network custom_net b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
        ```

        :param str resource_name: The name of the resource.
        :param NetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_v4: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 nameservers_v4s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_end: Optional[pulumi.Input[str]] = None,
                 vlan_allocation_pool_v4_start: Optional[pulumi.Input[str]] = None,
                 vlan_cidr_v4: Optional[pulumi.Input[str]] = None,
                 vlan_gateway_ip_v4: Optional[pulumi.Input[str]] = None,
                 vlan_hardware_addr: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkArgs.__new__(NetworkArgs)

            __props__.__dict__["cidr_v4"] = cidr_v4
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            __props__.__dict__["nameservers_v4s"] = nameservers_v4s
            __props__.__dict__["region"] = region
            __props__.__dict__["vlan_allocation_pool_v4_end"] = vlan_allocation_pool_v4_end
            __props__.__dict__["vlan_allocation_pool_v4_start"] = vlan_allocation_pool_v4_start
            __props__.__dict__["vlan_cidr_v4"] = vlan_cidr_v4
            __props__.__dict__["vlan_gateway_ip_v4"] = vlan_gateway_ip_v4
            __props__.__dict__["vlan_hardware_addr"] = vlan_hardware_addr
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["default"] = None
            __props__.__dict__["name"] = None
        super(Network, __self__).__init__(
            'civo:index/network:Network',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr_v4: Optional[pulumi.Input[str]] = None,
            default: Optional[pulumi.Input[bool]] = None,
            label: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nameservers_v4s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            vlan_allocation_pool_v4_end: Optional[pulumi.Input[str]] = None,
            vlan_allocation_pool_v4_start: Optional[pulumi.Input[str]] = None,
            vlan_cidr_v4: Optional[pulumi.Input[str]] = None,
            vlan_gateway_ip_v4: Optional[pulumi.Input[str]] = None,
            vlan_hardware_addr: Optional[pulumi.Input[str]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None) -> 'Network':
        """
        Get an existing Network resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr_v4: The CIDR block for the network
        :param pulumi.Input[bool] default: If the network is default, this will be `true`
        :param pulumi.Input[str] label: Name for the network
        :param pulumi.Input[str] name: The name of the network
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers_v4s: List of nameservers for the network
        :param pulumi.Input[str] region: The region of the network
        :param pulumi.Input[str] vlan_allocation_pool_v4_end: End of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_allocation_pool_v4_start: Start of the IPv4 allocation pool for VLAN
        :param pulumi.Input[str] vlan_cidr_v4: CIDR for VLAN IPv4
        :param pulumi.Input[str] vlan_gateway_ip_v4: Gateway IP for VLAN IPv4
        :param pulumi.Input[str] vlan_hardware_addr: Hardware address for VLAN
        :param pulumi.Input[int] vlan_id: VLAN ID for the network
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkState.__new__(_NetworkState)

        __props__.__dict__["cidr_v4"] = cidr_v4
        __props__.__dict__["default"] = default
        __props__.__dict__["label"] = label
        __props__.__dict__["name"] = name
        __props__.__dict__["nameservers_v4s"] = nameservers_v4s
        __props__.__dict__["region"] = region
        __props__.__dict__["vlan_allocation_pool_v4_end"] = vlan_allocation_pool_v4_end
        __props__.__dict__["vlan_allocation_pool_v4_start"] = vlan_allocation_pool_v4_start
        __props__.__dict__["vlan_cidr_v4"] = vlan_cidr_v4
        __props__.__dict__["vlan_gateway_ip_v4"] = vlan_gateway_ip_v4
        __props__.__dict__["vlan_hardware_addr"] = vlan_hardware_addr
        __props__.__dict__["vlan_id"] = vlan_id
        return Network(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cidrV4")
    def cidr_v4(self) -> pulumi.Output[Optional[str]]:
        """
        The CIDR block for the network
        """
        return pulumi.get(self, "cidr_v4")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[bool]:
        """
        If the network is default, this will be `true`
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        Name for the network
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameserversV4s")
    def nameservers_v4s(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of nameservers for the network
        """
        return pulumi.get(self, "nameservers_v4s")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region of the network
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vlanAllocationPoolV4End")
    def vlan_allocation_pool_v4_end(self) -> pulumi.Output[Optional[str]]:
        """
        End of the IPv4 allocation pool for VLAN
        """
        return pulumi.get(self, "vlan_allocation_pool_v4_end")

    @property
    @pulumi.getter(name="vlanAllocationPoolV4Start")
    def vlan_allocation_pool_v4_start(self) -> pulumi.Output[Optional[str]]:
        """
        Start of the IPv4 allocation pool for VLAN
        """
        return pulumi.get(self, "vlan_allocation_pool_v4_start")

    @property
    @pulumi.getter(name="vlanCidrV4")
    def vlan_cidr_v4(self) -> pulumi.Output[Optional[str]]:
        """
        CIDR for VLAN IPv4
        """
        return pulumi.get(self, "vlan_cidr_v4")

    @property
    @pulumi.getter(name="vlanGatewayIpV4")
    def vlan_gateway_ip_v4(self) -> pulumi.Output[Optional[str]]:
        """
        Gateway IP for VLAN IPv4
        """
        return pulumi.get(self, "vlan_gateway_ip_v4")

    @property
    @pulumi.getter(name="vlanHardwareAddr")
    def vlan_hardware_addr(self) -> pulumi.Output[Optional[str]]:
        """
        Hardware address for VLAN
        """
        return pulumi.get(self, "vlan_hardware_addr")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[Optional[int]]:
        """
        VLAN ID for the network
        """
        return pulumi.get(self, "vlan_id")

