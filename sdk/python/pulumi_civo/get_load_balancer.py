# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetLoadBalancerResult',
    'AwaitableGetLoadBalancerResult',
    'get_load_balancer',
]

@pulumi.output_type
class GetLoadBalancerResult:
    """
    A collection of values returned by getLoadBalancer.
    """
    def __init__(__self__, backends=None, fail_timeout=None, health_check_path=None, hostname=None, id=None, ignore_invalid_backend_tls=None, max_conns=None, max_request_size=None, policy=None, port=None, protocol=None, region=None, tls_certificate=None, tls_key=None):
        if backends and not isinstance(backends, list):
            raise TypeError("Expected argument 'backends' to be a list")
        pulumi.set(__self__, "backends", backends)
        if fail_timeout and not isinstance(fail_timeout, int):
            raise TypeError("Expected argument 'fail_timeout' to be a int")
        pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check_path and not isinstance(health_check_path, str):
            raise TypeError("Expected argument 'health_check_path' to be a str")
        pulumi.set(__self__, "health_check_path", health_check_path)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ignore_invalid_backend_tls and not isinstance(ignore_invalid_backend_tls, bool):
            raise TypeError("Expected argument 'ignore_invalid_backend_tls' to be a bool")
        pulumi.set(__self__, "ignore_invalid_backend_tls", ignore_invalid_backend_tls)
        if max_conns and not isinstance(max_conns, int):
            raise TypeError("Expected argument 'max_conns' to be a int")
        pulumi.set(__self__, "max_conns", max_conns)
        if max_request_size and not isinstance(max_request_size, int):
            raise TypeError("Expected argument 'max_request_size' to be a int")
        pulumi.set(__self__, "max_request_size", max_request_size)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tls_certificate and not isinstance(tls_certificate, str):
            raise TypeError("Expected argument 'tls_certificate' to be a str")
        pulumi.set(__self__, "tls_certificate", tls_certificate)
        if tls_key and not isinstance(tls_key, str):
            raise TypeError("Expected argument 'tls_key' to be a str")
        pulumi.set(__self__, "tls_key", tls_key)

    @property
    @pulumi.getter
    def backends(self) -> Sequence['outputs.GetLoadBalancerBackendResult']:
        """
        A list of backend instances
        """
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="failTimeout")
    def fail_timeout(self) -> int:
        """
        The wait time until the backend is marked as a failure
        """
        return pulumi.get(self, "fail_timeout")

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> str:
        """
        The path to check the health of the backend
        """
        return pulumi.get(self, "health_check_path")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The hostname of the Load Balancer
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Load Balancer
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreInvalidBackendTls")
    def ignore_invalid_backend_tls(self) -> bool:
        """
        Should self-signed/invalid certificates be ignored from the backend servers
        """
        return pulumi.get(self, "ignore_invalid_backend_tls")

    @property
    @pulumi.getter(name="maxConns")
    def max_conns(self) -> int:
        """
        How many concurrent connections can each backend handle
        """
        return pulumi.get(self, "max_conns")

    @property
    @pulumi.getter(name="maxRequestSize")
    def max_request_size(self) -> int:
        """
        The max request size set in the configuration
        """
        return pulumi.get(self, "max_request_size")

    @property
    @pulumi.getter
    def policy(self) -> str:
        """
        The policy set in the Load Balancer
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port set in the configuration.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used in the configuration.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> str:
        """
        If is set will be returned
        """
        return pulumi.get(self, "tls_certificate")

    @property
    @pulumi.getter(name="tlsKey")
    def tls_key(self) -> str:
        """
        If is set will be returned
        """
        return pulumi.get(self, "tls_key")


class AwaitableGetLoadBalancerResult(GetLoadBalancerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerResult(
            backends=self.backends,
            fail_timeout=self.fail_timeout,
            health_check_path=self.health_check_path,
            hostname=self.hostname,
            id=self.id,
            ignore_invalid_backend_tls=self.ignore_invalid_backend_tls,
            max_conns=self.max_conns,
            max_request_size=self.max_request_size,
            policy=self.policy,
            port=self.port,
            protocol=self.protocol,
            region=self.region,
            tls_certificate=self.tls_certificate,
            tls_key=self.tls_key)


def get_load_balancer(hostname: Optional[str] = None,
                      id: Optional[str] = None,
                      region: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoadBalancerResult:
    """
    Use this data source to access information about an existing resource.

    :param str hostname: The hostname of the Load Balancer.
    :param str id: The ID of the Load Balancer.
    """
    __args__ = dict()
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['region'] = region
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getLoadBalancer:getLoadBalancer', __args__, opts=opts, typ=GetLoadBalancerResult).value

    return AwaitableGetLoadBalancerResult(
        backends=__ret__.backends,
        fail_timeout=__ret__.fail_timeout,
        health_check_path=__ret__.health_check_path,
        hostname=__ret__.hostname,
        id=__ret__.id,
        ignore_invalid_backend_tls=__ret__.ignore_invalid_backend_tls,
        max_conns=__ret__.max_conns,
        max_request_size=__ret__.max_request_size,
        policy=__ret__.policy,
        port=__ret__.port,
        protocol=__ret__.protocol,
        region=__ret__.region,
        tls_certificate=__ret__.tls_certificate,
        tls_key=__ret__.tls_key)
