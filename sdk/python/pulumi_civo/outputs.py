# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'KubernetesClusterInstalledApplication',
    'KubernetesClusterInstance',
    'KubernetesClusterPool',
    'KubernetesClusterPoolInstance',
    'LoadBalancerBackend',
    'GetInstancesFilterResult',
    'GetInstancesInstanceResult',
    'GetInstancesSizeFilterResult',
    'GetInstancesSizeSizeResult',
    'GetInstancesSizeSortResult',
    'GetInstancesSortResult',
    'GetKubernetesClusterInstalledApplicationResult',
    'GetKubernetesClusterInstanceResult',
    'GetKubernetesClusterPoolResult',
    'GetKubernetesClusterPoolInstanceResult',
    'GetKubernetesVersionFilterResult',
    'GetKubernetesVersionSortResult',
    'GetKubernetesVersionVersionResult',
    'GetLoadBalancerBackendResult',
    'GetRegionFilterResult',
    'GetRegionRegionResult',
    'GetRegionSortResult',
    'GetTemplateFilterResult',
    'GetTemplateSortResult',
    'GetTemplateTemplateResult',
]

@pulumi.output_type
class KubernetesClusterInstalledApplication(dict):
    def __init__(__self__, *,
                 application: Optional[str] = None,
                 category: Optional[str] = None,
                 installed: Optional[bool] = None,
                 version: Optional[str] = None):
        """
        :param str application: The name of the application
        :param str category: The category of the application
        :param bool installed: if installed or not
        :param str version: The version of the application
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if installed is not None:
            pulumi.set(__self__, "installed", installed)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        The name of the application
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        The category of the application
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def installed(self) -> Optional[bool]:
        """
        if installed or not
        """
        return pulumi.get(self, "installed")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the application
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class KubernetesClusterInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCores":
            suggest = "cpu_cores"
        elif key == "diskGb":
            suggest = "disk_gb"
        elif key == "ramMb":
            suggest = "ram_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_cores: Optional[int] = None,
                 disk_gb: Optional[int] = None,
                 hostname: Optional[str] = None,
                 ram_mb: Optional[int] = None,
                 size: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        """
        :param int cpu_cores: Total cpu of the inatance.
        :param int disk_gb: The size of the disk.
        :param str hostname: The hostname of the instance.
        :param int ram_mb: Total ram of the instance
        :param str size: The size of the instance.
        :param str status: The status of Kubernetes cluster.
               * `ready` -If the Kubernetes cluster is ready.
        :param Sequence[str] tags: A space separated list of tags, to be used freely as required.
        """
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if disk_gb is not None:
            pulumi.set(__self__, "disk_gb", disk_gb)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ram_mb is not None:
            pulumi.set(__self__, "ram_mb", ram_mb)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[int]:
        """
        Total cpu of the inatance.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> Optional[int]:
        """
        The size of the disk.
        """
        return pulumi.get(self, "disk_gb")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The hostname of the instance.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> Optional[int]:
        """
        Total ram of the instance
        """
        return pulumi.get(self, "ram_mb")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The size of the instance.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        A space separated list of tags, to be used freely as required.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class KubernetesClusterPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceNames":
            suggest = "instance_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[int] = None,
                 id: Optional[str] = None,
                 instance_names: Optional[Sequence[str]] = None,
                 instances: Optional[Sequence['outputs.KubernetesClusterPoolInstance']] = None,
                 size: Optional[str] = None):
        """
        :param int count: The size of the pool
        :param str id: The ID of the pool
        :param Sequence[str] instance_names: A list of the instance in the pool
        :param Sequence['KubernetesClusterPoolInstanceArgs'] instances: A list of instance inside the pool
        :param str size: The size of the instance.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_names is not None:
            pulumi.set(__self__, "instance_names", instance_names)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The size of the pool
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the pool
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[Sequence[str]]:
        """
        A list of the instance in the pool
        """
        return pulumi.get(self, "instance_names")

    @property
    @pulumi.getter
    def instances(self) -> Optional[Sequence['outputs.KubernetesClusterPoolInstance']]:
        """
        A list of instance inside the pool
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The size of the instance.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class KubernetesClusterPoolInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCores":
            suggest = "cpu_cores"
        elif key == "diskGb":
            suggest = "disk_gb"
        elif key == "ramMb":
            suggest = "ram_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterPoolInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterPoolInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterPoolInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_cores: Optional[int] = None,
                 disk_gb: Optional[int] = None,
                 hostname: Optional[str] = None,
                 ram_mb: Optional[int] = None,
                 size: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        """
        :param int cpu_cores: Total cpu of the inatance.
        :param int disk_gb: The size of the disk.
        :param str hostname: The hostname of the instance.
        :param int ram_mb: Total ram of the instance
        :param str size: The size of the instance.
        :param str status: The status of Kubernetes cluster.
               * `ready` -If the Kubernetes cluster is ready.
        :param Sequence[str] tags: A space separated list of tags, to be used freely as required.
        """
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if disk_gb is not None:
            pulumi.set(__self__, "disk_gb", disk_gb)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ram_mb is not None:
            pulumi.set(__self__, "ram_mb", ram_mb)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[int]:
        """
        Total cpu of the inatance.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> Optional[int]:
        """
        The size of the disk.
        """
        return pulumi.get(self, "disk_gb")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The hostname of the instance.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> Optional[int]:
        """
        Total ram of the instance
        """
        return pulumi.get(self, "ram_mb")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The size of the instance.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        A space separated list of tags, to be used freely as required.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class LoadBalancerBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 port: int,
                 protocol: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetInstancesFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str],
                 all: Optional[bool] = None,
                 match_by: Optional[str] = None):
        """
        :param str key: Filter the Instances by this key. This may be one of '`id`, `hostname`, `public_ip`, `private_ip`,
               `pseudo_ip`, `size`, `cpu_cores`, `ram_mb`, `disk_gb`, `template` or `created_at`.
        :param Sequence[str] values: A list of values to match against the `key` field. Only retrieves Instances
               where the `key` field takes on one or more of the values provided here.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)
        if all is not None:
            pulumi.set(__self__, "all", all)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filter the Instances by this key. This may be one of '`id`, `hostname`, `public_ip`, `private_ip`,
        `pseudo_ip`, `size`, `cpu_cores`, `ram_mb`, `disk_gb`, `template` or `created_at`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match against the `key` field. Only retrieves Instances
        where the `key` field takes on one or more of the values provided here.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        return pulumi.get(self, "all")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 cpu_cores: int,
                 created_at: str,
                 disk_gb: int,
                 firewall_id: str,
                 hostname: str,
                 id: str,
                 initial_password: str,
                 initial_user: str,
                 network_id: str,
                 notes: str,
                 private_ip: str,
                 pseudo_ip: str,
                 public_ip: str,
                 ram_mb: int,
                 region: str,
                 reverse_dns: str,
                 script: str,
                 size: str,
                 sshkey_id: str,
                 status: str,
                 tags: Sequence[str],
                 template: str):
        """
        :param int cpu_cores: Total cpu of the inatance.
        :param str created_at: The date of creation of the instance
        :param int disk_gb: The size of the disk.
        :param str firewall_id: The ID of the firewall used.
        :param str hostname: The Instance hostname.
        :param str id: The ID of the Instance.
        :param str initial_password: Instance initial password
        :param str initial_user: The name of the initial user created on the server.
        :param str network_id: This will be the ID of the network.
        :param str notes: The notes of the instance.
        :param str private_ip: The private ip.
        :param str pseudo_ip: Is the ip that is used to route the public ip from the internet to the instance using NAT
        :param str public_ip: The public ip.
        :param int ram_mb: Total ram of the instance.
        :param str region: If is used, them all instances will be from that region.
        :param str reverse_dns: A fully qualified domain name.
        :param str script: the contents of a script uploaded
        :param str size: The name of the size.
        :param str sshkey_id: The ID SSH.
        :param str status: The status of the instance
        :param Sequence[str] tags: An optional list of tags
        :param str template: The ID for the template to used to build the instance.
        """
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "disk_gb", disk_gb)
        pulumi.set(__self__, "firewall_id", firewall_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initial_password", initial_password)
        pulumi.set(__self__, "initial_user", initial_user)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "pseudo_ip", pseudo_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "ram_mb", ram_mb)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "reverse_dns", reverse_dns)
        pulumi.set(__self__, "script", script)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "sshkey_id", sshkey_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> int:
        """
        Total cpu of the inatance.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The date of creation of the instance
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> int:
        """
        The size of the disk.
        """
        return pulumi.get(self, "disk_gb")

    @property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> str:
        """
        The ID of the firewall used.
        """
        return pulumi.get(self, "firewall_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The Instance hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialPassword")
    def initial_password(self) -> str:
        """
        Instance initial password
        """
        return pulumi.get(self, "initial_password")

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> str:
        """
        The name of the initial user created on the server.
        """
        return pulumi.get(self, "initial_user")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        This will be the ID of the network.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        The notes of the instance.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private ip.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="pseudoIp")
    def pseudo_ip(self) -> str:
        """
        Is the ip that is used to route the public ip from the internet to the instance using NAT
        """
        return pulumi.get(self, "pseudo_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The public ip.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> int:
        """
        Total ram of the instance.
        """
        return pulumi.get(self, "ram_mb")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        If is used, them all instances will be from that region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> str:
        """
        A fully qualified domain name.
        """
        return pulumi.get(self, "reverse_dns")

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        the contents of a script uploaded
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The name of the size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sshkeyId")
    def sshkey_id(self) -> str:
        """
        The ID SSH.
        """
        return pulumi.get(self, "sshkey_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        An optional list of tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> str:
        """
        The ID for the template to used to build the instance.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class GetInstancesSizeFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str],
                 all: Optional[bool] = None,
                 match_by: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)
        if all is not None:
            pulumi.set(__self__, "all", all)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        return pulumi.get(self, "all")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetInstancesSizeSizeResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 disk: int,
                 name: str,
                 ram: int,
                 selectable: bool,
                 type: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "selectable", selectable)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disk(self) -> int:
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ram(self) -> int:
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def selectable(self) -> bool:
        return pulumi.get(self, "selectable")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstancesSizeSortResult(dict):
    def __init__(__self__, *,
                 key: str,
                 direction: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")


@pulumi.output_type
class GetInstancesSortResult(dict):
    def __init__(__self__, *,
                 key: str,
                 direction: Optional[str] = None):
        """
        :param str key: Sort the Instance by this key. This may be one of `id`, `hostname`, `public_ip`, `private_ip`,
               `pseudo_ip`, `size`, `cpu_cores`, `ram_mb`, `disk_gb`, `template` or `created_at`.
        :param str direction: The sort direction. This may be either `asc` or `desc`.
        """
        pulumi.set(__self__, "key", key)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Sort the Instance by this key. This may be one of `id`, `hostname`, `public_ip`, `private_ip`,
        `pseudo_ip`, `size`, `cpu_cores`, `ram_mb`, `disk_gb`, `template` or `created_at`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sort direction. This may be either `asc` or `desc`.
        """
        return pulumi.get(self, "direction")


@pulumi.output_type
class GetKubernetesClusterInstalledApplicationResult(dict):
    def __init__(__self__, *,
                 application: str,
                 category: str,
                 installed: bool,
                 version: str):
        """
        :param str application: The name of the application
        :param str category: The category of the application
        :param bool installed: if installed or not
        :param str version: The version of the application
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "installed", installed)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def application(self) -> str:
        """
        The name of the application
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The category of the application
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def installed(self) -> bool:
        """
        if installed or not
        """
        return pulumi.get(self, "installed")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the application
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetKubernetesClusterInstanceResult(dict):
    def __init__(__self__, *,
                 cpu_cores: int,
                 disk_gb: int,
                 hostname: str,
                 ram_mb: int,
                 size: str,
                 status: str,
                 tags: Sequence[str]):
        """
        :param int cpu_cores: Total cpu of the inatance.
        :param int disk_gb: The size of the disk.
        :param str hostname: The hostname of the instance.
        :param int ram_mb: Total ram of the instance
        :param str size: The size of the instance.
        :param str status: The status of Kubernetes cluster.
               * `ready` -If the Kubernetes cluster is ready.
        :param Sequence[str] tags: The tag of the instances
        """
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "disk_gb", disk_gb)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ram_mb", ram_mb)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> int:
        """
        Total cpu of the inatance.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> int:
        """
        The size of the disk.
        """
        return pulumi.get(self, "disk_gb")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname of the instance.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> int:
        """
        Total ram of the instance
        """
        return pulumi.get(self, "ram_mb")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The size of the instance.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The tag of the instances
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetKubernetesClusterPoolResult(dict):
    def __init__(__self__, *,
                 count: int,
                 id: str,
                 instance_names: Sequence[str],
                 instances: Sequence['outputs.GetKubernetesClusterPoolInstanceResult'],
                 size: str):
        """
        :param int count: The size of the pool
        :param str id: The ID of the kubernetes Cluster
        :param Sequence[str] instance_names: A list of the instance in the pool
        :param Sequence['GetKubernetesClusterPoolInstanceArgs'] instances: A list of instance inside the pool
        :param str size: The size of the instance.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_names", instance_names)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The size of the pool
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the kubernetes Cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Sequence[str]:
        """
        A list of the instance in the pool
        """
        return pulumi.get(self, "instance_names")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetKubernetesClusterPoolInstanceResult']:
        """
        A list of instance inside the pool
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The size of the instance.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetKubernetesClusterPoolInstanceResult(dict):
    def __init__(__self__, *,
                 cpu_cores: int,
                 disk_gb: int,
                 hostname: str,
                 ram_mb: int,
                 size: str,
                 status: str,
                 tags: Sequence[str]):
        """
        :param int cpu_cores: Total cpu of the inatance.
        :param int disk_gb: The size of the disk.
        :param str hostname: The hostname of the instance.
        :param int ram_mb: Total ram of the instance
        :param str size: The size of the instance.
        :param str status: The status of Kubernetes cluster.
               * `ready` -If the Kubernetes cluster is ready.
        :param Sequence[str] tags: The tag of the instances
        """
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "disk_gb", disk_gb)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ram_mb", ram_mb)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> int:
        """
        Total cpu of the inatance.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> int:
        """
        The size of the disk.
        """
        return pulumi.get(self, "disk_gb")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname of the instance.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> int:
        """
        Total ram of the instance
        """
        return pulumi.get(self, "ram_mb")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The size of the instance.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The tag of the instances
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetKubernetesVersionFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str],
                 all: Optional[bool] = None,
                 match_by: Optional[str] = None):
        """
        :param str key: Filter the sizes by this key. This may be one of `version`,
               `label`, `type`, `default`.
        :param Sequence[str] values: Only retrieves the version which keys has value that matches
               one of the values provided here.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)
        if all is not None:
            pulumi.set(__self__, "all", all)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filter the sizes by this key. This may be one of `version`,
        `label`, `type`, `default`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Only retrieves the version which keys has value that matches
        one of the values provided here.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        return pulumi.get(self, "all")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetKubernetesVersionSortResult(dict):
    def __init__(__self__, *,
                 key: str,
                 direction: Optional[str] = None):
        """
        :param str key: Sort the sizes by this key. This may be one of `version`.
        :param str direction: The sort direction. This may be either `asc` or `desc`.
        """
        pulumi.set(__self__, "key", key)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Sort the sizes by this key. This may be one of `version`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sort direction. This may be either `asc` or `desc`.
        """
        return pulumi.get(self, "direction")


@pulumi.output_type
class GetKubernetesVersionVersionResult(dict):
    def __init__(__self__, *,
                 default: bool,
                 label: str,
                 type: str,
                 version: str):
        """
        :param bool default: If is the default version used in all cluster.
        :param str label: The label of this version.
        :param str type: The type of the version can be `stable`, `legacy` etc...
        :param str version: A version of the kubernetes.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def default(self) -> bool:
        """
        If is the default version used in all cluster.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this version.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the version can be `stable`, `legacy` etc...
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        A version of the kubernetes.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetLoadBalancerBackendResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 port: int,
                 protocol: str):
        """
        :param str instance_id: The instance id
        :param int port: The port set in the configuration.
        :param str protocol: The protocol used in the configuration.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The instance id
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port set in the configuration.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used in the configuration.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetRegionFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str],
                 all: Optional[bool] = None,
                 match_by: Optional[str] = None):
        """
        :param str key: Filter the sizes by this key. This may be one of `code`, `name`, `country`, `default`.
        :param Sequence[str] values: Only retrieves region which keys has value that matches one of the values provided here.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)
        if all is not None:
            pulumi.set(__self__, "all", all)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filter the sizes by this key. This may be one of `code`, `name`, `country`, `default`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Only retrieves region which keys has value that matches one of the values provided here.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        return pulumi.get(self, "all")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetRegionRegionResult(dict):
    def __init__(__self__, *,
                 code: str,
                 country: str,
                 default: bool,
                 name: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRegionSortResult(dict):
    def __init__(__self__, *,
                 key: str,
                 direction: Optional[str] = None):
        """
        :param str key: Sort the sizes by this key. This may be one of `code`,`name`.
        :param str direction: The sort direction. This may be either `asc` or `desc`.
        """
        pulumi.set(__self__, "key", key)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Sort the sizes by this key. This may be one of `code`,`name`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sort direction. This may be either `asc` or `desc`.
        """
        return pulumi.get(self, "direction")


@pulumi.output_type
class GetTemplateFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str],
                 all: Optional[bool] = None,
                 match_by: Optional[str] = None):
        """
        :param str key: Filter the sizes by this key. This may be one of `id`,`name`,`version`,`label`.
        :param Sequence[str] values: Only retrieves the template which keys has value that matches
               one of the values provided here.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)
        if all is not None:
            pulumi.set(__self__, "all", all)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filter the sizes by this key. This may be one of `id`,`name`,`version`,`label`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Only retrieves the template which keys has value that matches
        one of the values provided here.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        return pulumi.get(self, "all")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetTemplateSortResult(dict):
    def __init__(__self__, *,
                 key: str,
                 direction: Optional[str] = None):
        """
        :param str key: Sort the sizes by this key. This may be one of `id`,`name`,`version`,`label`.
        :param str direction: The sort direction. This may be either `asc` or `desc`.
        """
        pulumi.set(__self__, "key", key)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Sort the sizes by this key. This may be one of `id`,`name`,`version`,`label`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sort direction. This may be either `asc` or `desc`.
        """
        return pulumi.get(self, "direction")


@pulumi.output_type
class GetTemplateTemplateResult(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 name: str,
                 version: str):
        """
        :param str id: The id of the template
        :param str label: The label of the template.
        :param str name: A short human readable name for the template
        :param str version: The version of the template.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the template
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the template.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A short human readable name for the template
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the template.
        """
        return pulumi.get(self, "version")


