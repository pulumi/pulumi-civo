{
    "name": "civo",
    "description": "A Pulumi package for creating and managing Civo cloud resources.",
    "keywords": [
        "pulumi",
        "civo"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`civo` Terraform Provider](https://github.com/civo/terraform-provider-civo).",
    "repository": "https://github.com/pulumi/pulumi-civo",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "civo": "Civo"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-civo/sdk/v2/go/civo",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Civo cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/civo/terraform-provider-civo)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-civo` repo](https://github.com/pulumi/pulumi-civo/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-civo` repo](https://github.com/civo/terraform-provider-civo/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/civo/terraform-provider-civo)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-civo` repo](https://github.com/pulumi/pulumi-civo/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-civo` repo](https://github.com/civo/terraform-provider-civo/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiEndpoint": {
                "type": "string",
                "description": "The Base URL to use for CIVO API.\n"
            },
            "region": {
                "type": "string",
                "description": "If region is not set, then no region will be used and them you need expensify in every resource even if you expensify\nhere you can overwrite in a resource.\n"
            },
            "token": {
                "type": "string",
                "description": "This is the Civo API token. Alternatively, this can also be specified using `CIVO_TOKEN` environment variable.\n"
            }
        }
    },
    "types": {
        "civo:index/FirewallEgressRule:FirewallEgressRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.\n"
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)\n"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string",
                    "description": "A string that will be the displayed name/reference for this rule\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "cidrs"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "cidrs",
                        "id"
                    ]
                }
            }
        },
        "civo:index/FirewallIngressRule:FirewallIngressRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.\n"
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)\n"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string",
                    "description": "A string that will be the displayed name/reference for this rule\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "The port or port range to open, can be a single port or a range separated by a dash (`-`), e.g. `80` or `80-443`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "cidrs"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "cidrs",
                        "id"
                    ]
                }
            }
        },
        "civo:index/KubernetesClusterInstalledApplication:KubernetesClusterInstalledApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "description": "Name of application\n"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the application\n"
                },
                "installed": {
                    "type": "boolean",
                    "description": "Application installation status (`true` if installed)\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of application\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "application",
                        "category",
                        "installed",
                        "version"
                    ]
                }
            }
        },
        "civo:index/KubernetesClusterPools:KubernetesClusterPools": {
            "properties": {
                "instanceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance names in the nodepool\n"
                },
                "label": {
                    "type": "string",
                    "description": "Node pool label, if you don't provide one, we will generate one for you\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "Number of nodes in the nodepool\n"
                },
                "publicIpNodePool": {
                    "type": "boolean",
                    "description": "Node pool belongs to the public ip node pool\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the nodes in the nodepool\n"
                }
            },
            "type": "object",
            "required": [
                "nodeCount",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "instanceNames",
                        "label",
                        "nodeCount",
                        "publicIpNodePool",
                        "size"
                    ]
                }
            }
        },
        "civo:index/KubernetesNodePoolTaint:KubernetesNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ]
        },
        "civo:index/getDatabaseVersionFilter:getDatabaseVersionFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Filter versions by this key. This may be one of `default`, `engine`, `version`.\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only retrieves `versions` which keys has value that matches one of the values provided here\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getDatabaseVersionSort:getDatabaseVersionSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The sort direction. This may be either `asc` or `desc`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Sort versions by this key. This may be one of `default`, `engine`, `version`.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getDatabaseVersionVersion:getDatabaseVersionVersion": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "If the version is the default\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The engine of the database\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the database\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "engine",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getDiskImageDiskimage:getDiskImageDiskimage": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of disk image\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label of disk image\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of disk image\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of disk image\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getDiskImageFilter:getDiskImageFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only retrieves `diskimages` which keys has value that matches one of the values provided here\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getDiskImageSort:getDiskImageSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The sort direction. This may be either `asc` or `desc`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getInstancesFilter:getInstancesFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Filter instances by this key. This may be one of `cpu_cores`, `created_at`, `disk_gb`, `firewall_id`, `hostname`, `id`, `initial_password`, `initial_user`, `network_id`, `notes`, `private_ip`, `pseudo_ip`, `public_ip`, `ram_mb`, `region`, `reverse_dns`, `script`, `size`, `sshkey_id`, `status`, `tags`, `template`.\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only retrieves `instances` which keys has value that matches one of the values provided here\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getInstancesInstance:getInstancesInstance": {
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "description": "CPU of the instance\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the instance\n"
                },
                "diskGb": {
                    "type": "integer",
                    "description": "SSD size of the instance\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "Firewall ID of the instance\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the instance\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the instance\n"
                },
                "initialPassword": {
                    "type": "string",
                    "description": "Initial password of the instance\n"
                },
                "initialUser": {
                    "type": "string",
                    "description": "Initial user of the instance\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "Network id of the instance\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Note of the instance\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP of the instance\n"
                },
                "pseudoIp": {
                    "type": "string",
                    "description": "Pseudo IP of the instance\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Public IP of the instance\n"
                },
                "ramMb": {
                    "type": "integer",
                    "description": "RAM of the instance\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the instance\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "Reverse DNS of the instance\n"
                },
                "script": {
                    "type": "string",
                    "description": "Script of the instance\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the instance\n"
                },
                "sshkeyId": {
                    "type": "string",
                    "description": "SSH key id of the instance\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the instance\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the instance\n"
                },
                "template": {
                    "type": "string",
                    "description": "Disk image/template of the instance\n"
                }
            },
            "type": "object",
            "required": [
                "cpuCores",
                "createdAt",
                "diskGb",
                "firewallId",
                "hostname",
                "id",
                "initialPassword",
                "initialUser",
                "networkId",
                "notes",
                "privateIp",
                "pseudoIp",
                "publicIp",
                "ramMb",
                "region",
                "reverseDns",
                "script",
                "size",
                "sshkeyId",
                "status",
                "tags",
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getInstancesSort:getInstancesSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The sort direction. This may be either `asc` or `desc`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Sort instances by this key. This may be one of `cpu_cores`, `created_at`, `disk_gb`, `firewall_id`, `hostname`, `id`, `initial_password`, `initial_user`, `network_id`, `notes`, `private_ip`, `pseudo_ip`, `public_ip`, `ram_mb`, `region`, `reverse_dns`, `script`, `size`, `sshkey_id`, `status`, `template`.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getKubernetesClusterInstalledApplication:getKubernetesClusterInstalledApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "category": {
                    "type": "string",
                    "description": "The category of the application\n"
                },
                "installed": {
                    "type": "boolean",
                    "description": "If the application is installed, this will return `true`\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the application\n"
                }
            },
            "type": "object",
            "required": [
                "application",
                "category",
                "installed",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getKubernetesClusterPool:getKubernetesClusterPool": {
            "properties": {
                "instanceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the instance in the pool\n"
                },
                "label": {
                    "type": "string",
                    "description": "Node pool label, if you don't provide one, we will generate one for you\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "The size of the pool\n"
                },
                "publicIpNodePool": {
                    "type": "boolean",
                    "description": "Node pool belongs to the public ip node pool\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of each node inside the pool\n"
                }
            },
            "type": "object",
            "required": [
                "instanceNames",
                "label",
                "nodeCount",
                "publicIpNodePool",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getKubernetesVersionFilter:getKubernetesVersionFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Filter versions by this key. This may be one of `default`, `label`, `type`, `version`.\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only retrieves `versions` which keys has value that matches one of the values provided here\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getKubernetesVersionSort:getKubernetesVersionSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The sort direction. This may be either `asc` or `desc`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Sort versions by this key. This may be one of `default`, `label`, `type`, `version`.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getKubernetesVersionVersion:getKubernetesVersionVersion": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "If is the default version used in all cluster, this will return `true`\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this version\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the cluster, can be `talos` or `k3s`\n"
                },
                "version": {
                    "type": "string",
                    "description": "A version of the Kubernetes\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "label",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getLoadBalancerBackend:getLoadBalancerBackend": {
            "properties": {
                "healthCheckPort": {
                    "type": "integer",
                    "description": "The health check port of the backend\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip of the backend\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the backend\n"
                },
                "sourcePort": {
                    "type": "integer",
                    "description": "The source port of the backend\n"
                },
                "targetPort": {
                    "type": "integer",
                    "description": "The target port of the backend\n"
                }
            },
            "type": "object",
            "required": [
                "healthCheckPort",
                "ip",
                "protocol",
                "sourcePort",
                "targetPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getRegionFilter:getRegionFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Filter regions by this key. This may be one of `code`, `country`, `default`, `name`.\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only retrieves `regions` which keys has value that matches one of the values provided here\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getRegionRegion:getRegionRegion": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code of the region\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country of the region\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "If the region is the default region, this will return `true`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human name of the region\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "country",
                "default",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getRegionSort:getRegionSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The sort direction. This may be either `asc` or `desc`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Sort regions by this key. This may be one of `code`, `country`, `default`, `name`.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getSizeFilter:getSizeFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpu_type`, `gpu`, `name`, `ram`, `selectable`, `type`.\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only retrieves `sizes` which keys has value that matches one of the values provided here\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getSizeSize:getSizeSize": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "Total of CPU\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the instance size\n"
                },
                "disk": {
                    "type": "integer",
                    "description": "The size of SSD\n"
                },
                "gpu": {
                    "type": "integer",
                    "description": "Total of GPU\n"
                },
                "gpuType": {
                    "type": "string",
                    "description": "GPU type\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the size\n"
                },
                "ram": {
                    "type": "integer",
                    "description": "Total of RAM\n"
                },
                "selectable": {
                    "type": "boolean",
                    "description": "If can use the instance size\n"
                },
                "type": {
                    "type": "string",
                    "description": "A human name of the size\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "disk",
                "gpu",
                "gpuType",
                "name",
                "ram",
                "selectable",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getSizeSort:getSizeSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The sort direction. This may be either `asc` or `desc`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `gpu_type`, `gpu`, `name`, `ram`, `selectable`, `type`.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the civo package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiEndpoint": {
                "type": "string",
                "description": "The Base URL to use for CIVO API.\n"
            },
            "region": {
                "type": "string",
                "description": "If region is not set, then no region will be used and them you need expensify in every resource even if you expensify\nhere you can overwrite in a resource.\n"
            },
            "token": {
                "type": "string",
                "description": "This is the Civo API token. Alternatively, this can also be specified using `CIVO_TOKEN` environment variable.\n"
            }
        },
        "inputProperties": {
            "apiEndpoint": {
                "type": "string",
                "description": "The Base URL to use for CIVO API.\n"
            },
            "region": {
                "type": "string",
                "description": "If region is not set, then no region will be used and them you need expensify in every resource even if you expensify\nhere you can overwrite in a resource.\n"
            },
            "token": {
                "type": "string",
                "description": "This is the Civo API token. Alternatively, this can also be specified using `CIVO_TOKEN` environment variable.\n"
            }
        }
    },
    "resources": {
        "civo:index/database:Database": {
            "description": "\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/database:Database mydb 29fcd1c4-fb61-44c7-b49c-dc7b98e9927e\n```\n\n ",
            "properties": {
                "dnsEndpoint": {
                    "type": "string",
                    "description": "The DNS endpoint of the database\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the database\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The engine of the database\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The id of the associated network\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Count of nodes\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the database\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the database will be created.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the database\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the database\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the database\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the database\n"
                }
            },
            "required": [
                "dnsEndpoint",
                "endpoint",
                "engine",
                "firewallId",
                "name",
                "networkId",
                "nodes",
                "password",
                "port",
                "region",
                "size",
                "status",
                "username",
                "version"
            ],
            "inputProperties": {
                "engine": {
                    "type": "string",
                    "description": "The engine of the database\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "string",
                    "description": "The id of the associated network\n",
                    "willReplaceOnChanges": true
                },
                "nodes": {
                    "type": "integer",
                    "description": "Count of nodes\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the database will be created.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the database\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the database\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodes",
                "size",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "dnsEndpoint": {
                        "type": "string",
                        "description": "The DNS endpoint of the database\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the database\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The engine of the database\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The id of the associated network\n",
                        "willReplaceOnChanges": true
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "Count of nodes\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the database\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where the database will be created.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the database\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the database\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the database\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/dnsDomainName:DnsDomainName": {
            "description": "Provides a Civo DNS domain name resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\n// Create a new domain name\nconst main = new civo.DnsDomainName(\"main\", {});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\n# Create a new domain name\nmain = civo.DnsDomainName(\"main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new domain name\n    var main = new Civo.DnsDomainName(\"main\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new domain name\n\t\t_, err := civo.NewDnsDomainName(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.DnsDomainName;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DnsDomainName(\"main\");\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new domain name\n  main:\n    type: civo:DnsDomainName\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing domain name\n\n ```sh\n $ pulumi import civo:index/dnsDomainName:DnsDomainName main mydomain.com\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the domain\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain\n"
                }
            },
            "required": [
                "accountId",
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the domain\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsDomainName resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the domain\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the domain\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/dnsDomainRecord:DnsDomainRecord": {
            "description": "Provides a Civo DNS domain record resource.\n\n\n## Import\n\nusing domain_id:domain_record_id\n\n ```sh\n $ pulumi import civo:index/dnsDomainRecord:DnsDomainRecord www a3cd6832-9577-4017-afd7-17d239fc0bf0:c9a39d14-ee1b-4870-8fb0-a2d4f465e822\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of this resource\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp when this resource was created\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "ID from domain name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an amex/root domain)\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified is 600)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The choice of RR type from a, cname, mx or txt\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp when this resource was updated\n"
                },
                "value": {
                    "type": "string",
                    "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                }
            },
            "required": [
                "accountId",
                "createdAt",
                "domainId",
                "name",
                "ttl",
                "type",
                "updatedAt",
                "value"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "string",
                    "description": "ID from domain name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an amex/root domain)\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified is 600)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The choice of RR type from a, cname, mx or txt\n"
                },
                "value": {
                    "type": "string",
                    "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                }
            },
            "requiredInputs": [
                "domainId",
                "ttl",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsDomainRecord resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of this resource\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when this resource was created\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "ID from domain name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an amex/root domain)\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified is 600)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The choice of RR type from a, cname, mx or txt\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp when this resource was updated\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/firewall:Firewall": {
            "description": "Provides a Civo firewall resource. This can be used to create, modify, and delete firewalls.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\n// Create a network\nconst customNet = new civo.Network(\"customNet\", {label: \"my-custom-network\"});\n// Create a firewall\nconst wwwFirewall = new civo.Firewall(\"wwwFirewall\", {networkId: customNet.id});\n// Create a firewall with the default rules\nconst wwwIndex_firewallFirewall = new civo.Firewall(\"wwwIndex/firewallFirewall\", {\n    networkId: customNet.id,\n    createDefaultRules: true,\n});\n// Create a firewall withouth the default rules but with a custom rule\nconst wwwCivoIndex_firewallFirewall = new civo.Firewall(\"wwwCivoIndex/firewallFirewall\", {\n    networkId: customNet.id,\n    createDefaultRules: false,\n    ingressRules: [\n        {\n            label: \"k8s\",\n            protocol: \"tcp\",\n            portRange: \"6443\",\n            cidrs: [\n                \"192.168.1.1/32\",\n                \"192.168.10.4/32\",\n                \"192.168.10.10/32\",\n            ],\n            action: \"allow\",\n        },\n        {\n            label: \"ssh\",\n            protocol: \"tcp\",\n            portRange: \"22\",\n            cidrs: [\n                \"192.168.1.1/32\",\n                \"192.168.10.4/32\",\n                \"192.168.10.10/32\",\n            ],\n            action: \"allow\",\n        },\n    ],\n    egressRules: [{\n        label: \"all\",\n        protocol: \"tcp\",\n        portRange: \"1-65535\",\n        cidrs: [\"0.0.0.0/0\"],\n        action: \"allow\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\n# Create a network\ncustom_net = civo.Network(\"customNet\", label=\"my-custom-network\")\n# Create a firewall\nwww_firewall = civo.Firewall(\"wwwFirewall\", network_id=custom_net.id)\n# Create a firewall with the default rules\nwww_index_firewall_firewall = civo.Firewall(\"wwwIndex/firewallFirewall\",\n    network_id=custom_net.id,\n    create_default_rules=True)\n# Create a firewall withouth the default rules but with a custom rule\nwww_civo_index_firewall_firewall = civo.Firewall(\"wwwCivoIndex/firewallFirewall\",\n    network_id=custom_net.id,\n    create_default_rules=False,\n    ingress_rules=[\n        civo.FirewallIngressRuleArgs(\n            label=\"k8s\",\n            protocol=\"tcp\",\n            port_range=\"6443\",\n            cidrs=[\n                \"192.168.1.1/32\",\n                \"192.168.10.4/32\",\n                \"192.168.10.10/32\",\n            ],\n            action=\"allow\",\n        ),\n        civo.FirewallIngressRuleArgs(\n            label=\"ssh\",\n            protocol=\"tcp\",\n            port_range=\"22\",\n            cidrs=[\n                \"192.168.1.1/32\",\n                \"192.168.10.4/32\",\n                \"192.168.10.10/32\",\n            ],\n            action=\"allow\",\n        ),\n    ],\n    egress_rules=[civo.FirewallEgressRuleArgs(\n        label=\"all\",\n        protocol=\"tcp\",\n        port_range=\"1-65535\",\n        cidrs=[\"0.0.0.0/0\"],\n        action=\"allow\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a network\n    var customNet = new Civo.Network(\"customNet\", new()\n    {\n        Label = \"my-custom-network\",\n    });\n\n    // Create a firewall\n    var wwwFirewall = new Civo.Firewall(\"wwwFirewall\", new()\n    {\n        NetworkId = customNet.Id,\n    });\n\n    // Create a firewall with the default rules\n    var wwwIndex_firewallFirewall = new Civo.Firewall(\"wwwIndex/firewallFirewall\", new()\n    {\n        NetworkId = customNet.Id,\n        CreateDefaultRules = true,\n    });\n\n    // Create a firewall withouth the default rules but with a custom rule\n    var wwwCivoIndex_firewallFirewall = new Civo.Firewall(\"wwwCivoIndex/firewallFirewall\", new()\n    {\n        NetworkId = customNet.Id,\n        CreateDefaultRules = false,\n        IngressRules = new[]\n        {\n            new Civo.Inputs.FirewallIngressRuleArgs\n            {\n                Label = \"k8s\",\n                Protocol = \"tcp\",\n                PortRange = \"6443\",\n                Cidrs = new[]\n                {\n                    \"192.168.1.1/32\",\n                    \"192.168.10.4/32\",\n                    \"192.168.10.10/32\",\n                },\n                Action = \"allow\",\n            },\n            new Civo.Inputs.FirewallIngressRuleArgs\n            {\n                Label = \"ssh\",\n                Protocol = \"tcp\",\n                PortRange = \"22\",\n                Cidrs = new[]\n                {\n                    \"192.168.1.1/32\",\n                    \"192.168.10.4/32\",\n                    \"192.168.10.10/32\",\n                },\n                Action = \"allow\",\n            },\n        },\n        EgressRules = new[]\n        {\n            new Civo.Inputs.FirewallEgressRuleArgs\n            {\n                Label = \"all\",\n                Protocol = \"tcp\",\n                PortRange = \"1-65535\",\n                Cidrs = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Action = \"allow\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a network\n\t\tcustomNet, err := civo.NewNetwork(ctx, \"customNet\", \u0026civo.NetworkArgs{\n\t\t\tLabel: pulumi.String(\"my-custom-network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a firewall\n\t\t_, err = civo.NewFirewall(ctx, \"wwwFirewall\", \u0026civo.FirewallArgs{\n\t\t\tNetworkId: customNet.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a firewall with the default rules\n\t\t_, err = civo.NewFirewall(ctx, \"wwwIndex/firewallFirewall\", \u0026civo.FirewallArgs{\n\t\t\tNetworkId:          customNet.ID(),\n\t\t\tCreateDefaultRules: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a firewall withouth the default rules but with a custom rule\n\t\t_, err = civo.NewFirewall(ctx, \"wwwCivoIndex/firewallFirewall\", \u0026civo.FirewallArgs{\n\t\t\tNetworkId:          customNet.ID(),\n\t\t\tCreateDefaultRules: pulumi.Bool(false),\n\t\t\tIngressRules: civo.FirewallIngressRuleArray{\n\t\t\t\t\u0026civo.FirewallIngressRuleArgs{\n\t\t\t\t\tLabel:     pulumi.String(\"k8s\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t\tPortRange: pulumi.String(\"6443\"),\n\t\t\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"192.168.1.1/32\"),\n\t\t\t\t\t\tpulumi.String(\"192.168.10.4/32\"),\n\t\t\t\t\t\tpulumi.String(\"192.168.10.10/32\"),\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"allow\"),\n\t\t\t\t},\n\t\t\t\t\u0026civo.FirewallIngressRuleArgs{\n\t\t\t\t\tLabel:     pulumi.String(\"ssh\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t\tPortRange: pulumi.String(\"22\"),\n\t\t\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"192.168.1.1/32\"),\n\t\t\t\t\t\tpulumi.String(\"192.168.10.4/32\"),\n\t\t\t\t\t\tpulumi.String(\"192.168.10.10/32\"),\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"allow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEgressRules: civo.FirewallEgressRuleArray{\n\t\t\t\t\u0026civo.FirewallEgressRuleArgs{\n\t\t\t\t\tLabel:     pulumi.String(\"all\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t\tPortRange: pulumi.String(\"1-65535\"),\n\t\t\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"allow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.Network;\nimport com.pulumi.civo.NetworkArgs;\nimport com.pulumi.civo.Firewall;\nimport com.pulumi.civo.FirewallArgs;\nimport com.pulumi.civo.inputs.FirewallIngressRuleArgs;\nimport com.pulumi.civo.inputs.FirewallEgressRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var customNet = new Network(\"customNet\", NetworkArgs.builder()        \n            .label(\"my-custom-network\")\n            .build());\n\n        var wwwFirewall = new Firewall(\"wwwFirewall\", FirewallArgs.builder()        \n            .networkId(customNet.id())\n            .build());\n\n        var wwwIndex_firewallFirewall = new Firewall(\"wwwIndex/firewallFirewall\", FirewallArgs.builder()        \n            .networkId(customNet.id())\n            .createDefaultRules(true)\n            .build());\n\n        var wwwCivoIndex_firewallFirewall = new Firewall(\"wwwCivoIndex/firewallFirewall\", FirewallArgs.builder()        \n            .networkId(customNet.id())\n            .createDefaultRules(false)\n            .ingressRules(            \n                FirewallIngressRuleArgs.builder()\n                    .label(\"k8s\")\n                    .protocol(\"tcp\")\n                    .portRange(\"6443\")\n                    .cidrs(                    \n                        \"192.168.1.1/32\",\n                        \"192.168.10.4/32\",\n                        \"192.168.10.10/32\")\n                    .action(\"allow\")\n                    .build(),\n                FirewallIngressRuleArgs.builder()\n                    .label(\"ssh\")\n                    .protocol(\"tcp\")\n                    .portRange(\"22\")\n                    .cidrs(                    \n                        \"192.168.1.1/32\",\n                        \"192.168.10.4/32\",\n                        \"192.168.10.10/32\")\n                    .action(\"allow\")\n                    .build())\n            .egressRules(FirewallEgressRuleArgs.builder()\n                .label(\"all\")\n                .protocol(\"tcp\")\n                .portRange(\"1-65535\")\n                .cidrs(\"0.0.0.0/0\")\n                .action(\"allow\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a network\n  customNet:\n    type: civo:Network\n    properties:\n      label: my-custom-network\n  # Create a firewall\n  wwwFirewall:\n    type: civo:Firewall\n    properties:\n      networkId: ${customNet.id}\n  # Create a firewall with the default rules\n  wwwIndex/firewallFirewall:\n    type: civo:Firewall\n    properties:\n      networkId: ${customNet.id}\n      createDefaultRules: true\n  # Create a firewall withouth the default rules but with a custom rule\n  wwwCivoIndex/firewallFirewall:\n    type: civo:Firewall\n    properties:\n      networkId: ${customNet.id}\n      createDefaultRules: false\n      ingressRules:\n        - label: k8s\n          protocol: tcp\n          portRange: '6443'\n          cidrs:\n            - 192.168.1.1/32\n            - 192.168.10.4/32\n            - 192.168.10.10/32\n          action: allow\n        - label: ssh\n          protocol: tcp\n          portRange: '22'\n          cidrs:\n            - 192.168.1.1/32\n            - 192.168.10.4/32\n            - 192.168.10.10/32\n          action: allow\n      egressRules:\n        - label: all\n          protocol: tcp\n          portRange: 1-65535\n          cidrs:\n            - 0.0.0.0/0\n          action: allow\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/firewall:Firewall www b8ecd2ab-2267-4a5e-8692-cbf1d32583e3\n```\n\n ",
            "properties": {
                "createDefaultRules": {
                    "type": "boolean",
                    "description": "The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you set to false you need to define at least one ingress or egress rule\n"
                },
                "egressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/FirewallEgressRule:FirewallEgressRule"
                    },
                    "description": "The egress rules, this is a list of rules that will be applied to the firewall\n"
                },
                "ingressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/FirewallIngressRule:FirewallIngressRule"
                    },
                    "description": "The ingress rules, this is a list of rules that will be applied to the firewall\n"
                },
                "name": {
                    "type": "string",
                    "description": "The firewall name\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The firewall network, if is not defined we use the default network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The firewall region, if is not defined we use the global defined in the provider\n"
                }
            },
            "required": [
                "egressRules",
                "ingressRules",
                "name",
                "networkId",
                "region"
            ],
            "inputProperties": {
                "createDefaultRules": {
                    "type": "boolean",
                    "description": "The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you set to false you need to define at least one ingress or egress rule\n",
                    "willReplaceOnChanges": true
                },
                "egressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/FirewallEgressRule:FirewallEgressRule"
                    },
                    "description": "The egress rules, this is a list of rules that will be applied to the firewall\n"
                },
                "ingressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/FirewallIngressRule:FirewallIngressRule"
                    },
                    "description": "The ingress rules, this is a list of rules that will be applied to the firewall\n"
                },
                "name": {
                    "type": "string",
                    "description": "The firewall name\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The firewall network, if is not defined we use the default network\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The firewall region, if is not defined we use the global defined in the provider\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "createDefaultRules": {
                        "type": "boolean",
                        "description": "The create rules flag is used to create the default firewall rules, if is not defined will be set to true, and if you set to false you need to define at least one ingress or egress rule\n",
                        "willReplaceOnChanges": true
                    },
                    "egressRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/FirewallEgressRule:FirewallEgressRule"
                        },
                        "description": "The egress rules, this is a list of rules that will be applied to the firewall\n"
                    },
                    "ingressRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/FirewallIngressRule:FirewallIngressRule"
                        },
                        "description": "The ingress rules, this is a list of rules that will be applied to the firewall\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The firewall name\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The firewall network, if is not defined we use the default network\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The firewall region, if is not defined we use the global defined in the provider\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/firewallRule:FirewallRule": {
            "description": "Provides a Civo firewall rule resource. This can be used to create, modify, and delete firewalls rules. This resource don't have an update option because Civo backend doesn't support it at this moment. In that case, we use `ForceNew` for all object in the resource.\n\n\n## Import\n\nusing firewall_id:firewall_rule_id\n\n ```sh\n $ pulumi import civo:index/firewallRule:FirewallRule http b8ecd2ab-2267-4a5e-8692-cbf1d32583e3:4b0022ee-00b2-4f81-a40d-b4f8728923a7\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.\n"
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the rule can be ingress or egress\n"
                },
                "endPort": {
                    "type": "string",
                    "description": "The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The Firewall ID\n"
                },
                "label": {
                    "type": "string",
                    "description": "A string that will be the displayed name/reference for this rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for this rule\n"
                },
                "startPort": {
                    "type": "string",
                    "description": "The start of the port range to configure for this rule (or the single port if required)\n"
                }
            },
            "required": [
                "action",
                "cidrs",
                "direction",
                "endPort",
                "firewallId",
                "label",
                "protocol",
                "region",
                "startPort"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.\n",
                    "willReplaceOnChanges": true
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)\n",
                    "willReplaceOnChanges": true
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the rule can be ingress or egress\n",
                    "willReplaceOnChanges": true
                },
                "endPort": {
                    "type": "string",
                    "description": "The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n",
                    "willReplaceOnChanges": true
                },
                "firewallId": {
                    "type": "string",
                    "description": "The Firewall ID\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A string that will be the displayed name/reference for this rule\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region for this rule\n",
                    "willReplaceOnChanges": true
                },
                "startPort": {
                    "type": "string",
                    "description": "The start of the port range to configure for this rule (or the single port if required)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "cidrs",
                "direction",
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action of the rule can be allow or deny. When we set the `action = 'allow'`, this is going to add a rule to allow traffic. Similarly, setting `action = 'deny'` will deny the traffic.\n",
                        "willReplaceOnChanges": true
                    },
                    "cidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)\n",
                        "willReplaceOnChanges": true
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction of the rule can be ingress or egress\n",
                        "willReplaceOnChanges": true
                    },
                    "endPort": {
                        "type": "string",
                        "description": "The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The Firewall ID\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string",
                        "description": "A string that will be the displayed name/reference for this rule\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for this rule\n",
                        "willReplaceOnChanges": true
                    },
                    "startPort": {
                        "type": "string",
                        "description": "The start of the port range to configure for this rule (or the single port if required)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "civo:index/instance:Instance": {
            "description": "Provides a Civo instance resource. This can be used to create, modify, and delete instances.\n\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/instance:Instance myintance 18bd98ad-1b6e-4f87-b48f-e690b4fd7413\n```\n\n ",
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "description": "Instance's CPU cores\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp when the instance was created\n"
                },
                "diskGb": {
                    "type": "integer",
                    "description": "Instance's disk (GB)\n"
                },
                "diskImage": {
                    "type": "string",
                    "description": "The ID for the disk image to use to build the instance\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be set as the instance's hostname\n"
                },
                "initialPassword": {
                    "type": "string",
                    "description": "Initial password for login\n",
                    "secret": true
                },
                "initialUser": {
                    "type": "string",
                    "description": "The name of the initial user created on the server (optional; this will default to the template's default_username and fallback to civo)\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "This must be the ID of the network from the network listing (optional; default network used when not specified)\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Add some notes to the instance\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Instance's private IP address\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Instance's public IP address\n"
                },
                "publicIpRequired": {
                    "type": "string",
                    "description": "This should be either 'none' or 'create' (default: 'create')\n"
                },
                "ramMb": {
                    "type": "integer",
                    "description": "Instance's RAM (MB)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the instance, if not declare we use the region in declared in the provider\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified)\n"
                },
                "script": {
                    "type": "string",
                    "description": "The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization\n"
                },
                "size": {
                    "type": "string",
                    "description": "The name of the size, from the current list, e.g. g3.xsmall\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "Instance's source ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "Instance's source type\n"
                },
                "sshkeyId": {
                    "type": "string",
                    "description": "The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initial_password field)\n"
                },
                "status": {
                    "type": "string",
                    "description": "Instance's status\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of tags, represented as a key, value pair\n"
                },
                "template": {
                    "type": "string",
                    "description": "The ID for the template to use to build the instance\n",
                    "deprecationMessage": "\"template\" attribute is deprecated. Moving forward, please use \"disk_image\" attribute."
                }
            },
            "required": [
                "cpuCores",
                "createdAt",
                "diskGb",
                "diskImage",
                "firewallId",
                "hostname",
                "initialPassword",
                "networkId",
                "privateIp",
                "publicIp",
                "ramMb",
                "sourceId",
                "sourceType",
                "status",
                "template"
            ],
            "inputProperties": {
                "diskImage": {
                    "type": "string",
                    "description": "The ID for the disk image to use to build the instance\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be set as the instance's hostname\n",
                    "willReplaceOnChanges": true
                },
                "initialUser": {
                    "type": "string",
                    "description": "The name of the initial user created on the server (optional; this will default to the template's default_username and fallback to civo)\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "This must be the ID of the network from the network listing (optional; default network used when not specified)\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Add some notes to the instance\n"
                },
                "publicIpRequired": {
                    "type": "string",
                    "description": "This should be either 'none' or 'create' (default: 'create')\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the instance, if not declare we use the region in declared in the provider\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified)\n"
                },
                "script": {
                    "type": "string",
                    "description": "The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization\n"
                },
                "size": {
                    "type": "string",
                    "description": "The name of the size, from the current list, e.g. g3.xsmall\n"
                },
                "sshkeyId": {
                    "type": "string",
                    "description": "The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initial_password field)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of tags, represented as a key, value pair\n"
                },
                "template": {
                    "type": "string",
                    "description": "The ID for the template to use to build the instance\n",
                    "deprecationMessage": "\"template\" attribute is deprecated. Moving forward, please use \"disk_image\" attribute."
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "cpuCores": {
                        "type": "integer",
                        "description": "Instance's CPU cores\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when the instance was created\n"
                    },
                    "diskGb": {
                        "type": "integer",
                        "description": "Instance's disk (GB)\n"
                    },
                    "diskImage": {
                        "type": "string",
                        "description": "The ID for the disk image to use to build the instance\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "A fully qualified domain name that should be set as the instance's hostname\n",
                        "willReplaceOnChanges": true
                    },
                    "initialPassword": {
                        "type": "string",
                        "description": "Initial password for login\n",
                        "secret": true
                    },
                    "initialUser": {
                        "type": "string",
                        "description": "The name of the initial user created on the server (optional; this will default to the template's default_username and fallback to civo)\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "This must be the ID of the network from the network listing (optional; default network used when not specified)\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Add some notes to the instance\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Instance's private IP address\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Instance's public IP address\n"
                    },
                    "publicIpRequired": {
                        "type": "string",
                        "description": "This should be either 'none' or 'create' (default: 'create')\n"
                    },
                    "ramMb": {
                        "type": "integer",
                        "description": "Instance's RAM (MB)\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the instance, if not declare we use the region in declared in the provider\n"
                    },
                    "reverseDns": {
                        "type": "string",
                        "description": "A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified)\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The name of the size, from the current list, e.g. g3.xsmall\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Instance's source ID\n"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "Instance's source type\n"
                    },
                    "sshkeyId": {
                        "type": "string",
                        "description": "The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initial_password field)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Instance's status\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of tags, represented as a key, value pair\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The ID for the template to use to build the instance\n",
                        "deprecationMessage": "\"template\" attribute is deprecated. Moving forward, please use \"disk_image\" attribute."
                    }
                },
                "type": "object"
            }
        },
        "civo:index/instanceReservedIpAssignment:InstanceReservedIpAssignment": {
            "description": "The instance reserved ip assignment resource schema definition\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\n// Send to create a reserved IP\nconst www = new civo.ReservedIp(\"www\", {});\n// We assign the reserved IP to the instance\nconst webserver_www = new civo.InstanceReservedIpAssignment(\"webserver-www\", {\n    instanceId: civo_instance.www.id,\n    reservedIpId: civo_reserved_ip[\"web-server\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\n# Send to create a reserved IP\nwww = civo.ReservedIp(\"www\")\n# We assign the reserved IP to the instance\nwebserver_www = civo.InstanceReservedIpAssignment(\"webserver-www\",\n    instance_id=civo_instance[\"www\"][\"id\"],\n    reserved_ip_id=civo_reserved_ip[\"web-server\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Send to create a reserved IP\n    var www = new Civo.ReservedIp(\"www\");\n\n    // We assign the reserved IP to the instance\n    var webserver_www = new Civo.InstanceReservedIpAssignment(\"webserver-www\", new()\n    {\n        InstanceId = civo_instance.Www.Id,\n        ReservedIpId = civo_reserved_ip.Web_server.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Send to create a reserved IP\n\t\t_, err := civo.NewReservedIp(ctx, \"www\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// We assign the reserved IP to the instance\n\t\t_, err = civo.NewInstanceReservedIpAssignment(ctx, \"webserver-www\", \u0026civo.InstanceReservedIpAssignmentArgs{\n\t\t\tInstanceId:   pulumi.Any(civo_instance.Www.Id),\n\t\t\tReservedIpId: pulumi.Any(civo_reserved_ip.WebServer.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.ReservedIp;\nimport com.pulumi.civo.InstanceReservedIpAssignment;\nimport com.pulumi.civo.InstanceReservedIpAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new ReservedIp(\"www\");\n\n        var webserver_www = new InstanceReservedIpAssignment(\"webserver-www\", InstanceReservedIpAssignmentArgs.builder()        \n            .instanceId(civo_instance.www().id())\n            .reservedIpId(civo_reserved_ip.web-server().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Send to create a reserved IP\n  www:\n    type: civo:ReservedIp\n  # We assign the reserved IP to the instance\n  webserver-www:\n    type: civo:InstanceReservedIpAssignment\n    properties:\n      instanceId: ${civo_instance.www.id}\n      reservedIpId: ${civo_reserved_ip\"web-server\"[%!s(MISSING)].id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance id\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the ip\n"
                },
                "reservedIpId": {
                    "type": "string",
                    "description": "The reserved ip id\n"
                }
            },
            "required": [
                "instanceId",
                "region",
                "reservedIpId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance id\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region of the ip\n"
                },
                "reservedIpId": {
                    "type": "string",
                    "description": "The reserved ip id\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "reservedIpId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceReservedIpAssignment resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the ip\n"
                    },
                    "reservedIpId": {
                        "type": "string",
                        "description": "The reserved ip id\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "civo:index/kubernetesCluster:KubernetesCluster": {
            "description": "Provides a Civo Kubernetes cluster resource. This can be used to create, delete, and modify clusters.\n\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/kubernetesCluster:KubernetesCluster my-cluster 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af\n```\n\n ",
            "properties": {
                "apiEndpoint": {
                    "type": "string",
                    "description": "The API server endpoint of the cluster\n"
                },
                "applications": {
                    "type": "string",
                    "description": "Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik. For application that supports plans, you can use 'app*name:app*plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or 'MariaDB:5GB'.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "The type of cluster to create, valid options are `k3s` or `talos` the default is `k3s`\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The timestamp when the cluster was created\n"
                },
                "dnsEntry": {
                    "type": "string",
                    "description": "The DNS name of the cluster\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The existing firewall ID to use for this cluster\n"
                },
                "installedApplications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesClusterInstalledApplication:KubernetesClusterInstalledApplication"
                    }
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "The kubeconfig of the cluster\n",
                    "secret": true
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of k3s to install (optional, the default is currently the latest available)\n"
                },
                "masterIp": {
                    "type": "string",
                    "description": "The IP address of the master node\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for your cluster, must be unique within your account\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network for the cluster, if not declare we use the default one\n"
                },
                "numTargetNodes": {
                    "type": "integer",
                    "description": "The number of instances to create (optional, the default at the time of writing is 3)\n",
                    "deprecationMessage": "This field will be deprecated in the next major release, please use the 'pools' field instead"
                },
                "pools": {
                    "$ref": "#/types/civo:index/KubernetesClusterPools:KubernetesClusterPools"
                },
                "ready": {
                    "type": "boolean",
                    "description": "When cluster is ready, this will return `true`\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the cluster, if not declare we use the region in declared in the provider\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Space separated list of tags, to be used freely as required\n"
                },
                "targetNodesSize": {
                    "type": "string",
                    "description": "The size of each node (optional, the default is currently g4s.kube.medium)\n",
                    "deprecationMessage": "This field will be deprecated in the next major release, please use the 'pools' field instead"
                }
            },
            "required": [
                "apiEndpoint",
                "clusterType",
                "cni",
                "createdAt",
                "dnsEntry",
                "firewallId",
                "installedApplications",
                "kubeconfig",
                "kubernetesVersion",
                "masterIp",
                "name",
                "networkId",
                "numTargetNodes",
                "pools",
                "ready",
                "region",
                "status",
                "targetNodesSize"
            ],
            "inputProperties": {
                "applications": {
                    "type": "string",
                    "description": "Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik. For application that supports plans, you can use 'app*name:app*plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or 'MariaDB:5GB'.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "The type of cluster to create, valid options are `k3s` or `talos` the default is `k3s`\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The existing firewall ID to use for this cluster\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of k3s to install (optional, the default is currently the latest available)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for your cluster, must be unique within your account\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network for the cluster, if not declare we use the default one\n"
                },
                "numTargetNodes": {
                    "type": "integer",
                    "description": "The number of instances to create (optional, the default at the time of writing is 3)\n",
                    "deprecationMessage": "This field will be deprecated in the next major release, please use the 'pools' field instead"
                },
                "pools": {
                    "$ref": "#/types/civo:index/KubernetesClusterPools:KubernetesClusterPools"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the cluster, if not declare we use the region in declared in the provider\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Space separated list of tags, to be used freely as required\n"
                },
                "targetNodesSize": {
                    "type": "string",
                    "description": "The size of each node (optional, the default is currently g4s.kube.medium)\n",
                    "deprecationMessage": "This field will be deprecated in the next major release, please use the 'pools' field instead"
                }
            },
            "requiredInputs": [
                "firewallId",
                "pools"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "apiEndpoint": {
                        "type": "string",
                        "description": "The API server endpoint of the cluster\n"
                    },
                    "applications": {
                        "type": "string",
                        "description": "Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik. For application that supports plans, you can use 'app*name:app*plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or 'MariaDB:5GB'.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "The type of cluster to create, valid options are `k3s` or `talos` the default is `k3s`\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The timestamp when the cluster was created\n"
                    },
                    "dnsEntry": {
                        "type": "string",
                        "description": "The DNS name of the cluster\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The existing firewall ID to use for this cluster\n"
                    },
                    "installedApplications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/KubernetesClusterInstalledApplication:KubernetesClusterInstalledApplication"
                        }
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "The kubeconfig of the cluster\n",
                        "secret": true
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The version of k3s to install (optional, the default is currently the latest available)\n"
                    },
                    "masterIp": {
                        "type": "string",
                        "description": "The IP address of the master node\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for your cluster, must be unique within your account\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network for the cluster, if not declare we use the default one\n"
                    },
                    "numTargetNodes": {
                        "type": "integer",
                        "description": "The number of instances to create (optional, the default at the time of writing is 3)\n",
                        "deprecationMessage": "This field will be deprecated in the next major release, please use the 'pools' field instead"
                    },
                    "pools": {
                        "$ref": "#/types/civo:index/KubernetesClusterPools:KubernetesClusterPools"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "When cluster is ready, this will return `true`\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the cluster, if not declare we use the region in declared in the provider\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Space separated list of tags, to be used freely as required\n"
                    },
                    "targetNodesSize": {
                        "type": "string",
                        "description": "The size of each node (optional, the default is currently g4s.kube.medium)\n",
                        "deprecationMessage": "This field will be deprecated in the next major release, please use the 'pools' field instead"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/kubernetesNodePool:KubernetesNodePool": {
            "description": "\n\n\n## Import\n\n```sh\n $ pulumi import civo:index/kubernetesNodePool:KubernetesNodePool my-pool 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af:502c1130-cb9b-4a88-b6d2-307bd96d946a\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of your cluster\n"
                },
                "instanceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance names in the nodepool\n"
                },
                "label": {
                    "type": "string",
                    "description": "Node pool label, if you don't provide one, we will generate one for you\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "the number of instances to create (optional, the default at the time of writing is 3)\n"
                },
                "publicIpNodePool": {
                    "type": "boolean",
                    "description": "Node pool belongs to the public ip node pool\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the node pool, has to match that of the cluster\n"
                },
                "size": {
                    "type": "string",
                    "description": "the size of each node (optional, the default is currently g4s.kube.medium)\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesNodePoolTaint:KubernetesNodePoolTaint"
                    }
                }
            },
            "required": [
                "clusterId",
                "instanceNames",
                "label",
                "nodeCount",
                "publicIpNodePool",
                "region",
                "size"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of your cluster\n"
                },
                "label": {
                    "type": "string",
                    "description": "Node pool label, if you don't provide one, we will generate one for you\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "the number of instances to create (optional, the default at the time of writing is 3)\n"
                },
                "publicIpNodePool": {
                    "type": "boolean",
                    "description": "Node pool belongs to the public ip node pool\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the node pool, has to match that of the cluster\n"
                },
                "size": {
                    "type": "string",
                    "description": "the size of each node (optional, the default is currently g4s.kube.medium)\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesNodePoolTaint:KubernetesNodePoolTaint"
                    }
                }
            },
            "requiredInputs": [
                "clusterId",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodePool resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of your cluster\n"
                    },
                    "instanceNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance names in the nodepool\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Node pool label, if you don't provide one, we will generate one for you\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "nodeCount": {
                        "type": "integer",
                        "description": "the number of instances to create (optional, the default at the time of writing is 3)\n"
                    },
                    "publicIpNodePool": {
                        "type": "boolean",
                        "description": "Node pool belongs to the public ip node pool\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the node pool, has to match that of the cluster\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "the size of each node (optional, the default is currently g4s.kube.medium)\n"
                    },
                    "taints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/KubernetesNodePoolTaint:KubernetesNodePoolTaint"
                        }
                    }
                },
                "type": "object"
            }
        },
        "civo:index/network:Network": {
            "description": "Provides a Civo network resource. This can be used to create, modify, and delete networks.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst customNet = new civo.Network(\"customNet\", {label: \"test_network\"});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ncustom_net = civo.Network(\"customNet\", label=\"test_network\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customNet = new Civo.Network(\"customNet\", new()\n    {\n        Label = \"test_network\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.NewNetwork(ctx, \"customNet\", \u0026civo.NetworkArgs{\n\t\t\tLabel: pulumi.String(\"test_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.Network;\nimport com.pulumi.civo.NetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var customNet = new Network(\"customNet\", NetworkArgs.builder()        \n            .label(\"test_network\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  customNet:\n    type: civo:Network\n    properties:\n      label: test_network\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/network:Network custom_net b8ecd2ab-2267-4a5e-8692-cbf1d32583e3\n```\n\n ",
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "If the network is default, this will be `true`\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name for the network\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the network\n"
                }
            },
            "required": [
                "default",
                "label",
                "name",
                "region"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "Name for the network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the network\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "If the network is default, this will be `true`\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Name for the network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the network\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/objectStore:ObjectStore": {
            "description": "Provides an Object Store resource. This can be used to create, modify, and delete object stores.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst backupObjectStore = new civo.ObjectStore(\"backupObjectStore\", {\n    maxSizeGb: 500,\n    region: \"LON1\",\n});\nconst backupObjectStoreCredential = civo.getObjectStoreCredentialOutput({\n    id: backupObjectStore.accessKeyId,\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nbackup_object_store = civo.ObjectStore(\"backupObjectStore\",\n    max_size_gb=500,\n    region=\"LON1\")\nbackup_object_store_credential = civo.get_object_store_credential_output(id=backup_object_store.access_key_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backupObjectStore = new Civo.ObjectStore(\"backupObjectStore\", new()\n    {\n        MaxSizeGb = 500,\n        Region = \"LON1\",\n    });\n\n    var backupObjectStoreCredential = Civo.GetObjectStoreCredential.Invoke(new()\n    {\n        Id = backupObjectStore.AccessKeyId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbackupObjectStore, err := civo.NewObjectStore(ctx, \"backupObjectStore\", \u0026civo.ObjectStoreArgs{\n\t\t\tMaxSizeGb: pulumi.Int(500),\n\t\t\tRegion:    pulumi.String(\"LON1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = civo.LookupObjectStoreCredentialOutput(ctx, civo.GetObjectStoreCredentialOutputArgs{\n\t\t\tId: backupObjectStore.AccessKeyId,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.ObjectStore;\nimport com.pulumi.civo.ObjectStoreArgs;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetObjectStoreCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backupObjectStore = new ObjectStore(\"backupObjectStore\", ObjectStoreArgs.builder()        \n            .maxSizeGb(500)\n            .region(\"LON1\")\n            .build());\n\n        final var backupObjectStoreCredential = CivoFunctions.getObjectStoreCredential(GetObjectStoreCredentialArgs.builder()\n            .id(backupObjectStore.accessKeyId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backupObjectStore:\n    type: civo:ObjectStore\n    properties:\n      maxSizeGb: 500\n      region: LON1\nvariables:\n  backupObjectStoreCredential:\n    fn::invoke:\n      Function: civo:getObjectStoreCredential\n      Arguments:\n        id: ${backupObjectStore.accessKeyId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/objectStore:ObjectStore custom_object b8ecd2ab-2267-4a5e-8692-cbf1d32583e3\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key ID from the Object Store credential. If this is not set, a new credential will be created.\n"
                },
                "bucketUrl": {
                    "type": "string",
                    "description": "The endpoint of the Object Store. It is generated by the provider.\n"
                },
                "maxSizeGb": {
                    "type": "integer",
                    "description": "The maximum size of the Object Store. Default is 500GB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Object Store. Must be unique.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Object Store.\n"
                }
            },
            "required": [
                "accessKeyId",
                "bucketUrl",
                "name",
                "region",
                "status"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key ID from the Object Store credential. If this is not set, a new credential will be created.\n"
                },
                "maxSizeGb": {
                    "type": "integer",
                    "description": "The maximum size of the Object Store. Default is 500GB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Object Store. Must be unique.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStore resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The access key ID from the Object Store credential. If this is not set, a new credential will be created.\n"
                    },
                    "bucketUrl": {
                        "type": "string",
                        "description": "The endpoint of the Object Store. It is generated by the provider.\n"
                    },
                    "maxSizeGb": {
                        "type": "integer",
                        "description": "The maximum size of the Object Store. Default is 500GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Object Store. Must be unique.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the Object Store, if not declared we use the region as declared in the provider (Defaults to LON1)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Object Store.\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/objectStoreCredential:ObjectStoreCredential": {
            "description": "Provides an Object Store Credential resource. This can be used to create, modify, and delete object stores credential.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst backupObjectStoreCredential = civo.getObjectStoreCredential({\n    name: \"backup-server\",\n});\n// Create a credential for the object store with a specific access key and secret key\nconst backupIndex_objectStoreCredentialObjectStoreCredential = new civo.ObjectStoreCredential(\"backupIndex/objectStoreCredentialObjectStoreCredential\", {\n    accessKeyId: \"my-access-key\",\n    secretAccessKey: \"my-secret-key\",\n});\n// Use the credential to create a bucket\nconst backupObjectStore = new civo.ObjectStore(\"backupObjectStore\", {\n    maxSizeGb: 500,\n    region: \"LON1\",\n    accessKeyId: backupIndex / objectStoreCredentialObjectStoreCredential.accessKeyId,\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nbackup_object_store_credential = civo.get_object_store_credential(name=\"backup-server\")\n# Create a credential for the object store with a specific access key and secret key\nbackup_index_object_store_credential_object_store_credential = civo.ObjectStoreCredential(\"backupIndex/objectStoreCredentialObjectStoreCredential\",\n    access_key_id=\"my-access-key\",\n    secret_access_key=\"my-secret-key\")\n# Use the credential to create a bucket\nbackup_object_store = civo.ObjectStore(\"backupObjectStore\",\n    max_size_gb=500,\n    region=\"LON1\",\n    access_key_id=backup_index / object_store_credential_object_store_credential[\"accessKeyId\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backupObjectStoreCredential = Civo.GetObjectStoreCredential.Invoke(new()\n    {\n        Name = \"backup-server\",\n    });\n\n    // Create a credential for the object store with a specific access key and secret key\n    var backupIndex_objectStoreCredentialObjectStoreCredential = new Civo.ObjectStoreCredential(\"backupIndex/objectStoreCredentialObjectStoreCredential\", new()\n    {\n        AccessKeyId = \"my-access-key\",\n        SecretAccessKey = \"my-secret-key\",\n    });\n\n    // Use the credential to create a bucket\n    var backupObjectStore = new Civo.ObjectStore(\"backupObjectStore\", new()\n    {\n        MaxSizeGb = 500,\n        Region = \"LON1\",\n        AccessKeyId = backupIndex / objectStoreCredentialObjectStoreCredential.AccessKeyId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.LookupObjectStoreCredential(ctx, \u0026civo.LookupObjectStoreCredentialArgs{\n\t\t\tName: pulumi.StringRef(\"backup-server\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a credential for the object store with a specific access key and secret key\n\t\t_, err = civo.NewObjectStoreCredential(ctx, \"backupIndex/objectStoreCredentialObjectStoreCredential\", \u0026civo.ObjectStoreCredentialArgs{\n\t\t\tAccessKeyId:     pulumi.String(\"my-access-key\"),\n\t\t\tSecretAccessKey: pulumi.String(\"my-secret-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the credential to create a bucket\n\t\t_, err = civo.NewObjectStore(ctx, \"backupObjectStore\", \u0026civo.ObjectStoreArgs{\n\t\t\tMaxSizeGb:   pulumi.Int(500),\n\t\t\tRegion:      pulumi.String(\"LON1\"),\n\t\t\tAccessKeyId: backupIndex / objectStoreCredentialObjectStoreCredential.AccessKeyId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetObjectStoreCredentialArgs;\nimport com.pulumi.civo.ObjectStoreCredential;\nimport com.pulumi.civo.ObjectStoreCredentialArgs;\nimport com.pulumi.civo.ObjectStore;\nimport com.pulumi.civo.ObjectStoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var backupObjectStoreCredential = CivoFunctions.getObjectStoreCredential(GetObjectStoreCredentialArgs.builder()\n            .name(\"backup-server\")\n            .build());\n\n        var backupIndex_objectStoreCredentialObjectStoreCredential = new ObjectStoreCredential(\"backupIndex/objectStoreCredentialObjectStoreCredential\", ObjectStoreCredentialArgs.builder()        \n            .accessKeyId(\"my-access-key\")\n            .secretAccessKey(\"my-secret-key\")\n            .build());\n\n        var backupObjectStore = new ObjectStore(\"backupObjectStore\", ObjectStoreArgs.builder()        \n            .maxSizeGb(500)\n            .region(\"LON1\")\n            .accessKeyId(backupIndex / objectStoreCredentialObjectStoreCredential.accessKeyId())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/objectStoreCredential:ObjectStoreCredential custom_object b8ecd2ab-2267-4a5e-8692-cbf1d32583e3\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key id of the Object Store Credential. It is generated by the provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Object Store Credential. Must be unique.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the Object Store Credential will be created.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The secret access key of the Object Store Credential. It is generated by the provider.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Object Store Credential.\n"
                }
            },
            "required": [
                "accessKeyId",
                "name",
                "secretAccessKey",
                "status"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key id of the Object Store Credential. It is generated by the provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Object Store Credential. Must be unique.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the Object Store Credential will be created.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The secret access key of the Object Store Credential. It is generated by the provider.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStoreCredential resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The access key id of the Object Store Credential. It is generated by the provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Object Store Credential. Must be unique.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where the Object Store Credential will be created.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The secret access key of the Object Store Credential. It is generated by the provider.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Object Store Credential.\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/reservedIp:ReservedIp": {
            "description": "Provides a Civo reserved IP to represent a publicly-accessible static IP addresses that can be mapped to one of your Instancesor Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst www = new civo.ReservedIp(\"www\", {});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nwww = civo.ReservedIp(\"www\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Civo.ReservedIp(\"www\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.NewReservedIp(ctx, \"www\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.ReservedIp;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new ReservedIp(\"www\");\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: civo:ReservedIp\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterrafom import civo_reserved_ip.www 9f0e86fc-b2c6-46b4-82ed-2f28419f8ae3\n\n ",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The IP Address of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the ip address\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the ip\n"
                }
            },
            "required": [
                "ip",
                "name",
                "region"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name for the ip address\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the ip\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReservedIp resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "The IP Address of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the ip address\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the ip\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/sshKey:SshKey": {
            "description": "Provides a Civo SSH key resource to allow you to manage SSH keys for instance access. Keys created with this resource can be referenced in your instance configuration via their ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\nimport * as fs from \"fs\";\n\nconst my_user = new civo.SshKey(\"my-user\", {publicKey: fs.readFileSync(\"~/.ssh/id_rsa.pub\", \"utf8\")});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmy_user = civo.SshKey(\"my-user\", public_key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_user = new Civo.SshKey(\"my-user\", new()\n    {\n        PublicKey = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.NewSshKey(ctx, \"my-user\", \u0026civo.SshKeyArgs{\n\t\t\tPublicKey: readFileOrPanic(\"~/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.SshKey;\nimport com.pulumi.civo.SshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_user = new SshKey(\"my-user\", SshKeyArgs.builder()        \n            .publicKey(Files.readString(Paths.get(\"~/.ssh/id_rsa.pub\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-user:\n    type: civo:SshKey\n    properties:\n      publicKey:\n        fn::readFile: ~/.ssh/id_rsa.pub\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/sshKey:SshKey mykey 87ca2ee4-57d3-4420-b9b6-411b0b4b2a0e\n```\n\n ",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "a string containing the SSH finger print.\n"
                },
                "name": {
                    "type": "string",
                    "description": "a string that will be the reference for the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "a string containing the SSH public key.\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "a string that will be the reference for the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "a string containing the SSH public key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "a string containing the SSH finger print.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "a string that will be the reference for the SSH key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "a string containing the SSH public key.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "civo:index/volume:Volume": {
            "description": "Provides a Civo volume which can be attached to an instance in order to provide expanded storage.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst defaultNetwork = civo.getNetwork({\n    label: \"Default\",\n});\n// Create volume\nconst db = new civo.Volume(\"db\", {\n    sizeGb: 5,\n    networkId: defaultNetwork.then(defaultNetwork =\u003e defaultNetwork.id),\n}, {\n    dependsOn: [defaultNetwork],\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ndefault_network = civo.get_network(label=\"Default\")\n# Create volume\ndb = civo.Volume(\"db\",\n    size_gb=5,\n    network_id=default_network.id,\n    opts=pulumi.ResourceOptions(depends_on=[default_network]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var defaultNetwork = Civo.GetNetwork.Invoke(new()\n    {\n        Label = \"Default\",\n    });\n\n    // Create volume\n    var db = new Civo.Volume(\"db\", new()\n    {\n        SizeGb = 5,\n        NetworkId = defaultNetwork.Apply(getNetworkResult =\u003e getNetworkResult.Id),\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            defaultNetwork,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdefaultNetwork, err := civo.LookupNetwork(ctx, \u0026civo.LookupNetworkArgs{\n\t\t\tLabel: pulumi.StringRef(\"Default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create volume\n\t\t_, err = civo.NewVolume(ctx, \"db\", \u0026civo.VolumeArgs{\n\t\t\tSizeGb:    pulumi.Int(5),\n\t\t\tNetworkId: *pulumi.String(defaultNetwork.Id),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdefaultNetwork,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetNetworkArgs;\nimport com.pulumi.civo.Volume;\nimport com.pulumi.civo.VolumeArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var defaultNetwork = CivoFunctions.getNetwork(GetNetworkArgs.builder()\n            .label(\"Default\")\n            .build());\n\n        var db = new Volume(\"db\", VolumeArgs.builder()        \n            .sizeGb(5)\n            .networkId(defaultNetwork.applyValue(getNetworkResult -\u003e getNetworkResult.id()))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(defaultNetwork.applyValue(getNetworkResult -\u003e getNetworkResult))\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create volume\n  db:\n    type: civo:Volume\n    properties:\n      sizeGb: 5\n      networkId: ${defaultNetwork.id}\n    options:\n      dependson:\n        - ${defaultNetwork}\nvariables:\n  defaultNetwork:\n    fn::invoke:\n      Function: civo:getNetwork\n      Arguments:\n        label: Default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nusing ID\n\n ```sh\n $ pulumi import civo:index/volume:Volume db 506f78a4-e098-11e5-ad9f-000f53306ae1\n```\n\n ",
            "properties": {
                "mountPoint": {
                    "type": "string",
                    "description": "The mount point of the volume (from instance's perspective)\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name that you wish to use to refer to this volume\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network that the volume belongs to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume, if not declare we use the region in declared in the provider.\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n"
                }
            },
            "required": [
                "mountPoint",
                "name",
                "networkId",
                "sizeGb"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "A name that you wish to use to refer to this volume\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network that the volume belongs to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume, if not declare we use the region in declared in the provider.\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n"
                }
            },
            "requiredInputs": [
                "networkId",
                "sizeGb"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "mountPoint": {
                        "type": "string",
                        "description": "The mount point of the volume (from instance's perspective)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name that you wish to use to refer to this volume\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network that the volume belongs to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the volume, if not declare we use the region in declared in the provider.\n"
                    },
                    "sizeGb": {
                        "type": "integer",
                        "description": "A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/volumeAttachment:VolumeAttachment": {
            "description": "Manages volume attachment/detachment to an instance.\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of target instance for attachment\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume attachment\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of target volume for attachment\n"
                }
            },
            "required": [
                "instanceId",
                "volumeId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of target instance for attachment\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume attachment\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of target volume for attachment\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttachment resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of target instance for attachment\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the volume attachment\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of target volume for attachment\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "civo:index/getDatabase:getDatabase": {
            "description": "Get information of an Database for use in other resources. This data source provides all of the Database's properties as configured on your Civo account.\n\nNote: This data source returns a single Database. When specifying a name, an error will be raised if more than one Databases with the same name found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst test = civo.getDatabase({\n    name: \"test-database\",\n    region: \"LON1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ntest = civo.get_database(name=\"test-database\",\n    region=\"LON1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Civo.GetDatabase.Invoke(new()\n    {\n        Name = \"test-database\",\n        Region = \"LON1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.LookupDatabase(ctx, \u0026civo.LookupDatabaseArgs{\n\t\t\tName:   pulumi.StringRef(\"test-database\"),\n\t\t\tRegion: pulumi.StringRef(\"LON1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = CivoFunctions.getDatabase(GetDatabaseArgs.builder()\n            .name(\"test-database\")\n            .region(\"LON1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: civo:getDatabase\n      Arguments:\n        name: test-database\n        region: LON1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "dnsEndpoint": {
                        "type": "string",
                        "description": "The DNS endpoint of the database\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the database\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The engine of the database\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The firewall id of the Database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network id of the Database\n"
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "Count of nodes\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the database\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Database\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the database\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the database\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the database\n"
                    }
                },
                "type": "object",
                "required": [
                    "dnsEndpoint",
                    "endpoint",
                    "engine",
                    "firewallId",
                    "networkId",
                    "nodes",
                    "password",
                    "port",
                    "region",
                    "size",
                    "status",
                    "username",
                    "version"
                ]
            }
        },
        "civo:index/getDatabaseVersion:getDatabaseVersion": {
            "description": "Retrieves information about the database versions that Civo supports, with the ability to filter the results.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseVersion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDatabaseVersionFilter:getDatabaseVersionFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDatabaseVersionSort:getDatabaseVersionSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseVersion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDatabaseVersionFilter:getDatabaseVersionFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDatabaseVersionSort:getDatabaseVersionSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDatabaseVersionVersion:getDatabaseVersionVersion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "versions",
                    "id"
                ]
            }
        },
        "civo:index/getDiskImage:getDiskImage": {
            "description": "Get information on an disk image for use in other resources (e.g. creating a instance) with the ability to filter the results.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDiskImage.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageFilter:getDiskImageFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "If is used, all disk image will be from this region. Required if no region is set in provider.\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageSort:getDiskImageSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDiskImage.\n",
                "properties": {
                    "diskimages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageDiskimage:getDiskImageDiskimage"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageFilter:getDiskImageFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "If is used, all disk image will be from this region. Required if no region is set in provider.\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageSort:getDiskImageSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object",
                "required": [
                    "diskimages",
                    "id"
                ]
            }
        },
        "civo:index/getDnsDomainName:getDnsDomainName": {
            "description": "Get information on a domain. This data source provides the name and the id.\n\nAn error will be raised if the provided domain name is not in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst domain = civo.getDnsDomainName({\n    name: \"domain.com\",\n});\nexport const domainOutput = domain.then(domain =\u003e domain.name);\nexport const domainIdOutput = domain.then(domain =\u003e domain.id);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ndomain = civo.get_dns_domain_name(name=\"domain.com\")\npulumi.export(\"domainOutput\", domain.name)\npulumi.export(\"domainIdOutput\", domain.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var domain = Civo.GetDnsDomainName.Invoke(new()\n    {\n        Name = \"domain.com\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"domainOutput\"] = domain.Apply(getDnsDomainNameResult =\u003e getDnsDomainNameResult.Name),\n        [\"domainIdOutput\"] = domain.Apply(getDnsDomainNameResult =\u003e getDnsDomainNameResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdomain, err := civo.LookupDnsDomainName(ctx, \u0026civo.LookupDnsDomainNameArgs{\n\t\t\tName: pulumi.StringRef(\"domain.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"domainOutput\", domain.Name)\n\t\tctx.Export(\"domainIdOutput\", domain.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetDnsDomainNameArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var domain = CivoFunctions.getDnsDomainName(GetDnsDomainNameArgs.builder()\n            .name(\"domain.com\")\n            .build());\n\n        ctx.export(\"domainOutput\", domain.applyValue(getDnsDomainNameResult -\u003e getDnsDomainNameResult.name()));\n        ctx.export(\"domainIdOutput\", domain.applyValue(getDnsDomainNameResult -\u003e getDnsDomainNameResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  domain:\n    fn::invoke:\n      Function: civo:getDnsDomainName\n      Arguments:\n        name: domain.com\noutputs:\n  domainOutput: ${domain.name}\n  domainIdOutput: ${domain.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsDomainName.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the domain\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDnsDomainName.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the domain\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/getDnsDomainRecord:getDnsDomainRecord": {
            "description": "Get information on a DNS record. This data source provides the name, TTL, and zone file as configured on your Civo account.\n\nAn error will be raised if the provided domain name or record are not in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst domain = civo.getDnsDomainName({\n    name: \"domain.com\",\n});\nconst www = domain.then(domain =\u003e civo.getDnsDomainRecord({\n    domainId: domain.id,\n    name: \"www\",\n}));\nexport const recordType = www.then(www =\u003e www.type);\nexport const recordTtl = www.then(www =\u003e www.ttl);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ndomain = civo.get_dns_domain_name(name=\"domain.com\")\nwww = civo.get_dns_domain_record(domain_id=domain.id,\n    name=\"www\")\npulumi.export(\"recordType\", www.type)\npulumi.export(\"recordTtl\", www.ttl)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var domain = Civo.GetDnsDomainName.Invoke(new()\n    {\n        Name = \"domain.com\",\n    });\n\n    var www = Civo.GetDnsDomainRecord.Invoke(new()\n    {\n        DomainId = domain.Apply(getDnsDomainNameResult =\u003e getDnsDomainNameResult.Id),\n        Name = \"www\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"recordType\"] = www.Apply(getDnsDomainRecordResult =\u003e getDnsDomainRecordResult.Type),\n        [\"recordTtl\"] = www.Apply(getDnsDomainRecordResult =\u003e getDnsDomainRecordResult.Ttl),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdomain, err := civo.LookupDnsDomainName(ctx, \u0026civo.LookupDnsDomainNameArgs{\n\t\t\tName: pulumi.StringRef(\"domain.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twww, err := civo.LookupDnsDomainRecord(ctx, \u0026civo.LookupDnsDomainRecordArgs{\n\t\t\tDomainId: domain.Id,\n\t\t\tName:     \"www\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"recordType\", www.Type)\n\t\tctx.Export(\"recordTtl\", www.Ttl)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetDnsDomainNameArgs;\nimport com.pulumi.civo.inputs.GetDnsDomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var domain = CivoFunctions.getDnsDomainName(GetDnsDomainNameArgs.builder()\n            .name(\"domain.com\")\n            .build());\n\n        final var www = CivoFunctions.getDnsDomainRecord(GetDnsDomainRecordArgs.builder()\n            .domainId(domain.applyValue(getDnsDomainNameResult -\u003e getDnsDomainNameResult.id()))\n            .name(\"www\")\n            .build());\n\n        ctx.export(\"recordType\", www.applyValue(getDnsDomainRecordResult -\u003e getDnsDomainRecordResult.type()));\n        ctx.export(\"recordTtl\", www.applyValue(getDnsDomainRecordResult -\u003e getDnsDomainRecordResult.ttl()));\n    }\n}\n```\n```yaml\nvariables:\n  domain:\n    fn::invoke:\n      Function: civo:getDnsDomainName\n      Arguments:\n        name: domain.com\n  www:\n    fn::invoke:\n      Function: civo:getDnsDomainRecord\n      Arguments:\n        domainId: ${domain.id}\n        name: www\noutputs:\n  recordType: ${www.type}\n  recordTtl: ${www.ttl}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsDomainRecord.\n",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "The ID of the domain\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsDomainRecord.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The ID account of the domain\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date when it was created in UTC format\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "The ID of the domain\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "How long caching DNS servers should cache this record\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The choice of record type from A, CNAME, MX, SRV or TXT\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date when it was updated in UTC format\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createdAt",
                    "domainId",
                    "name",
                    "priority",
                    "ttl",
                    "type",
                    "updatedAt",
                    "value",
                    "id"
                ]
            }
        },
        "civo:index/getFirewall:getFirewall": {
            "description": "Retrieve information about a firewall for use in other resources.\n\nThis data source provides all of the firewall's properties as configured on your Civo account.\n\nFirewalls may be looked up by id or name, and you can optionally pass region if you want to make a lookup for a specific firewall inside that region.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst test = civo.getFirewall({\n    name: \"test-firewall\",\n    region: \"LON1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ntest = civo.get_firewall(name=\"test-firewall\",\n    region=\"LON1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Civo.GetFirewall.Invoke(new()\n    {\n        Name = \"test-firewall\",\n        Region = \"LON1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.LookupFirewall(ctx, \u0026civo.LookupFirewallArgs{\n\t\t\tName:   pulumi.StringRef(\"test-firewall\"),\n\t\t\tRegion: pulumi.StringRef(\"LON1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetFirewallArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = CivoFunctions.getFirewall(GetFirewallArgs.builder()\n            .name(\"test-firewall\")\n            .region(\"LON1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: civo:getFirewall\n      Arguments:\n        name: test-firewall\n        region: LON1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewall.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the firewall\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where the firewall is\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewall.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the firewall\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The id of the associated network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where the firewall is\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkId"
                ]
            }
        },
        "civo:index/getInstance:getInstance": {
            "description": "Get information on an instance for use in other resources. This data source provides all of the instance's properties as configured on your Civo account.\n\nNote: This data source returns a single instance. When specifying a hostname, an error will be raised if more than one instances found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst myhostaname = civo.getInstance({\n    hostname: \"myhostname.com\",\n});\nexport const instanceOutput = myhostaname.then(myhostaname =\u003e myhostaname.publicIp);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmyhostaname = civo.get_instance(hostname=\"myhostname.com\")\npulumi.export(\"instanceOutput\", myhostaname.public_ip)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myhostaname = Civo.GetInstance.Invoke(new()\n    {\n        Hostname = \"myhostname.com\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceOutput\"] = myhostaname.Apply(getInstanceResult =\u003e getInstanceResult.PublicIp),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyhostaname, err := civo.LookupInstance(ctx, \u0026civo.LookupInstanceArgs{\n\t\t\tHostname: pulumi.StringRef(\"myhostname.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"instanceOutput\", myhostaname.PublicIp)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myhostaname = CivoFunctions.getInstance(GetInstanceArgs.builder()\n            .hostname(\"myhostname.com\")\n            .build());\n\n        ctx.export(\"instanceOutput\", myhostaname.applyValue(getInstanceResult -\u003e getInstanceResult.publicIp()));\n    }\n}\n```\n```yaml\nvariables:\n  myhostaname:\n    fn::invoke:\n      Function: civo:getInstance\n      Arguments:\n        hostname: myhostname.com\noutputs:\n  instanceOutput: ${myhostaname.publicIp}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the Instance\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Instance\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "cpuCores": {
                        "type": "integer",
                        "description": "Total cpu of the instance\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date of creation of the instance\n"
                    },
                    "diskGb": {
                        "type": "integer",
                        "description": "The size of the disk\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The ID of the firewall used\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the Instance\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "initialPassword": {
                        "type": "string",
                        "description": "Instance initial password\n"
                    },
                    "initialUser": {
                        "type": "string",
                        "description": "The name of the initial user created on the server\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "his will be the ID of the network\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "The notes of the instance\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The private IP\n"
                    },
                    "pseudoIp": {
                        "type": "string",
                        "description": "Is the ip that is used to route the public ip from the internet to the instance using NAT\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP\n"
                    },
                    "ramMb": {
                        "type": "integer",
                        "description": "Total ram of the instance\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Instance\n"
                    },
                    "reverseDns": {
                        "type": "string",
                        "description": "A fully qualified domain name\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The contents of a script uploaded\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The name of the size\n"
                    },
                    "sshkeyId": {
                        "type": "string",
                        "description": "The ID SSH key\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the instance\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of tags\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The ID for the disk image/template to used to build the instance\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpuCores",
                    "createdAt",
                    "diskGb",
                    "firewallId",
                    "initialPassword",
                    "initialUser",
                    "networkId",
                    "notes",
                    "privateIp",
                    "pseudoIp",
                    "publicIp",
                    "ramMb",
                    "reverseDns",
                    "script",
                    "size",
                    "sshkeyId",
                    "status",
                    "tags",
                    "template"
                ]
            }
        },
        "civo:index/getInstances:getInstances": {
            "description": "Get information on instances for use in other resources, with the ability to filter and sort the results. If no filters are specified, all instances will be returned.\n\nNote: You can use the `civo.Instance` data source to obtain metadata about a single instance if you already know the id, unique hostname, or unique tag to retrieve.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst small-size = civo.getInstances({\n    region: \"LON1\",\n    filters: [{\n        key: \"size\",\n        values: [g3.small],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nsmall_size = civo.get_instances(region=\"LON1\",\n    filters=[civo.GetInstancesFilterArgs(\n        key=\"size\",\n        values=[g3[\"small\"]],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var small_size = Civo.GetInstances.Invoke(new()\n    {\n        Region = \"LON1\",\n        Filters = new[]\n        {\n            new Civo.Inputs.GetInstancesFilterInputArgs\n            {\n                Key = \"size\",\n                Values = new[]\n                {\n                    g3.Small,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := civo.GetInstances(ctx, \u0026civo.GetInstancesArgs{\nRegion: pulumi.StringRef(\"LON1\"),\nFilters: []civo.GetInstancesFilter{\n{\nKey: \"size\",\nValues: interface{}{\ng3.Small,\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetInstancesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var small-size = CivoFunctions.getInstances(GetInstancesArgs.builder()\n            .region(\"LON1\")\n            .filters(GetInstancesFilterArgs.builder()\n                .key(\"size\")\n                .values(g3.small())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  small-size:\n    fn::invoke:\n      Function: civo:getInstances\n      Arguments:\n        region: LON1\n        filters:\n          - key: size\n            values:\n              - ${g3.small}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesFilter:getInstancesFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSort:getInstancesSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesFilter:getInstancesFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesInstance:getInstancesInstance"
                        }
                    },
                    "region": {
                        "type": "string",
                        "description": "If used, all instances will be from the provided region\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSort:getInstancesSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "id"
                ]
            }
        },
        "civo:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Provides a Civo Kubernetes cluster data source.\n\nNote: This data source returns a single Kubernetes cluster. When specifying a name, an error will be raised if more than one Kubernetes cluster found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst my-cluster = civo.getKubernetesCluster({\n    name: \"my-super-cluster\",\n});\nexport const kubernetesClusterOutput = my_cluster.then(my_cluster =\u003e my_cluster.masterIp);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmy_cluster = civo.get_kubernetes_cluster(name=\"my-super-cluster\")\npulumi.export(\"kubernetesClusterOutput\", my_cluster.master_ip)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_cluster = Civo.GetKubernetesCluster.Invoke(new()\n    {\n        Name = \"my-super-cluster\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"kubernetesClusterOutput\"] = my_cluster.Apply(my_cluster =\u003e my_cluster.Apply(getKubernetesClusterResult =\u003e getKubernetesClusterResult.MasterIp)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_cluster, err := civo.LookupKubernetesCluster(ctx, \u0026civo.LookupKubernetesClusterArgs{\n\t\t\tName: pulumi.StringRef(\"my-super-cluster\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"kubernetesClusterOutput\", my_cluster.MasterIp)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetKubernetesClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-cluster = CivoFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()\n            .name(\"my-super-cluster\")\n            .build());\n\n        ctx.export(\"kubernetesClusterOutput\", my_cluster.masterIp());\n    }\n}\n```\n```yaml\nvariables:\n  my-cluster:\n    fn::invoke:\n      Function: civo:getKubernetesCluster\n      Arguments:\n        name: my-super-cluster\noutputs:\n  kubernetesClusterOutput: ${[\"my-cluster\"].masterIp}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Kubernetes Cluster\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where cluster is running\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "apiEndpoint": {
                        "type": "string",
                        "description": "The base URL of the API server on the Kubernetes master node\n"
                    },
                    "applications": {
                        "type": "string",
                        "description": "A list of application installed\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The cni for the k3s to install (the default is `flannel`) valid options are `cilium` or `flannel`\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date where the Kubernetes cluster was create\n"
                    },
                    "dnsEntry": {
                        "type": "string",
                        "description": "The unique dns entry for the cluster in this case point to the master\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "installedApplications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesClusterInstalledApplication:getKubernetesClusterInstalledApplication"
                        }
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "A representation of the Kubernetes cluster's kubeconfig in yaml format\n"
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The version of Kubernetes\n"
                    },
                    "masterIp": {
                        "type": "string",
                        "description": "The IP of the Kubernetes master node\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Kubernetes Cluster\n"
                    },
                    "numTargetNodes": {
                        "type": "integer",
                        "description": "The size of the Kubernetes cluster\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesClusterPool:getKubernetesClusterPool"
                        }
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "If the Kubernetes cluster is ready\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where cluster is running\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of Kubernetes cluster\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags\n"
                    },
                    "targetNodesSize": {
                        "type": "string",
                        "description": "The size of each node\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future version of the provider"
                    }
                },
                "type": "object",
                "required": [
                    "apiEndpoint",
                    "applications",
                    "cni",
                    "createdAt",
                    "dnsEntry",
                    "installedApplications",
                    "kubeconfig",
                    "kubernetesVersion",
                    "masterIp",
                    "numTargetNodes",
                    "pools",
                    "ready",
                    "status",
                    "tags",
                    "targetNodesSize"
                ]
            }
        },
        "civo:index/getKubernetesVersion:getKubernetesVersion": {
            "description": "Provides access to the available Civo Kubernetes versions, with the ability to filter the results.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst talos = civo.getKubernetesVersion({\n    filters: [{\n        key: \"type\",\n        values: [\"talos\"],\n    }],\n});\nconst k3s = civo.getKubernetesVersion({\n    filters: [{\n        key: \"type\",\n        values: [\"k3s\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ntalos = civo.get_kubernetes_version(filters=[civo.GetKubernetesVersionFilterArgs(\n    key=\"type\",\n    values=[\"talos\"],\n)])\nk3s = civo.get_kubernetes_version(filters=[civo.GetKubernetesVersionFilterArgs(\n    key=\"type\",\n    values=[\"k3s\"],\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var talos = Civo.GetKubernetesVersion.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Civo.Inputs.GetKubernetesVersionFilterInputArgs\n            {\n                Key = \"type\",\n                Values = new[]\n                {\n                    \"talos\",\n                },\n            },\n        },\n    });\n\n    var k3s = Civo.GetKubernetesVersion.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Civo.Inputs.GetKubernetesVersionFilterInputArgs\n            {\n                Key = \"type\",\n                Values = new[]\n                {\n                    \"k3s\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.GetKubernetesVersion(ctx, \u0026civo.GetKubernetesVersionArgs{\n\t\t\tFilters: []civo.GetKubernetesVersionFilter{\n\t\t\t\t{\n\t\t\t\t\tKey: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"talos\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = civo.GetKubernetesVersion(ctx, \u0026civo.GetKubernetesVersionArgs{\n\t\t\tFilters: []civo.GetKubernetesVersionFilter{\n\t\t\t\t{\n\t\t\t\t\tKey: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"k3s\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetKubernetesVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var talos = CivoFunctions.getKubernetesVersion(GetKubernetesVersionArgs.builder()\n            .filters(GetKubernetesVersionFilterArgs.builder()\n                .key(\"type\")\n                .values(\"talos\")\n                .build())\n            .build());\n\n        final var k3s = CivoFunctions.getKubernetesVersion(GetKubernetesVersionArgs.builder()\n            .filters(GetKubernetesVersionFilterArgs.builder()\n                .key(\"type\")\n                .values(\"k3s\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  talos:\n    fn::invoke:\n      Function: civo:getKubernetesVersion\n      Arguments:\n        filters:\n          - key: type\n            values:\n              - talos\n  k3s:\n    fn::invoke:\n      Function: civo:getKubernetesVersion\n      Arguments:\n        filters:\n          - key: type\n            values:\n              - k3s\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesVersion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionFilter:getKubernetesVersionFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionSort:getKubernetesVersionSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesVersion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionFilter:getKubernetesVersionFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionSort:getKubernetesVersionSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionVersion:getKubernetesVersionVersion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "versions",
                    "id"
                ]
            }
        },
        "civo:index/getLoadBalancer:getLoadBalancer": {
            "description": "Get information on a load balancer for use in other resources. This data source provides all of the load balancers properties as configured on your Civo account.\n\nAn error will be raised if the provided load balancer name does not exist in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst my-lb = civo.getLoadBalancer({\n    name: \"lb-name\",\n    region: \"LON1\",\n});\nexport const civoLoadbalancerOutput = my_lb.then(my_lb =\u003e my_lb.publicIp);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmy_lb = civo.get_load_balancer(name=\"lb-name\",\n    region=\"LON1\")\npulumi.export(\"civoLoadbalancerOutput\", my_lb.public_ip)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_lb = Civo.GetLoadBalancer.Invoke(new()\n    {\n        Name = \"lb-name\",\n        Region = \"LON1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"civoLoadbalancerOutput\"] = my_lb.Apply(my_lb =\u003e my_lb.Apply(getLoadBalancerResult =\u003e getLoadBalancerResult.PublicIp)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_lb, err := civo.GetLoadBalancer(ctx, \u0026civo.GetLoadBalancerArgs{\n\t\t\tName:   pulumi.StringRef(\"lb-name\"),\n\t\t\tRegion: pulumi.StringRef(\"LON1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"civoLoadbalancerOutput\", my_lb.PublicIp)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetLoadBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-lb = CivoFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()\n            .name(\"lb-name\")\n            .region(\"LON1\")\n            .build());\n\n        ctx.export(\"civoLoadbalancerOutput\", my_lb.publicIp());\n    }\n}\n```\n```yaml\nvariables:\n  my-lb:\n    fn::invoke:\n      Function: civo:getLoadBalancer\n      Arguments:\n        name: lb-name\n        region: LON1\noutputs:\n  civoLoadbalancerOutput: ${[\"my-lb\"].publicIp}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancer.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the load balancer to retrieve (You can find this id from service annotations 'kubernetes.civo.com/loadbalancer-id')\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load balancer (You can find this name from service annotations 'kubernetes.civo.com/loadbalancer-name')\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the load balancer, if you declare this field, the datasource will use this value instead of the one defined in the provider\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancer.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm used by the load balancer\n"
                    },
                    "backends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getLoadBalancerBackend:getLoadBalancerBackend"
                        }
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the load balancer\n"
                    },
                    "enableProxyProtocol": {
                        "type": "string",
                        "description": "The enabled proxy protocol of the load balancer\n"
                    },
                    "externalTrafficPolicy": {
                        "type": "string",
                        "description": "The external traffic policy of the load balancer\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The firewall id of the load balancer\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the load balancer to retrieve (You can find this id from service annotations 'kubernetes.civo.com/loadbalancer-id')\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load balancer (You can find this name from service annotations 'kubernetes.civo.com/loadbalancer-name')\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The private ip of the load balancer\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public ip of the load balancer\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the load balancer, if you declare this field, the datasource will use this value instead of the one defined in the provider\n"
                    },
                    "sessionAffinity": {
                        "type": "string",
                        "description": "The session affinity of the load balancer\n"
                    },
                    "sessionAffinityConfigTimeout": {
                        "type": "integer",
                        "description": "The session affinity config timeout of the load balancer\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the load balancer\n"
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "backends",
                    "clusterId",
                    "enableProxyProtocol",
                    "externalTrafficPolicy",
                    "firewallId",
                    "privateIp",
                    "publicIp",
                    "sessionAffinity",
                    "sessionAffinityConfigTimeout",
                    "state"
                ]
            }
        },
        "civo:index/getNetwork:getNetwork": {
            "description": "Retrieve information about a network for use in other resources.\n\nThis data source provides all of the network's properties as configured on your Civo account.\n\nNetworks may be looked up by id or label, and you can optionally pass region if you want to make a lookup for a specific network inside that region.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst test = civo.getNetwork({\n    label: \"test-network\",\n    region: \"LON1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ntest = civo.get_network(label=\"test-network\",\n    region=\"LON1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Civo.GetNetwork.Invoke(new()\n    {\n        Label = \"test-network\",\n        Region = \"LON1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.LookupNetwork(ctx, \u0026civo.LookupNetworkArgs{\n\t\t\tLabel:  pulumi.StringRef(\"test-network\"),\n\t\t\tRegion: pulumi.StringRef(\"LON1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = CivoFunctions.getNetwork(GetNetworkArgs.builder()\n            .label(\"test-network\")\n            .region(\"LON1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: civo:getNetwork\n      Arguments:\n        label: test-network\n        region: LON1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of an existing network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing network\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "If is the default network\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of an existing network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing network\n"
                    }
                },
                "type": "object",
                "required": [
                    "default",
                    "name"
                ]
            }
        },
        "civo:index/getObjectStore:getObjectStore": {
            "description": "Get information of an Object Store for use in other resources. This data source provides all of the Object Store's properties as configured on your Civo account.\n\nNote: This data source returns a single Object Store. When specifying a name, an error will be raised if more than one Object Stores with the same name found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst backup = civo.getObjectStore({\n    name: \"backup-server\",\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nbackup = civo.get_object_store(name=\"backup-server\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backup = Civo.GetObjectStore.Invoke(new()\n    {\n        Name = \"backup-server\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.LookupObjectStore(ctx, \u0026civo.LookupObjectStoreArgs{\n\t\t\tName: pulumi.StringRef(\"backup-server\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetObjectStoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var backup = CivoFunctions.getObjectStore(GetObjectStoreArgs.builder()\n            .name(\"backup-server\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  backup:\n    fn::invoke:\n      Function: civo:getObjectStore\n      Arguments:\n        name: backup-server\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectStore.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Object Store\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Object Store\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Object Store\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectStore.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The access key ID from the Object Store credential. If this is not set, a new credential will be created.\n"
                    },
                    "bucketUrl": {
                        "type": "string",
                        "description": "The endpoint of the Object Store\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Object Store\n"
                    },
                    "maxSizeGb": {
                        "type": "integer",
                        "description": "The maximum size of the Object Store\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Object Store\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Object Store\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Object Store\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessKeyId",
                    "bucketUrl",
                    "maxSizeGb",
                    "status"
                ]
            }
        },
        "civo:index/getObjectStoreCredential:getObjectStoreCredential": {
            "description": "Get information of an Object Store Credential for use in other resources. This data source provides all of the Object Store Credential's properties as configured on your Civo account.\n\nNote: This data source returns a single Object Store Credential. When specifying a name, an error will be raised if more than one Object Store Credentials with the same name found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst backupObjectStoreCredential = civo.getObjectStoreCredential({\n    name: \"backup-server\",\n});\n// Use the credential to create a bucket\nconst backupObjectStore = new civo.ObjectStore(\"backupObjectStore\", {\n    maxSizeGb: 500,\n    region: \"LON1\",\n    accessKeyId: backupObjectStoreCredential.then(backupObjectStoreCredential =\u003e backupObjectStoreCredential.accessKeyId),\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nbackup_object_store_credential = civo.get_object_store_credential(name=\"backup-server\")\n# Use the credential to create a bucket\nbackup_object_store = civo.ObjectStore(\"backupObjectStore\",\n    max_size_gb=500,\n    region=\"LON1\",\n    access_key_id=backup_object_store_credential.access_key_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backupObjectStoreCredential = Civo.GetObjectStoreCredential.Invoke(new()\n    {\n        Name = \"backup-server\",\n    });\n\n    // Use the credential to create a bucket\n    var backupObjectStore = new Civo.ObjectStore(\"backupObjectStore\", new()\n    {\n        MaxSizeGb = 500,\n        Region = \"LON1\",\n        AccessKeyId = backupObjectStoreCredential.Apply(getObjectStoreCredentialResult =\u003e getObjectStoreCredentialResult.AccessKeyId),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbackupObjectStoreCredential, err := civo.LookupObjectStoreCredential(ctx, \u0026civo.LookupObjectStoreCredentialArgs{\n\t\t\tName: pulumi.StringRef(\"backup-server\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the credential to create a bucket\n\t\t_, err = civo.NewObjectStore(ctx, \"backupObjectStore\", \u0026civo.ObjectStoreArgs{\n\t\t\tMaxSizeGb:   pulumi.Int(500),\n\t\t\tRegion:      pulumi.String(\"LON1\"),\n\t\t\tAccessKeyId: *pulumi.String(backupObjectStoreCredential.AccessKeyId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetObjectStoreCredentialArgs;\nimport com.pulumi.civo.ObjectStore;\nimport com.pulumi.civo.ObjectStoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var backupObjectStoreCredential = CivoFunctions.getObjectStoreCredential(GetObjectStoreCredentialArgs.builder()\n            .name(\"backup-server\")\n            .build());\n\n        var backupObjectStore = new ObjectStore(\"backupObjectStore\", ObjectStoreArgs.builder()        \n            .maxSizeGb(500)\n            .region(\"LON1\")\n            .accessKeyId(backupObjectStoreCredential.applyValue(getObjectStoreCredentialResult -\u003e getObjectStoreCredentialResult.accessKeyId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Use the credential to create a bucket\n  backupObjectStore:\n    type: civo:ObjectStore\n    properties:\n      maxSizeGb: 500\n      region: LON1\n      accessKeyId: ${backupObjectStoreCredential.accessKeyId}\nvariables:\n  backupObjectStoreCredential:\n    fn::invoke:\n      Function: civo:getObjectStoreCredential\n      Arguments:\n        name: backup-server\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectStoreCredential.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Object Store Credential\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Object Store Credential\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Object Store\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectStoreCredential.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The access key id of the Object Store Credential\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Object Store Credential\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Object Store Credential\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of an existing Object Store\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The secret access key of the Object Store Credential\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Object Store Credential\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessKeyId",
                    "secretAccessKey",
                    "status"
                ]
            }
        },
        "civo:index/getRegion:getRegion": {
            "description": "Retrieves information about the region that Civo supports, with the ability to filter the results.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionFilter:getRegionFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionSort:getRegionSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionFilter:getRegionFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionRegion:getRegionRegion"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionSort:getRegionSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "id"
                ]
            }
        },
        "civo:index/getReservedIp:getReservedIp": {
            "inputs": {
                "description": "A collection of arguments for invoking getReservedIp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID for the ip address\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the ip address\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReservedIp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID for the ip address\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance the IP is attached to\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the instance the IP is attached to\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IP Address requested\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the ip address\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region the ip address is in\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "instanceName",
                    "ip",
                    "region"
                ]
            }
        },
        "civo:index/getSize:getSize": {
            "description": "Retrieves information about the sizes that Civo supports, with the ability to filter the results.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSize.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getSizeFilter:getSizeFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getSizeSort:getSizeSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSize.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getSizeFilter:getSizeFilter"
                        },
                        "description": "One or more key/value pairs on which to filter results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sizes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getSizeSize:getSizeSize"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getSizeSort:getSizeSort"
                        },
                        "description": "One or more key/direction pairs on which to sort results\n"
                    }
                },
                "type": "object",
                "required": [
                    "sizes",
                    "id"
                ]
            }
        },
        "civo:index/getSshKey:getSshKey": {
            "description": "Get information on a SSH key. This data source provides the name, and fingerprint as configured on your Civo account.\n\nAn error will be raised if the provided SSH key name does not exist in your Civo account.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the public key of the SSH key\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key\n"
                    }
                },
                "type": "object",
                "required": [
                    "fingerprint"
                ]
            }
        },
        "civo:index/getVolume:getVolume": {
            "description": "Get information on a volume for use in other resources. This data source provides all of the volumes properties as configured on your Civo account.\n\nAn error will be raised if the provided volume name does not exist in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst myvolume = civo.getVolume({\n    name: \"test-volume-name\",\n});\nexport const volumeOutput = myvolume;\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmyvolume = civo.get_volume(name=\"test-volume-name\")\npulumi.export(\"volumeOutput\", myvolume)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myvolume = Civo.GetVolume.Invoke(new()\n    {\n        Name = \"test-volume-name\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"volumeOutput\"] = myvolume,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyvolume, err := civo.LookupVolume(ctx, \u0026civo.LookupVolumeArgs{\n\t\t\tName: pulumi.StringRef(\"test-volume-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"volumeOutput\", myvolume)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.civo.CivoFunctions;\nimport com.pulumi.civo.inputs.GetVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myvolume = CivoFunctions.getVolume(GetVolumeArgs.builder()\n            .name(\"test-volume-name\")\n            .build());\n\n        ctx.export(\"volumeOutput\", myvolume.applyValue(getVolumeResult -\u003e getVolumeResult));\n    }\n}\n```\n```yaml\nvariables:\n  myvolume:\n    fn::invoke:\n      Function: civo:getVolume\n      Arguments:\n        name: test-volume-name\noutputs:\n  volumeOutput: ${myvolume}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where volume is running\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date of the creation of the volume\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "mountPoint": {
                        "type": "string",
                        "description": "The mount point of the volume\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where volume is running\n"
                    },
                    "sizeGb": {
                        "type": "integer",
                        "description": "The size of the volume (in GB)\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "mountPoint",
                    "sizeGb"
                ]
            }
        }
    }
}