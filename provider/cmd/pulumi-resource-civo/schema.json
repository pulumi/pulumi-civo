{
    "name": "civo",
    "description": "A Pulumi package for creating and managing Civo cloud resources.",
    "keywords": [
        "pulumi",
        "civo"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`civo` Terraform Provider](https://github.com/civo/terraform-provider-civo).",
    "repository": "https://github.com/pulumi/pulumi-civo",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "region": {
                "type": "string",
                "description": "If region is not set, then no region will be used and them you need expensify in every resource even if you expensify\nhere you can overwrite in a resource.\n"
            },
            "token": {
                "type": "string",
                "description": "This is the Civo API token. Alternatively, this can also be specified using `CIVO_TOKEN` environment variable.\n"
            }
        }
    },
    "types": {
        "civo:index/KubernetesClusterInstalledApplication:KubernetesClusterInstalledApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "category": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "installed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "application",
                        "category",
                        "installed",
                        "version"
                    ]
                }
            }
        },
        "civo:index/KubernetesClusterInstance:KubernetesClusterInstance": {
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ramMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpuCores",
                        "diskGb",
                        "hostname",
                        "ramMb",
                        "size",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "civo:index/KubernetesClusterPool:KubernetesClusterPool": {
            "properties": {
                "count": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesClusterPoolInstance:KubernetesClusterPoolInstance"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "instanceNames",
                        "instances",
                        "size"
                    ]
                }
            }
        },
        "civo:index/KubernetesClusterPoolInstance:KubernetesClusterPoolInstance": {
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ramMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpuCores",
                        "diskGb",
                        "hostname",
                        "ramMb",
                        "size",
                        "status",
                        "tags"
                    ]
                }
            }
        },
        "civo:index/getDiskImageDiskimage:getDiskImageDiskimage": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getDiskImageFilter:getDiskImageFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getDiskImageSort:getDiskImageSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getInstancesFilter:getInstancesFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getInstancesInstance:getInstancesInstance": {
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firewallId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialUser": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pseudoIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ramMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverseDns": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "script": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshkeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuCores",
                "createdAt",
                "diskGb",
                "firewallId",
                "hostname",
                "id",
                "initialPassword",
                "initialUser",
                "networkId",
                "notes",
                "privateIp",
                "pseudoIp",
                "publicIp",
                "ramMb",
                "region",
                "reverseDns",
                "script",
                "size",
                "sshkeyId",
                "status",
                "tags",
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getInstancesSizeFilter:getInstancesSizeFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getInstancesSizeSize:getInstancesSizeSize": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disk": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ram": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selectable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "disk",
                "name",
                "ram",
                "selectable",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getInstancesSizeSort:getInstancesSizeSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getInstancesSort:getInstancesSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getKubernetesClusterInstalledApplication:getKubernetesClusterInstalledApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "category": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "installed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "application",
                "category",
                "installed",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getKubernetesClusterInstance:getKubernetesClusterInstance": {
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ramMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuCores",
                "diskGb",
                "hostname",
                "ramMb",
                "size",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getKubernetesClusterPool:getKubernetesClusterPool": {
            "properties": {
                "count": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/getKubernetesClusterPoolInstance:getKubernetesClusterPoolInstance"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "count",
                "id",
                "instanceNames",
                "instances",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getKubernetesClusterPoolInstance:getKubernetesClusterPoolInstance": {
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ramMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuCores",
                "diskGb",
                "hostname",
                "ramMb",
                "size",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getKubernetesVersionFilter:getKubernetesVersionFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getKubernetesVersionSort:getKubernetesVersionSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getKubernetesVersionVersion:getKubernetesVersionVersion": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "label",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getRegionFilter:getRegionFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getRegionRegion:getRegionRegion": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "default": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "country",
                "default",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "civo:index/getRegionSort:getRegionSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getTemplateFilter:getTemplateFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "civo:index/getTemplateSort:getTemplateSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "civo:index/getTemplateTemplate:getTemplateTemplate": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the civo package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "region": {
                "type": "string",
                "description": "If region is not set, then no region will be used and them you need expensify in every resource even if you expensify\nhere you can overwrite in a resource.\n"
            },
            "token": {
                "type": "string",
                "description": "This is the Civo API token. Alternatively, this can also be specified using `CIVO_TOKEN` environment variable.\n"
            }
        }
    },
    "resources": {
        "civo:index/dnsDomainName:DnsDomainName": {
            "description": "Provides a Civo DNS domain name resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\n// Create a new domain name\nconst main = new civo.DnsDomainName(\"main\", {});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\n# Create a new domain name\nmain = civo.DnsDomainName(\"main\")\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new domain name\n        var main = new Civo.DnsDomainName(\"main\", new Civo.DnsDomainNameArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.NewDnsDomainName(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **name** (String) The name of the domain\n\n### Optional\n\n- **id** (String) The ID of this resource.\n\n### Read-Only\n\n- **account_id** (String) The account ID of the domain\n\n\n## Import\n\nImport is supported using the following syntax# using domain name\n\n```sh\n $ pulumi import civo:index/dnsDomainName:DnsDomainName main mydomain.com\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the domain\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain\n"
                }
            },
            "required": [
                "accountId",
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the domain\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsDomainName resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the domain\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the domain\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/dnsDomainRecord:DnsDomainRecord": {
            "description": "Provides a Civo DNS domain record resource.\n\n## Schema\n\n### Required\n\n- **domain_id** (String) ID from domain name\n- **name** (String) The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an amex/root domain)\n- **ttl** (Number) How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified is 600)\n- **type** (String) The choice of RR type from a, cname, mx or txt\n- **value** (String) The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **priority** (Number) Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n\n### Read-Only\n\n- **account_id** (String) The account ID of this resource\n- **created_at** (String) Timestamp when this resource was created\n- **updated_at** (String) Timestamp when this resource was updated\n\n\n## Import\n\nImport is supported using the following syntax# using domain_id:domain_record_id\n\n```sh\n $ pulumi import civo:index/dnsDomainRecord:DnsDomainRecord www a3cd6832-9577-4017-afd7-17d239fc0bf0:c9a39d14-ee1b-4870-8fb0-a2d4f465e822\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of this resource\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp when this resource was created\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "ID from domain name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an\namex/root domain)\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified\nis 600)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The choice of RR type from a, cname, mx or txt\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp when this resource was updated\n"
                },
                "value": {
                    "type": "string",
                    "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                }
            },
            "required": [
                "accountId",
                "createdAt",
                "domainId",
                "name",
                "ttl",
                "type",
                "updatedAt",
                "value"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "string",
                    "description": "ID from domain name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an\namex/root domain)\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified\nis 600)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The choice of RR type from a, cname, mx or txt\n"
                },
                "value": {
                    "type": "string",
                    "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                }
            },
            "requiredInputs": [
                "domainId",
                "ttl",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsDomainRecord resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of this resource\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when this resource was created\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "ID from domain name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The portion before the domain name (e.g. www) or an @ for the apex/root domain (you cannot use an A record with an\namex/root domain)\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Useful for MX records only, the priority mail should be attempted it (defaults to 10)\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "How long caching DNS servers should cache this record for, in seconds (the minimum is 600 and the default if unspecified\nis 600)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The choice of RR type from a, cname, mx or txt\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp when this resource was updated\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/firewall:Firewall": {
            "description": "Provides a Civo firewall resource. This can be used to create, modify, and delete firewalls.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\n// Create a network\nconst customNet = new civo.Network(\"customNet\", {label: \"my-custom-network\"});\n// Create a firewall\nconst www = new civo.Firewall(\"www\", {networkId: customNet.id});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\n# Create a network\ncustom_net = civo.Network(\"customNet\", label=\"my-custom-network\")\n# Create a firewall\nwww = civo.Firewall(\"www\", network_id=custom_net.id)\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a network\n        var customNet = new Civo.Network(\"customNet\", new Civo.NetworkArgs\n        {\n            Label = \"my-custom-network\",\n        });\n        // Create a firewall\n        var www = new Civo.Firewall(\"www\", new Civo.FirewallArgs\n        {\n            NetworkId = customNet.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcustomNet, err := civo.NewNetwork(ctx, \"customNet\", \u0026civo.NetworkArgs{\n\t\t\tLabel: pulumi.String(\"my-custom-network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = civo.NewFirewall(ctx, \"www\", \u0026civo.FirewallArgs{\n\t\t\tNetworkId: customNet.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **name** (String) The firewall name\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **network_id** (String) The firewall network, if is not defined we use the default network\n- **region** (String) The firewall region, if is not defined we use the global defined in the provider\n\n\n## Import\n\nImport is supported using the following syntax# using ID\n\n```sh\n $ pulumi import civo:index/firewall:Firewall www b8ecd2ab-2267-4a5e-8692-cbf1d32583e3\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The firewall name\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The firewall network, if is not defined we use the default network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The firewall region, if is not defined we use the global defined in the provider\n"
                }
            },
            "required": [
                "name",
                "networkId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The firewall name\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The firewall network, if is not defined we use the default network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The firewall region, if is not defined we use the global defined in the provider\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The firewall name\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The firewall network, if is not defined we use the default network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The firewall region, if is not defined we use the global defined in the provider\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/firewallRule:FirewallRule": {
            "description": "Provides a Civo firewall rule resource. This can be used to create, modify, and delete firewalls rules. This resource don't have an update option because Civo backend doesn't support it at this moment. In that case, we use `ForceNew` for all object in the resource.\n\n## Schema\n\n### Required\n\n- **cidr** (Set of String) The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32 to open just for a specific IP address)\n- **firewall_id** (String) The Firewall ID\n\n### Optional\n\n- **direction** (String) Will this rule affect ingress traffic (only `ingress` is supported now)\n- **end_port** (String) The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n- **id** (String) The ID of this resource.\n- **label** (String) A string that will be the displayed name/reference for this rule\n- **protocol** (String) The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n- **region** (String) The region for this rule\n- **start_port** (String) The start of the port range to configure for this rule (or the single port if required)\n\n\n## Import\n\nImport is supported using the following syntax# using firewall_id:firewall_rule_id\n\n```sh\n $ pulumi import civo:index/firewallRule:FirewallRule http b8ecd2ab-2267-4a5e-8692-cbf1d32583e3:4b0022ee-00b2-4f81-a40d-b4f8728923a7\n```\n\n ",
            "properties": {
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32\nto open just for a specific IP address)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Will this rule affect ingress traffic (only `ingress` is supported now)\n"
                },
                "endPort": {
                    "type": "string",
                    "description": "The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The Firewall ID\n"
                },
                "label": {
                    "type": "string",
                    "description": "A string that will be the displayed name/reference for this rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for this rule\n"
                },
                "startPort": {
                    "type": "string",
                    "description": "The start of the port range to configure for this rule (or the single port if required)\n"
                }
            },
            "required": [
                "cidrs",
                "direction",
                "endPort",
                "firewallId",
                "label",
                "protocol",
                "region",
                "startPort"
            ],
            "inputProperties": {
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32\nto open just for a specific IP address)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Will this rule affect ingress traffic (only `ingress` is supported now)\n"
                },
                "endPort": {
                    "type": "string",
                    "description": "The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The Firewall ID\n"
                },
                "label": {
                    "type": "string",
                    "description": "A string that will be the displayed name/reference for this rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for this rule\n"
                },
                "startPort": {
                    "type": "string",
                    "description": "The start of the port range to configure for this rule (or the single port if required)\n"
                }
            },
            "requiredInputs": [
                "cidrs",
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallRule resources.\n",
                "properties": {
                    "cidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The CIDR notation of the other end to affect, or a valid network CIDR (e.g. 0.0.0.0/0 to open for everyone or 1.2.3.4/32\nto open just for a specific IP address)\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Will this rule affect ingress traffic (only `ingress` is supported now)\n"
                    },
                    "endPort": {
                        "type": "string",
                        "description": "The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The Firewall ID\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A string that will be the displayed name/reference for this rule\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol choice from `tcp`, `udp` or `icmp` (the default if unspecified is `tcp`)\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for this rule\n"
                    },
                    "startPort": {
                        "type": "string",
                        "description": "The start of the port range to configure for this rule (or the single port if required)\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/instance:Instance": {
            "description": "Provides a Civo instance resource. This can be used to create, modify, and delete instances.\n\n## Schema\n\n### Optional\n\n- **disk_image** (String) The ID for the disk image to use to build the instance\n- **firewall_id** (String) The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)\n- **hostname** (String) A fully qualified domain name that should be set as the instance's hostname\n- **id** (String) The ID of this resource.\n- **initial_user** (String) The name of the initial user created on the server (optional; this will default to the template's default_username and fallback to civo)\n- **network_id** (String) This must be the ID of the network from the network listing (optional; default network used when not specified)\n- **notes** (String) Add some notes to the instance\n- **public_ip_required** (String) This should be either 'none' or 'create' (default: 'create')\n- **region** (String) The region for the instance, if not declare we use the region in declared in the provider\n- **reverse_dns** (String) A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified)\n- **script** (String) The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization\n- **size** (String) The name of the size, from the current list, e.g. g3.xsmall\n- **sshkey_id** (String) The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initial_password field)\n- **tags** (Set of String) An optional list of tags, represented as a key, value pair\n- **template** (String, Deprecated) The ID for the template to use to build the instance\n\n### Read-Only\n\n- **cpu_cores** (Number) Instance's CPU cores\n- **created_at** (String) Timestamp when the instance was created\n- **disk_gb** (Number) Instance's disk (GB)\n- **initial_password** (String, Sensitive) Initial password for login\n- **private_ip** (String) Instance's private IP address\n- **public_ip** (String) Instance's public IP address\n- **ram_mb** (Number) Instance's RAM (MB)\n- **source_id** (String) Instance's source ID\n- **source_type** (String) Instance's source type\n- **status** (String) Instance's status\n\n\n## Import\n\nImport is supported using the following syntax# using ID\n\n```sh\n $ pulumi import civo:index/instance:Instance myintance 18bd98ad-1b6e-4f87-b48f-e690b4fd7413\n```\n\n ",
            "properties": {
                "cpuCores": {
                    "type": "integer",
                    "description": "Instance's CPU cores\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp when the instance was created\n"
                },
                "diskGb": {
                    "type": "integer",
                    "description": "Instance's disk (GB)\n"
                },
                "diskImage": {
                    "type": "string",
                    "description": "The ID for the disk image to use to build the instance\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open\nto all)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be set as the instance's hostname\n"
                },
                "initialPassword": {
                    "type": "string",
                    "description": "Initial password for login\n"
                },
                "initialUser": {
                    "type": "string",
                    "description": "The name of the initial user created on the server (optional; this will default to the template's default_username and\nfallback to civo)\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "This must be the ID of the network from the network listing (optional; default network used when not specified)\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Add some notes to the instance\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Instance's private IP address\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Instance's public IP address\n"
                },
                "publicIpRequired": {
                    "type": "string",
                    "description": "This should be either 'none' or 'create' (default: 'create')\n"
                },
                "ramMb": {
                    "type": "integer",
                    "description": "Instance's RAM (MB)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the instance, if not declare we use the region in declared in the provider\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if\nunspecified)\n"
                },
                "script": {
                    "type": "string",
                    "description": "The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance,\nread/write/executable only by root and then will be executed at the end of the cloud initialization\n"
                },
                "size": {
                    "type": "string",
                    "description": "The name of the size, from the current list, e.g. g3.xsmall\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "Instance's source ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "Instance's source type\n"
                },
                "sshkeyId": {
                    "type": "string",
                    "description": "The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a\nrandom password will be set and returned in the initial_password field)\n"
                },
                "status": {
                    "type": "string",
                    "description": "Instance's status\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of tags, represented as a key, value pair\n"
                },
                "template": {
                    "type": "string",
                    "description": "The ID for the template to use to build the instance\n",
                    "deprecationMessage": "\"template\" attribute is deprecated. Moving forward, please use \"disk_image\" attribute."
                }
            },
            "required": [
                "cpuCores",
                "createdAt",
                "diskGb",
                "diskImage",
                "firewallId",
                "hostname",
                "initialPassword",
                "networkId",
                "privateIp",
                "publicIp",
                "ramMb",
                "sourceId",
                "sourceType",
                "status",
                "template"
            ],
            "inputProperties": {
                "diskImage": {
                    "type": "string",
                    "description": "The ID for the disk image to use to build the instance\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open\nto all)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be set as the instance's hostname\n"
                },
                "initialUser": {
                    "type": "string",
                    "description": "The name of the initial user created on the server (optional; this will default to the template's default_username and\nfallback to civo)\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "This must be the ID of the network from the network listing (optional; default network used when not specified)\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Add some notes to the instance\n"
                },
                "publicIpRequired": {
                    "type": "string",
                    "description": "This should be either 'none' or 'create' (default: 'create')\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the instance, if not declare we use the region in declared in the provider\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if\nunspecified)\n"
                },
                "script": {
                    "type": "string",
                    "description": "The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance,\nread/write/executable only by root and then will be executed at the end of the cloud initialization\n"
                },
                "size": {
                    "type": "string",
                    "description": "The name of the size, from the current list, e.g. g3.xsmall\n"
                },
                "sshkeyId": {
                    "type": "string",
                    "description": "The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a\nrandom password will be set and returned in the initial_password field)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of tags, represented as a key, value pair\n"
                },
                "template": {
                    "type": "string",
                    "description": "The ID for the template to use to build the instance\n",
                    "deprecationMessage": "\"template\" attribute is deprecated. Moving forward, please use \"disk_image\" attribute."
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "cpuCores": {
                        "type": "integer",
                        "description": "Instance's CPU cores\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when the instance was created\n"
                    },
                    "diskGb": {
                        "type": "integer",
                        "description": "Instance's disk (GB)\n"
                    },
                    "diskImage": {
                        "type": "string",
                        "description": "The ID for the disk image to use to build the instance\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open\nto all)\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "A fully qualified domain name that should be set as the instance's hostname\n"
                    },
                    "initialPassword": {
                        "type": "string",
                        "description": "Initial password for login\n"
                    },
                    "initialUser": {
                        "type": "string",
                        "description": "The name of the initial user created on the server (optional; this will default to the template's default_username and\nfallback to civo)\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "This must be the ID of the network from the network listing (optional; default network used when not specified)\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Add some notes to the instance\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Instance's private IP address\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Instance's public IP address\n"
                    },
                    "publicIpRequired": {
                        "type": "string",
                        "description": "This should be either 'none' or 'create' (default: 'create')\n"
                    },
                    "ramMb": {
                        "type": "integer",
                        "description": "Instance's RAM (MB)\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the instance, if not declare we use the region in declared in the provider\n"
                    },
                    "reverseDns": {
                        "type": "string",
                        "description": "A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if\nunspecified)\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance,\nread/write/executable only by root and then will be executed at the end of the cloud initialization\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The name of the size, from the current list, e.g. g3.xsmall\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Instance's source ID\n"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "Instance's source type\n"
                    },
                    "sshkeyId": {
                        "type": "string",
                        "description": "The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a\nrandom password will be set and returned in the initial_password field)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Instance's status\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of tags, represented as a key, value pair\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The ID for the template to use to build the instance\n",
                        "deprecationMessage": "\"template\" attribute is deprecated. Moving forward, please use \"disk_image\" attribute."
                    }
                },
                "type": "object"
            }
        },
        "civo:index/kubernetesCluster:KubernetesCluster": {
            "description": "Provides a Civo Kubernetes cluster resource. This can be used to create, delete, and modify clusters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst xsmall = civo.getInstancesSize({\n    filters: [{\n        key: \"type\",\n        values: [\"kubernetes\"],\n    }],\n    sorts: [{\n        key: \"ram\",\n        direction: \"asc\",\n    }],\n});\n// Create a firewall\nconst my_firewall = new civo.Firewall(\"my-firewall\", {});\n// Create a firewall rule\nconst kubernetes = new civo.FirewallRule(\"kubernetes\", {\n    firewallId: my_firewall.id,\n    protocol: \"tcp\",\n    startPort: \"6443\",\n    endPort: \"6443\",\n    cidrs: [\"0.0.0.0/0\"],\n    direction: \"ingress\",\n    label: \"kubernetes-api-server\",\n});\n// Create a cluster\nconst my_cluster = new civo.KubernetesCluster(\"my-cluster\", {\n    applications: \"Portainer,Linkerd:Linkerd \u0026 Jaeger\",\n    numTargetNodes: 2,\n    targetNodesSize: xsmall.then(xsmall =\u003e xsmall.sizes)[0].then(sizes =\u003e sizes.name),\n    firewallId: my_firewall.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nxsmall = civo.get_instances_size(filters=[civo.GetInstancesSizeFilterArgs(\n        key=\"type\",\n        values=[\"kubernetes\"],\n    )],\n    sorts=[civo.GetInstancesSizeSortArgs(\n        key=\"ram\",\n        direction=\"asc\",\n    )])\n# Create a firewall\nmy_firewall = civo.Firewall(\"my-firewall\")\n# Create a firewall rule\nkubernetes = civo.FirewallRule(\"kubernetes\",\n    firewall_id=my_firewall.id,\n    protocol=\"tcp\",\n    start_port=\"6443\",\n    end_port=\"6443\",\n    cidrs=[\"0.0.0.0/0\"],\n    direction=\"ingress\",\n    label=\"kubernetes-api-server\")\n# Create a cluster\nmy_cluster = civo.KubernetesCluster(\"my-cluster\",\n    applications=\"Portainer,Linkerd:Linkerd \u0026 Jaeger\",\n    num_target_nodes=2,\n    target_nodes_size=xsmall.sizes[0].name,\n    firewall_id=my_firewall.id)\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var xsmall = Output.Create(Civo.GetInstancesSize.InvokeAsync(new Civo.GetInstancesSizeArgs\n        {\n            Filters = \n            {\n                new Civo.Inputs.GetInstancesSizeFilterArgs\n                {\n                    Key = \"type\",\n                    Values = \n                    {\n                        \"kubernetes\",\n                    },\n                },\n            },\n            Sorts = \n            {\n                new Civo.Inputs.GetInstancesSizeSortArgs\n                {\n                    Key = \"ram\",\n                    Direction = \"asc\",\n                },\n            },\n        }));\n        // Create a firewall\n        var my_firewall = new Civo.Firewall(\"my-firewall\", new Civo.FirewallArgs\n        {\n        });\n        // Create a firewall rule\n        var kubernetes = new Civo.FirewallRule(\"kubernetes\", new Civo.FirewallRuleArgs\n        {\n            FirewallId = my_firewall.Id,\n            Protocol = \"tcp\",\n            StartPort = \"6443\",\n            EndPort = \"6443\",\n            Cidrs = \n            {\n                \"0.0.0.0/0\",\n            },\n            Direction = \"ingress\",\n            Label = \"kubernetes-api-server\",\n        });\n        // Create a cluster\n        var my_cluster = new Civo.KubernetesCluster(\"my-cluster\", new Civo.KubernetesClusterArgs\n        {\n            Applications = \"Portainer,Linkerd:Linkerd \u0026 Jaeger\",\n            NumTargetNodes = 2,\n            TargetNodesSize = xsmall.Apply(xsmall =\u003e xsmall.Sizes)[0].Apply(sizes =\u003e sizes.Name),\n            FirewallId = my_firewall.Id,\n        });\n    }\n\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **firewall_id** (String) The existing firewall ID to use for this cluster\n\n### Optional\n\n- **applications** (String) Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo kubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik. For application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or 'MariaDB:5GB'.\n- **id** (String) The ID of this resource.\n- **kubernetes_version** (String) The version of k3s to install (optional, the default is currently the latest available)\n- **name** (String) Name for your cluster, must be unique within your account\n- **network_id** (String) The network for the cluster, if not declare we use the default one\n- **num_target_nodes** (Number) The number of instances to create (optional, the default at the time of writing is 3)\n- **region** (String) The region for the cluster, if not declare we use the region in declared in the provider\n- **tags** (String) Space separated list of tags, to be used freely as required\n- **target_nodes_size** (String) The size of each node (optional, the default is currently g3.k3s.medium)\n\n### Read-Only\n\n- **api_endpoint** (String) The API server endpoint of the cluster\n- **created_at** (String) The timestamp when the cluster was created\n- **dns_entry** (String) The DNS name of the cluster\n- **installed_applications** (List of Object) (see below for nested schema)\n- **instances** (List of Object) (see below for nested schema)\n- **kubeconfig** (String, Sensitive) The kubeconfig of the cluster\n- **master_ip** (String) The IP address of the master node\n- **pools** (List of Object) (see below for nested schema)\n- **ready** (Boolean) When cluster is ready, this will return `true`\n- **status** (String) Status of the cluster\n\n\u003ca id=\"nestedatt--installed_applications\"\u003e\u003c/a\u003e\n### Nested Schema for `installed_applications`\n\nRead-Only:\n\n- **application** (String)\n- **category** (String)\n- **installed** (Boolean)\n- **version** (String)\n\n\n\u003ca id=\"nestedatt--instances\"\u003e\u003c/a\u003e\n### Nested Schema for `instances`\n\nRead-Only:\n\n- **cpu_cores** (Number)\n- **disk_gb** (Number)\n- **hostname** (String)\n- **ram_mb** (Number)\n- **size** (String)\n- **status** (String)\n- **tags** (Set of String)\n\n\n\u003ca id=\"nestedatt--pools\"\u003e\u003c/a\u003e\n### Nested Schema for `pools`\n\nRead-Only:\n\n- **count** (Number)\n- **instance_names** (Set of String)\n- **instances** (List of Object) (see below for nested schema)\n- **size** (String)\n\n\u003ca id=\"nestedobjatt--pools--instances\"\u003e\u003c/a\u003e\n### Nested Schema for `pools.instances`\n\nRead-Only:\n\n- **cpu_cores** (Number)\n- **disk_gb** (Number)\n- **hostname** (String)\n- **ram_mb** (Number)\n- **size** (String)\n- **status** (String)\n- **tags** (Set of String)\n\n\n## Import\n\nImport is supported using the following syntax# using ID\n\n```sh\n $ pulumi import civo:index/kubernetesCluster:KubernetesCluster my-cluster 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af\n```\n\n ",
            "properties": {
                "apiEndpoint": {
                    "type": "string",
                    "description": "The API server endpoint of the cluster\n"
                },
                "applications": {
                    "type": "string",
                    "description": "Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side\nof the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo\nkubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.\nFor application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or\n'MariaDB:5GB'.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The timestamp when the cluster was created\n"
                },
                "dnsEntry": {
                    "type": "string",
                    "description": "The DNS name of the cluster\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The existing firewall ID to use for this cluster\n"
                },
                "installedApplications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesClusterInstalledApplication:KubernetesClusterInstalledApplication"
                    }
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesClusterInstance:KubernetesClusterInstance"
                    }
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "The kubeconfig of the cluster\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of k3s to install (optional, the default is currently the latest available)\n"
                },
                "masterIp": {
                    "type": "string",
                    "description": "The IP address of the master node\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for your cluster, must be unique within your account\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network for the cluster, if not declare we use the default one\n"
                },
                "numTargetNodes": {
                    "type": "integer",
                    "description": "The number of instances to create (optional, the default at the time of writing is 3)\n"
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/civo:index/KubernetesClusterPool:KubernetesClusterPool"
                    }
                },
                "ready": {
                    "type": "boolean",
                    "description": "When cluster is ready, this will return `true`\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the cluster, if not declare we use the region in declared in the provider\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Space separated list of tags, to be used freely as required\n"
                },
                "targetNodesSize": {
                    "type": "string",
                    "description": "The size of each node (optional, the default is currently g3.k3s.medium)\n"
                }
            },
            "required": [
                "apiEndpoint",
                "createdAt",
                "dnsEntry",
                "firewallId",
                "installedApplications",
                "instances",
                "kubeconfig",
                "kubernetesVersion",
                "masterIp",
                "name",
                "networkId",
                "numTargetNodes",
                "pools",
                "ready",
                "region",
                "status",
                "targetNodesSize"
            ],
            "inputProperties": {
                "applications": {
                    "type": "string",
                    "description": "Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side\nof the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo\nkubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.\nFor application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or\n'MariaDB:5GB'.\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "The existing firewall ID to use for this cluster\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of k3s to install (optional, the default is currently the latest available)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for your cluster, must be unique within your account\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network for the cluster, if not declare we use the default one\n"
                },
                "numTargetNodes": {
                    "type": "integer",
                    "description": "The number of instances to create (optional, the default at the time of writing is 3)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the cluster, if not declare we use the region in declared in the provider\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Space separated list of tags, to be used freely as required\n"
                },
                "targetNodesSize": {
                    "type": "string",
                    "description": "The size of each node (optional, the default is currently g3.k3s.medium)\n"
                }
            },
            "requiredInputs": [
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "apiEndpoint": {
                        "type": "string",
                        "description": "The API server endpoint of the cluster\n"
                    },
                    "applications": {
                        "type": "string",
                        "description": "Comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side\nof the comma. Application names are case-sensitive; the available applications can be listed with the Civo CLI: 'civo\nkubernetes applications ls'. If you want to remove a default installed application, prefix it with a '-', e.g. -Traefik.\nFor application that supports plans, you can use 'app_name:app_plan' format e.g. 'Linkerd:Linkerd \u0026 Jaeger' or\n'MariaDB:5GB'.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The timestamp when the cluster was created\n"
                    },
                    "dnsEntry": {
                        "type": "string",
                        "description": "The DNS name of the cluster\n"
                    },
                    "firewallId": {
                        "type": "string",
                        "description": "The existing firewall ID to use for this cluster\n"
                    },
                    "installedApplications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/KubernetesClusterInstalledApplication:KubernetesClusterInstalledApplication"
                        }
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/KubernetesClusterInstance:KubernetesClusterInstance"
                        }
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "The kubeconfig of the cluster\n"
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The version of k3s to install (optional, the default is currently the latest available)\n"
                    },
                    "masterIp": {
                        "type": "string",
                        "description": "The IP address of the master node\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for your cluster, must be unique within your account\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network for the cluster, if not declare we use the default one\n"
                    },
                    "numTargetNodes": {
                        "type": "integer",
                        "description": "The number of instances to create (optional, the default at the time of writing is 3)\n"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/KubernetesClusterPool:KubernetesClusterPool"
                        }
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "When cluster is ready, this will return `true`\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the cluster, if not declare we use the region in declared in the provider\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Space separated list of tags, to be used freely as required\n"
                    },
                    "targetNodesSize": {
                        "type": "string",
                        "description": "The size of each node (optional, the default is currently g3.k3s.medium)\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/kubernetesNodePool:KubernetesNodePool": {
            "description": "Provides a Civo Kubernetes node pool resource. While the default node pool must be defined in the `civo.KubernetesCluster` resource, this resource can be used to add additional ones to a cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst xsmall = civo.getInstancesSize({\n    filters: [{\n        key: \"type\",\n        values: [\"kubernetes\"],\n    }],\n    sorts: [{\n        key: \"ram\",\n        direction: \"asc\",\n    }],\n});\n// Create a cluster\nconst my_cluster = new civo.KubernetesCluster(\"my-cluster\", {\n    numTargetNodes: 1,\n    targetNodesSize: xsmall.then(xsmall =\u003e xsmall.sizes)[0].then(sizes =\u003e sizes.name),\n});\n// Add a node pool\nconst front_end = new civo.KubernetesNodePool(\"front-end\", {\n    clusterId: my_cluster.id,\n    numTargetNodes: 1,\n    region: \"LON1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nxsmall = civo.get_instances_size(filters=[civo.GetInstancesSizeFilterArgs(\n        key=\"type\",\n        values=[\"kubernetes\"],\n    )],\n    sorts=[civo.GetInstancesSizeSortArgs(\n        key=\"ram\",\n        direction=\"asc\",\n    )])\n# Create a cluster\nmy_cluster = civo.KubernetesCluster(\"my-cluster\",\n    num_target_nodes=1,\n    target_nodes_size=xsmall.sizes[0].name)\n# Add a node pool\nfront_end = civo.KubernetesNodePool(\"front-end\",\n    cluster_id=my_cluster.id,\n    num_target_nodes=1,\n    region=\"LON1\")\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var xsmall = Output.Create(Civo.GetInstancesSize.InvokeAsync(new Civo.GetInstancesSizeArgs\n        {\n            Filters = \n            {\n                new Civo.Inputs.GetInstancesSizeFilterArgs\n                {\n                    Key = \"type\",\n                    Values = \n                    {\n                        \"kubernetes\",\n                    },\n                },\n            },\n            Sorts = \n            {\n                new Civo.Inputs.GetInstancesSizeSortArgs\n                {\n                    Key = \"ram\",\n                    Direction = \"asc\",\n                },\n            },\n        }));\n        // Create a cluster\n        var my_cluster = new Civo.KubernetesCluster(\"my-cluster\", new Civo.KubernetesClusterArgs\n        {\n            NumTargetNodes = 1,\n            TargetNodesSize = xsmall.Apply(xsmall =\u003e xsmall.Sizes)[0].Apply(sizes =\u003e sizes.Name),\n        });\n        // Add a node pool\n        var front_end = new Civo.KubernetesNodePool(\"front-end\", new Civo.KubernetesNodePoolArgs\n        {\n            ClusterId = my_cluster.Id,\n            NumTargetNodes = 1,\n            Region = \"LON1\",\n        });\n    }\n\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **cluster_id** (String) The ID of your cluster\n- **region** (String) The region of the node pool, has to match that of the cluster\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **num_target_nodes** (Number) the number of instances to create (optional, the default at the time of writing is 3)\n- **target_nodes_size** (String) the size of each node (optional, the default is currently g3.k3s.medium)\n\n\n## Import\n\nImport is supported using the following syntax# using cluster_id:node_pool_id\n\n```sh\n $ pulumi import civo:index/kubernetesNodePool:KubernetesNodePool my-pool 1b8b2100-0e9f-4e8f-ad78-9eb578c2a0af:502c1130-cb9b-4a88-b6d2-307bd96d946a\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of your cluster\n"
                },
                "numTargetNodes": {
                    "type": "integer",
                    "description": "the number of instances to create (optional, the default at the time of writing is 3)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the node pool, has to match that of the cluster\n"
                },
                "targetNodesSize": {
                    "type": "string",
                    "description": "the size of each node (optional, the default is currently g3.k3s.medium)\n"
                }
            },
            "required": [
                "clusterId",
                "numTargetNodes",
                "region",
                "targetNodesSize"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of your cluster\n"
                },
                "numTargetNodes": {
                    "type": "integer",
                    "description": "the number of instances to create (optional, the default at the time of writing is 3)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the node pool, has to match that of the cluster\n"
                },
                "targetNodesSize": {
                    "type": "string",
                    "description": "the size of each node (optional, the default is currently g3.k3s.medium)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodePool resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of your cluster\n"
                    },
                    "numTargetNodes": {
                        "type": "integer",
                        "description": "the number of instances to create (optional, the default at the time of writing is 3)\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the node pool, has to match that of the cluster\n"
                    },
                    "targetNodesSize": {
                        "type": "string",
                        "description": "the size of each node (optional, the default is currently g3.k3s.medium)\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/network:Network": {
            "description": "Provides a Civo network resource. This can be used to create, modify, and delete networks.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst customNet = new civo.Network(\"custom_net\", {\n    label: \"test_network\",\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ncustom_net = civo.Network(\"customNet\", label=\"test_network\")\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var customNet = new Civo.Network(\"customNet\", new Civo.NetworkArgs\n        {\n            Label = \"test_network\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.NewNetwork(ctx, \"customNet\", \u0026civo.NetworkArgs{\n\t\t\tLabel: pulumi.String(\"test_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **label** (String) Name for the network\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **region** (String) The region of the network\n\n### Read-Only\n\n- **default** (Boolean) If the network is default, this will be `true`\n- **name** (String) The name of the network\n\n\n## Import\n\nImport is supported using the following syntax# using ID\n\n```sh\n $ pulumi import civo:index/network:Network custom_net b8ecd2ab-2267-4a5e-8692-cbf1d32583e3\n```\n\n ",
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "If the network is default, this will be `true`\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name for the network\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the network\n"
                }
            },
            "required": [
                "default",
                "label",
                "name"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "Name for the network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the network\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "If the network is default, this will be `true`\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Name for the network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the network\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/sshKey:SshKey": {
            "description": "Provides a Civo SSH key resource to allow you to manage SSH keys for instance access. Keys created with this resource can be referenced in your instance configuration via their ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\nimport * from \"fs\";\n\nconst my_user = new civo.SshKey(\"my-user\", {publicKey: fs.readFileSync(\"~/.ssh/id_rsa.pub\")});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmy_user = civo.SshKey(\"my-user\", public_key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_user = new Civo.SshKey(\"my-user\", new Civo.SshKeyArgs\n        {\n            PublicKey = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n        });\n    }\n\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **name** (String) a string that will be the reference for the SSH key.\n- **public_key** (String) a string containing the SSH public key.\n\n### Optional\n\n- **id** (String) The ID of this resource.\n\n### Read-Only\n\n- **fingerprint** (String) a string containing the SSH finger print.\n\n\n## Import\n\nImport is supported using the following syntax# using ID\n\n```sh\n $ pulumi import civo:index/sshKey:SshKey mykey 87ca2ee4-57d3-4420-b9b6-411b0b4b2a0e\n```\n\n ",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "a string containing the SSH finger print.\n"
                },
                "name": {
                    "type": "string",
                    "description": "a string that will be the reference for the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "a string containing the SSH public key.\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "a string that will be the reference for the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "a string containing the SSH public key.\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "a string containing the SSH finger print.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "a string that will be the reference for the SSH key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "a string containing the SSH public key.\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/volume:Volume": {
            "description": "Provides a Civo volume which can be attached to an instance in order to provide expanded storage.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst defaultNetwork = civo.getNetwork({\n    label: \"Default\",\n});\n// Create volume\nconst db = new civo.Volume(\"db\", {\n    sizeGb: 5,\n    networkId: defaultNetwork.then(defaultNetwork =\u003e defaultNetwork.id),\n}, {\n    dependsOn: [defaultNetwork],\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ndefault_network = civo.get_network(label=\"Default\")\n# Create volume\ndb = civo.Volume(\"db\",\n    size_gb=5,\n    network_id=default_network.id,\n    opts=pulumi.ResourceOptions(depends_on=[default_network]))\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultNetwork = Output.Create(Civo.GetNetwork.InvokeAsync(new Civo.GetNetworkArgs\n        {\n            Label = \"Default\",\n        }));\n        // Create volume\n        var db = new Civo.Volume(\"db\", new Civo.VolumeArgs\n        {\n            SizeGb = 5,\n            NetworkId = defaultNetwork.Apply(defaultNetwork =\u003e defaultNetwork.Id),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                defaultNetwork,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"Default\"\n\t\tdefaultNetwork, err := civo.LookupNetwork(ctx, \u0026civo.LookupNetworkArgs{\n\t\t\tLabel: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = civo.NewVolume(ctx, \"db\", \u0026civo.VolumeArgs{\n\t\t\tSizeGb:    pulumi.Int(5),\n\t\t\tNetworkId: pulumi.String(defaultNetwork.Id),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdefaultNetwork,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **name** (String) A name that you wish to use to refer to this volume\n- **network_id** (String) The network that the volume belongs to\n- **size_gb** (Number) A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n\n### Optional\n\n- **region** (String) The region for the volume, if not declare we use the region in declared in the provider.\n\n### Read-Only\n\n- **id** (String) The ID of this resource.\n- **mount_point** (String) The mount point of the volume (from instance's perspective)\n\n\n## Import\n\nImport is supported using the following syntax# using ID\n\n```sh\n $ pulumi import civo:index/volume:Volume db 506f78a4-e098-11e5-ad9f-000f53306ae1\n```\n\n ",
            "properties": {
                "mountPoint": {
                    "type": "string",
                    "description": "The mount point of the volume (from instance's perspective)\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name that you wish to use to refer to this volume\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network that the volume belongs to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume, if not declare we use the region in declared in the provider.\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n"
                }
            },
            "required": [
                "mountPoint",
                "name",
                "networkId",
                "sizeGb"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "A name that you wish to use to refer to this volume\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network that the volume belongs to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume, if not declare we use the region in declared in the provider.\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n"
                }
            },
            "requiredInputs": [
                "networkId",
                "sizeGb"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "mountPoint": {
                        "type": "string",
                        "description": "The mount point of the volume (from instance's perspective)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name that you wish to use to refer to this volume\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network that the volume belongs to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the volume, if not declare we use the region in declared in the provider.\n"
                    },
                    "sizeGb": {
                        "type": "integer",
                        "description": "A minimum of 1 and a maximum of your available disk space from your quota specifies the size of the volume in gigabytes\n"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/volumeAttachment:VolumeAttachment": {
            "description": "Manages volume attachment/detachment to an instance.\n\n## Schema\n\n### Required\n\n- **instance_id** (String) The ID of target instance for attachment\n- **volume_id** (String) The ID of target volume for attachment\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **region** (String) The region for the volume attachment\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of target instance for attachment\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume attachment\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of target volume for attachment\n"
                }
            },
            "required": [
                "instanceId",
                "volumeId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of target instance for attachment\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the volume attachment\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of target volume for attachment\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttachment resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of target instance for attachment\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the volume attachment\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of target volume for attachment\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "civo:index/getDiskImage:getDiskImage": {
            "description": "Get information on an disk image for use in other resources (e.g. creating a instance) with the ability to filter the results.\n\n## Schema\n\n### Optional\n\n- **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)\n- **id** (String) The ID of this resource.\n- **region** (String) If is used, all disk image will be from this region. Required if no region is set in provider.\n- **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)\n\n### Read-Only\n\n- **diskimages** (List of Object) (see below for nested schema)\n\n\u003ca id=\"nestedblock--filter\"\u003e\u003c/a\u003e\n### Nested Schema for `filter`\n\nRequired:\n\n- **key** (String) Filter diskimages by this key. This may be one of `id`, `label`, `name`, `version`.\n- **values** (List of String) Only retrieves `diskimages` which keys has value that matches one of the values provided here\n\nOptional:\n\n- **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n- **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n\n\n\u003ca id=\"nestedblock--sort\"\u003e\u003c/a\u003e\n### Nested Schema for `sort`\n\nRequired:\n\n- **key** (String) Sort diskimages by this key. This may be one of `id`, `label`, `name`, `version`.\n\nOptional:\n\n- **direction** (String) The sort direction. This may be either `asc` or `desc`.\n\n\n\u003ca id=\"nestedatt--diskimages\"\u003e\u003c/a\u003e\n### Nested Schema for `diskimages`\n\nRead-Only:\n\n- **id** (String)\n- **label** (String)\n- **name** (String)\n- **version** (String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDiskImage.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageFilter:getDiskImageFilter"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageSort:getDiskImageSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDiskImage.\n",
                "properties": {
                    "diskimages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageDiskimage:getDiskImageDiskimage"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageFilter:getDiskImageFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getDiskImageSort:getDiskImageSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "diskimages",
                    "id"
                ]
            }
        },
        "civo:index/getDnsDomainName:getDnsDomainName": {
            "description": "Get information on a domain. This data source provides the name and the id.\n\nAn error will be raised if the provided domain name is not in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst domain = civo.getDnsDomainName({\n    name: \"domain.com\",\n});\nexport const domainOutput = domain.then(domain =\u003e domain.name);\nexport const domainIdOutput = domain.then(domain =\u003e domain.id);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ndomain = civo.get_dns_domain_name(name=\"domain.com\")\npulumi.export(\"domainOutput\", domain.name)\npulumi.export(\"domainIdOutput\", domain.id)\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var domain = Output.Create(Civo.GetDnsDomainName.InvokeAsync(new Civo.GetDnsDomainNameArgs\n        {\n            Name = \"domain.com\",\n        }));\n        this.DomainOutput = domain.Apply(domain =\u003e domain.Name);\n        this.DomainIdOutput = domain.Apply(domain =\u003e domain.Id);\n    }\n\n    [Output(\"domainOutput\")]\n    public Output\u003cstring\u003e DomainOutput { get; set; }\n    [Output(\"domainIdOutput\")]\n    public Output\u003cstring\u003e DomainIdOutput { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"domain.com\"\n\t\tdomain, err := civo.LookupDnsDomainName(ctx, \u0026civo.LookupDnsDomainNameArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"domainOutput\", domain.Name)\n\t\tctx.Export(\"domainIdOutput\", domain.Id)\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **name** (String) The name of the domain\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsDomainName.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDnsDomainName.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "civo:index/getDnsDomainRecord:getDnsDomainRecord": {
            "description": "Get information on a DNS record. This data source provides the name, TTL, and zone file as configured on your Civo account.\n\nAn error will be raised if the provided domain name or record are not in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst domain = civo.getDnsDomainName({\n    name: \"domain.com\",\n});\nconst www = domain.then(domain =\u003e civo.getDnsDomainRecord({\n    domainId: domain.id,\n    name: \"www\",\n}));\nexport const recordType = www.then(www =\u003e www.type);\nexport const recordTtl = www.then(www =\u003e www.ttl);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ndomain = civo.get_dns_domain_name(name=\"domain.com\")\nwww = civo.get_dns_domain_record(domain_id=domain.id,\n    name=\"www\")\npulumi.export(\"recordType\", www.type)\npulumi.export(\"recordTtl\", www.ttl)\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var domain = Output.Create(Civo.GetDnsDomainName.InvokeAsync(new Civo.GetDnsDomainNameArgs\n        {\n            Name = \"domain.com\",\n        }));\n        var www = domain.Apply(domain =\u003e Output.Create(Civo.GetDnsDomainRecord.InvokeAsync(new Civo.GetDnsDomainRecordArgs\n        {\n            DomainId = domain.Id,\n            Name = \"www\",\n        })));\n        this.RecordType = www.Apply(www =\u003e www.Type);\n        this.RecordTtl = www.Apply(www =\u003e www.Ttl);\n    }\n\n    [Output(\"recordType\")]\n    public Output\u003cstring\u003e RecordType { get; set; }\n    [Output(\"recordTtl\")]\n    public Output\u003cstring\u003e RecordTtl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"domain.com\"\n\t\tdomain, err := civo.LookupDnsDomainName(ctx, \u0026civo.LookupDnsDomainNameArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twww, err := civo.LookupDnsDomainRecord(ctx, \u0026civo.LookupDnsDomainRecordArgs{\n\t\t\tDomainId: domain.Id,\n\t\t\tName:     \"www\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"recordType\", www.Type)\n\t\tctx.Export(\"recordTtl\", www.Ttl)\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Required\n\n- **domain_id** (String) The ID of the domain\n- **name** (String) The name of the record\n\n### Optional\n\n- **id** (String) The ID of this resource.\n\n### Read-Only\n\n- **account_id** (String) The ID account of the domain\n- **created_at** (String) The date when it was created in UTC format\n- **priority** (Number) The priority of the record\n- **ttl** (Number) How long caching DNS servers should cache this record\n- **type** (String) The choice of record type from A, CNAME, MX, SRV or TXT\n- **updated_at** (String) The date when it was updated in UTC format\n- **value** (String) The IP address (A or MX), hostname (CNAME or MX) or text value (TXT) to serve for this record\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsDomainRecord.\n",
                "properties": {
                    "domainId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "domainId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsDomainRecord.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "domainId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "integer"
                    },
                    "ttl": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createdAt",
                    "domainId",
                    "name",
                    "priority",
                    "ttl",
                    "type",
                    "updatedAt",
                    "value",
                    "id"
                ]
            }
        },
        "civo:index/getInstance:getInstance": {
            "description": "Get information on an instance for use in other resources. This data source provides all of the instance's properties as configured on your Civo account.\n\nNote: This data source returns a single instance. When specifying a hostname, an error will be raised if more than one instances found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst myhostaname = civo.getInstance({\n    hostname: \"myhostname.com\",\n});\nexport const instanceOutput = myhostaname.then(myhostaname =\u003e myhostaname.publicIp);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmyhostaname = civo.get_instance(hostname=\"myhostname.com\")\npulumi.export(\"instanceOutput\", myhostaname.public_ip)\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myhostaname = Output.Create(Civo.GetInstance.InvokeAsync(new Civo.GetInstanceArgs\n        {\n            Hostname = \"myhostname.com\",\n        }));\n        this.InstanceOutput = myhostaname.Apply(myhostaname =\u003e myhostaname.PublicIp);\n    }\n\n    [Output(\"instanceOutput\")]\n    public Output\u003cstring\u003e InstanceOutput { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"myhostname.com\"\n\t\tmyhostaname, err := civo.LookupInstance(ctx, \u0026civo.LookupInstanceArgs{\n\t\t\tHostname: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"instanceOutput\", myhostaname.PublicIp)\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **hostname** (String) The hostname of the Instance\n- **id** (String) The ID of this resource.\n- **region** (String) The region of an existing Instance\n\n### Read-Only\n\n- **cpu_cores** (Number) Total cpu of the inatance\n- **created_at** (String) The date of creation of the instance\n- **disk_gb** (Number) The size of the disk\n- **firewall_id** (String) The ID of the firewall used\n- **initial_password** (String) Instance initial password\n- **initial_user** (String) The name of the initial user created on the server\n- **network_id** (String) his will be the ID of the network\n- **notes** (String) The notes of the instance\n- **private_ip** (String) The private IP\n- **pseudo_ip** (String) Is the ip that is used to route the public ip from the internet to the instance using NAT\n- **public_ip** (String) The public IP\n- **ram_mb** (Number) Total ram of the instance\n- **reverse_dns** (String) A fully qualified domain name\n- **script** (String) The contents of a script uploaded\n- **size** (String) The name of the size\n- **sshkey_id** (String) The ID SSH key\n- **status** (String) The status of the instance\n- **tags** (Set of String) An optional list of tags\n- **template** (String) The ID for the disk image/template to used to build the instance\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "cpuCores": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "diskGb": {
                        "type": "integer"
                    },
                    "firewallId": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "initialPassword": {
                        "type": "string"
                    },
                    "initialUser": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "privateIp": {
                        "type": "string"
                    },
                    "pseudoIp": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "ramMb": {
                        "type": "integer"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reverseDns": {
                        "type": "string"
                    },
                    "script": {
                        "type": "string"
                    },
                    "size": {
                        "type": "string"
                    },
                    "sshkeyId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "template": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cpuCores",
                    "createdAt",
                    "diskGb",
                    "firewallId",
                    "initialPassword",
                    "initialUser",
                    "networkId",
                    "notes",
                    "privateIp",
                    "pseudoIp",
                    "publicIp",
                    "ramMb",
                    "reverseDns",
                    "script",
                    "size",
                    "sshkeyId",
                    "status",
                    "tags",
                    "template"
                ]
            }
        },
        "civo:index/getInstances:getInstances": {
            "description": "Get information on instances for use in other resources, with the ability to filter and sort the results. If no filters are specified, all instances will be returned.\n\nNote: You can use the `civo.Instance` data source to obtain metadata about a single instance if you already know the id, unique hostname, or unique tag to retrieve.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst small-size = civo.getInstances({\n    region: \"NYC1\",\n    filters: [{\n        key: \"size\",\n        values: [g3.small],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nsmall_size = civo.get_instances(region=\"NYC1\",\n    filters=[civo.GetInstancesFilterArgs(\n        key=\"size\",\n        values=[g3[\"small\"]],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var small_size = Output.Create(Civo.GetInstances.InvokeAsync(new Civo.GetInstancesArgs\n        {\n            Region = \"NYC1\",\n            Filters = \n            {\n                new Civo.Inputs.GetInstancesFilterArgs\n                {\n                    Key = \"size\",\n                    Values = \n                    {\n                        g3.Small,\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)\n- **id** (String) The ID of this resource.\n- **region** (String) If used, all instances will be from the provided region\n- **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)\n\n### Read-Only\n\n- **instances** (List of Object) (see below for nested schema)\n\n\u003ca id=\"nestedblock--filter\"\u003e\u003c/a\u003e\n### Nested Schema for `filter`\n\nRequired:\n\n- **key** (String) Filter instances by this key. This may be one of `cpu_cores`, `created_at`, `disk_gb`, `firewall_id`, `hostname`, `id`, `initial_password`, `initial_user`, `network_id`, `notes`, `private_ip`, `pseudo_ip`, `public_ip`, `ram_mb`, `region`, `reverse_dns`, `script`, `size`, `sshkey_id`, `status`, `tags`, `template`.\n- **values** (List of String) Only retrieves `instances` which keys has value that matches one of the values provided here\n\nOptional:\n\n- **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n- **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n\n\n\u003ca id=\"nestedblock--sort\"\u003e\u003c/a\u003e\n### Nested Schema for `sort`\n\nRequired:\n\n- **key** (String) Sort instances by this key. This may be one of `cpu_cores`, `created_at`, `disk_gb`, `firewall_id`, `hostname`, `id`, `initial_password`, `initial_user`, `network_id`, `notes`, `private_ip`, `pseudo_ip`, `public_ip`, `ram_mb`, `region`, `reverse_dns`, `script`, `size`, `sshkey_id`, `status`, `template`.\n\nOptional:\n\n- **direction** (String) The sort direction. This may be either `asc` or `desc`.\n\n\n\u003ca id=\"nestedatt--instances\"\u003e\u003c/a\u003e\n### Nested Schema for `instances`\n\nRead-Only:\n\n- **cpu_cores** (Number)\n- **created_at** (String)\n- **disk_gb** (Number)\n- **firewall_id** (String)\n- **hostname** (String)\n- **id** (String)\n- **initial_password** (String)\n- **initial_user** (String)\n- **network_id** (String)\n- **notes** (String)\n- **private_ip** (String)\n- **pseudo_ip** (String)\n- **public_ip** (String)\n- **ram_mb** (Number)\n- **region** (String)\n- **reverse_dns** (String)\n- **script** (String)\n- **size** (String)\n- **sshkey_id** (String)\n- **status** (String)\n- **tags** (Set of String)\n- **template** (String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesFilter:getInstancesFilter"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSort:getInstancesSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesFilter:getInstancesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesInstance:getInstancesInstance"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSort:getInstancesSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "id"
                ]
            }
        },
        "civo:index/getInstancesSize:getInstancesSize": {
            "description": "Retrieves information about the instance sizes that Civo supports, with the ability to filter the results.\n\n## Schema\n\n### Optional\n\n- **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)\n- **id** (String) The ID of this resource.\n- **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)\n\n### Read-Only\n\n- **sizes** (List of Object) (see below for nested schema)\n\n\u003ca id=\"nestedblock--filter\"\u003e\u003c/a\u003e\n### Nested Schema for `filter`\n\nRequired:\n\n- **key** (String) Filter sizes by this key. This may be one of `cpu`, `description`, `disk`, `name`, `ram`, `selectable`, `type`.\n- **values** (List of String) Only retrieves `sizes` which keys has value that matches one of the values provided here\n\nOptional:\n\n- **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n- **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n\n\n\u003ca id=\"nestedblock--sort\"\u003e\u003c/a\u003e\n### Nested Schema for `sort`\n\nRequired:\n\n- **key** (String) Sort sizes by this key. This may be one of `cpu`, `description`, `disk`, `name`, `ram`, `selectable`, `type`.\n\nOptional:\n\n- **direction** (String) The sort direction. This may be either `asc` or `desc`.\n\n\n\u003ca id=\"nestedatt--sizes\"\u003e\u003c/a\u003e\n### Nested Schema for `sizes`\n\nRead-Only:\n\n- **cpu** (Number)\n- **description** (String)\n- **disk** (Number)\n- **name** (String)\n- **ram** (Number)\n- **selectable** (Boolean)\n- **type** (String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstancesSize.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSizeFilter:getInstancesSizeFilter"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSizeSort:getInstancesSizeSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstancesSize.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSizeFilter:getInstancesSizeFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sizes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSizeSize:getInstancesSizeSize"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getInstancesSizeSort:getInstancesSizeSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "sizes",
                    "id"
                ]
            }
        },
        "civo:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Provides a Civo Kubernetes cluster data source.\n\nNote: This data source returns a single Kubernetes cluster. When specifying a name, an error will be raised if more than one Kubernetes cluster found.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst my-cluster = civo.getKubernetesCluster({\n    name: \"my-super-cluster\",\n});\nexport const kubernetesClusterOutput = my_cluster.then(my_cluster =\u003e my_cluster.masterIp);\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmy_cluster = civo.get_kubernetes_cluster(name=\"my-super-cluster\")\npulumi.export(\"kubernetesClusterOutput\", my_cluster.master_ip)\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_cluster = Output.Create(Civo.GetKubernetesCluster.InvokeAsync(new Civo.GetKubernetesClusterArgs\n        {\n            Name = \"my-super-cluster\",\n        }));\n        this.KubernetesClusterOutput = my_cluster.Apply(my_cluster =\u003e my_cluster.MasterIp);\n    }\n\n    [Output(\"kubernetesClusterOutput\")]\n    public Output\u003cstring\u003e KubernetesClusterOutput { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"my-super-cluster\"\n\t\tmy_cluster, err := civo.LookupKubernetesCluster(ctx, \u0026civo.LookupKubernetesClusterArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"kubernetesClusterOutput\", my_cluster.MasterIp)\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **name** (String) The name of the Kubernetes Cluster\n- **region** (String) The region where cluster is running\n\n### Read-Only\n\n- **api_endpoint** (String) The base URL of the API server on the Kubernetes master node\n- **applications** (String) A list of application installed\n- **created_at** (String) The date where the Kubernetes cluster was create\n- **dns_entry** (String) The unique dns entry for the cluster in this case point to the master\n- **installed_applications** (List of Object) (see below for nested schema)\n- **instances** (List of Object) (see below for nested schema)\n- **kubeconfig** (String) A representation of the Kubernetes cluster's kubeconfig in yaml format\n- **kubernetes_version** (String) The version of Kubernetes\n- **master_ip** (String) The IP of the Kubernetes master node\n- **num_target_nodes** (Number) The size of the Kubernetes cluster\n- **pools** (List of Object) (see below for nested schema)\n- **ready** (Boolean) If the Kubernetes cluster is ready\n- **status** (String) The status of Kubernetes cluster\n- **tags** (String) A list of tags\n- **target_nodes_size** (String) The size of each node\n\n\u003ca id=\"nestedatt--installed_applications\"\u003e\u003c/a\u003e\n### Nested Schema for `installed_applications`\n\nRead-Only:\n\n- **application** (String)\n- **category** (String)\n- **installed** (Boolean)\n- **version** (String)\n\n\n\u003ca id=\"nestedatt--instances\"\u003e\u003c/a\u003e\n### Nested Schema for `instances`\n\nRead-Only:\n\n- **cpu_cores** (Number)\n- **disk_gb** (Number)\n- **hostname** (String)\n- **ram_mb** (Number)\n- **size** (String)\n- **status** (String)\n- **tags** (Set of String)\n\n\n\u003ca id=\"nestedatt--pools\"\u003e\u003c/a\u003e\n### Nested Schema for `pools`\n\nRead-Only:\n\n- **count** (Number)\n- **id** (String)\n- **instance_names** (Set of String)\n- **instances** (List of Object) (see below for nested schema)\n- **size** (String)\n\n\u003ca id=\"nestedobjatt--pools--instances\"\u003e\u003c/a\u003e\n### Nested Schema for `pools.instances`\n\nRead-Only:\n\n- **cpu_cores** (Number)\n- **disk_gb** (Number)\n- **hostname** (String)\n- **ram_mb** (Number)\n- **size** (String)\n- **status** (String)\n- **tags** (Set of String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "apiEndpoint": {
                        "type": "string"
                    },
                    "applications": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dnsEntry": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "installedApplications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesClusterInstalledApplication:getKubernetesClusterInstalledApplication"
                        }
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesClusterInstance:getKubernetesClusterInstance"
                        }
                    },
                    "kubeconfig": {
                        "type": "string"
                    },
                    "kubernetesVersion": {
                        "type": "string"
                    },
                    "masterIp": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "numTargetNodes": {
                        "type": "integer"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesClusterPool:getKubernetesClusterPool"
                        }
                    },
                    "ready": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "string"
                    },
                    "targetNodesSize": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiEndpoint",
                    "applications",
                    "createdAt",
                    "dnsEntry",
                    "installedApplications",
                    "instances",
                    "kubeconfig",
                    "kubernetesVersion",
                    "masterIp",
                    "numTargetNodes",
                    "pools",
                    "ready",
                    "status",
                    "tags",
                    "targetNodesSize"
                ]
            }
        },
        "civo:index/getKubernetesVersion:getKubernetesVersion": {
            "description": "Provides access to the available Civo Kubernetes versions, with the ability to filter the results.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst stable = pulumi.output(civo.getKubernetesVersion({\n    filters: [{\n        key: \"type\",\n        values: [\"stable\"],\n    }],\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nstable = civo.get_kubernetes_version(filters=[civo.GetKubernetesVersionFilterArgs(\n    key=\"type\",\n    values=[\"stable\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var stable = Output.Create(Civo.GetKubernetesVersion.InvokeAsync(new Civo.GetKubernetesVersionArgs\n        {\n            Filters = \n            {\n                new Civo.Inputs.GetKubernetesVersionFilterArgs\n                {\n                    Key = \"type\",\n                    Values = \n                    {\n                        \"stable\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := civo.GetKubernetesVersion(ctx, \u0026civo.GetKubernetesVersionArgs{\n\t\t\tFilters: []civo.GetKubernetesVersionFilter{\n\t\t\t\tcivo.GetKubernetesVersionFilter{\n\t\t\t\t\tKey: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"stable\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)\n- **id** (String) The ID of this resource.\n- **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)\n\n### Read-Only\n\n- **versions** (List of Object) (see below for nested schema)\n\n\u003ca id=\"nestedblock--filter\"\u003e\u003c/a\u003e\n### Nested Schema for `filter`\n\nRequired:\n\n- **key** (String) Filter versions by this key. This may be one of `default`, `label`, `type`, `version`.\n- **values** (List of String) Only retrieves `versions` which keys has value that matches one of the values provided here\n\nOptional:\n\n- **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n- **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n\n\n\u003ca id=\"nestedblock--sort\"\u003e\u003c/a\u003e\n### Nested Schema for `sort`\n\nRequired:\n\n- **key** (String) Sort versions by this key. This may be one of `default`, `label`, `type`, `version`.\n\nOptional:\n\n- **direction** (String) The sort direction. This may be either `asc` or `desc`.\n\n\n\u003ca id=\"nestedatt--versions\"\u003e\u003c/a\u003e\n### Nested Schema for `versions`\n\nRead-Only:\n\n- **default** (Boolean)\n- **label** (String)\n- **type** (String)\n- **version** (String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesVersion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionFilter:getKubernetesVersionFilter"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionSort:getKubernetesVersionSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesVersion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionFilter:getKubernetesVersionFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionSort:getKubernetesVersionSort"
                        }
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getKubernetesVersionVersion:getKubernetesVersionVersion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "versions",
                    "id"
                ]
            }
        },
        "civo:index/getNetwork:getNetwork": {
            "description": "Retrieve information about a network for use in other resources.\n\nThis data source provides all of the network's properties as configured on your Civo account.\n\nNetworks may be looked up by id or label, and you can optionally pass region if you want to make a lookup for an expecific network inside that region.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst test = pulumi.output(civo.getNetwork({\n    label: \"test-network\",\n    region: \"NYC1\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\ntest = civo.get_network(label=\"test-network\",\n    region=\"NYC1\")\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Civo.GetNetwork.InvokeAsync(new Civo.GetNetworkArgs\n        {\n            Label = \"test-network\",\n            Region = \"NYC1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"test-network\"\n\t\topt1 := \"NYC1\"\n\t\t_, err := civo.LookupNetwork(ctx, \u0026civo.LookupNetworkArgs{\n\t\t\tLabel:  \u0026opt0,\n\t\t\tRegion: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **label** (String) The label of an existing network\n- **region** (String) The region of an existing network\n\n### Read-Only\n\n- **default** (Boolean) If is the default network\n- **name** (String) The name of the network\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "default": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "default",
                    "name"
                ]
            }
        },
        "civo:index/getRegion:getRegion": {
            "description": "Retrieves information about the region that Civo supports, with the ability to filter the results.\n\n## Schema\n\n### Optional\n\n- **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)\n- **id** (String) The ID of this resource.\n- **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)\n\n### Read-Only\n\n- **regions** (List of Object) (see below for nested schema)\n\n\u003ca id=\"nestedblock--filter\"\u003e\u003c/a\u003e\n### Nested Schema for `filter`\n\nRequired:\n\n- **key** (String) Filter regions by this key. This may be one of `code`, `country`, `default`, `name`.\n- **values** (List of String) Only retrieves `regions` which keys has value that matches one of the values provided here\n\nOptional:\n\n- **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n- **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n\n\n\u003ca id=\"nestedblock--sort\"\u003e\u003c/a\u003e\n### Nested Schema for `sort`\n\nRequired:\n\n- **key** (String) Sort regions by this key. This may be one of `code`, `country`, `default`, `name`.\n\nOptional:\n\n- **direction** (String) The sort direction. This may be either `asc` or `desc`.\n\n\n\u003ca id=\"nestedatt--regions\"\u003e\u003c/a\u003e\n### Nested Schema for `regions`\n\nRead-Only:\n\n- **code** (String)\n- **country** (String)\n- **default** (Boolean)\n- **name** (String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionFilter:getRegionFilter"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionSort:getRegionSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionFilter:getRegionFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionRegion:getRegionRegion"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getRegionSort:getRegionSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "id"
                ]
            }
        },
        "civo:index/getSshKey:getSshKey": {
            "description": "Get information on a SSH key. This data source provides the name, and fingerprint as configured on your Civo account.\n\nAn error will be raised if the provided SSH key name does not exist in your Civo account.\n\n## Schema\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **name** (String) The name of the SSH key\n\n### Read-Only\n\n- **fingerprint** (String) The fingerprint of the public key of the SSH key\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fingerprint"
                ]
            }
        },
        "civo:index/getTemplate:getTemplate": {
            "description": "`civo.getTemplate` data source is deprecated. Moving forward, please use `civo.getDiskImage` data source.\n\nGet information on an template for use in other resources (e.g. creating a instance) with the ability to filter the results.\n\n## Schema\n\n### Optional\n\n- **filter** (Block Set) One or more key/value pairs on which to filter results (see below for nested schema)\n- **id** (String) The ID of this resource.\n- **region** (String)\n- **sort** (Block List) One or more key/direction pairs on which to sort results (see below for nested schema)\n\n### Read-Only\n\n- **templates** (List of Object) (see below for nested schema)\n\n\u003ca id=\"nestedblock--filter\"\u003e\u003c/a\u003e\n### Nested Schema for `filter`\n\nRequired:\n\n- **key** (String) Filter templates by this key. This may be one of `id`, `label`, `name`, `version`.\n- **values** (List of String) Only retrieves `templates` which keys has value that matches one of the values provided here\n\nOptional:\n\n- **all** (Boolean) Set to `true` to require that a field match all of the `values` instead of just one or more of them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure that all of the `values` are present in the list or set.\n- **match_by** (String) One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as substrings to find within the string field.\n\n\n\u003ca id=\"nestedblock--sort\"\u003e\u003c/a\u003e\n### Nested Schema for `sort`\n\nRequired:\n\n- **key** (String) Sort templates by this key. This may be one of `id`, `label`, `name`, `version`.\n\nOptional:\n\n- **direction** (String) The sort direction. This may be either `asc` or `desc`.\n\n\n\u003ca id=\"nestedatt--templates\"\u003e\u003c/a\u003e\n### Nested Schema for `templates`\n\nRead-Only:\n\n- **id** (String)\n- **label** (String)\n- **name** (String)\n- **version** (String)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplate.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getTemplateFilter:getTemplateFilter"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getTemplateSort:getTemplateSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTemplate.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getTemplateFilter:getTemplateFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getTemplateSort:getTemplateSort"
                        }
                    },
                    "templates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/civo:index/getTemplateTemplate:getTemplateTemplate"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "templates",
                    "id"
                ]
            }
        },
        "civo:index/getVolume:getVolume": {
            "description": "Get information on a volume for use in other resources. This data source provides all of the volumes properties as configured on your Civo account.\n\nAn error will be raised if the provided volume name does not exist in your Civo account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as civo from \"@pulumi/civo\";\n\nconst mysql = pulumi.output(civo.getVolume({\n    name: \"database-mysql\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_civo as civo\n\nmysql = civo.get_volume(name=\"database-mysql\")\n```\n```csharp\nusing Pulumi;\nusing Civo = Pulumi.Civo;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mysql = Output.Create(Civo.GetVolume.InvokeAsync(new Civo.GetVolumeArgs\n        {\n            Name = \"database-mysql\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-civo/sdk/v2/go/civo\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"database-mysql\"\n\t\t_, err := civo.LookupVolume(ctx, \u0026civo.LookupVolumeArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003c!-- schema generated by tfplugindocs --\u003e\n{{% /example %}}\n{{% /examples %}}\n## Schema\n\n### Optional\n\n- **id** (String) The ID of this resource.\n- **name** (String) The name of the volume\n- **region** (String) The region where volume is running\n\n### Read-Only\n\n- **created_at** (String) The date of the creation of the volume\n- **mount_point** (String) The mount point of the volume\n- **size_gb** (Number) The size of the volume (in GB)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "mountPoint": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "sizeGb": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "mountPoint",
                    "sizeGb"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "civo": "Civo"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-civo/sdk/v2/go/civo"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Civo cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/civo/terraform-provider-civo)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-civo` repo](https://github.com/pulumi/pulumi-civo/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`civo/terraform-provider-civo` repo](https://github.com/civo/terraform-provider-civo/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/civo/terraform-provider-civo)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-civo` repo](https://github.com/pulumi/pulumi-civo/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`civo/terraform-provider-civo` repo](https://github.com/civo/terraform-provider-civo/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}